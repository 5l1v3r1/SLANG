#!/usr/bin/env python3

# MIT License
# Copyright (c) 2019 Anshuman Dhuliya

# These imports must be done in the module eval()ing this file.
# import span.ir.types as types
# import span.ir.op as op
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.ir as ir

ir.TranslationUnit(
  name = "span.tests.test6",
  description = """
    Loop with pointers and expressions,
    Different format specification for span.tests.test5 code.
    
     1: a = 11;
     2: u = &a;
     3: input(cond); // special instruction
     4: while cond: // `cond` value is undeterministic.
     5:   tmp = *u; // point-of-interest
     6:   b = tmp % 2;
     7:   if b:
     8:     b = 15;
     9:     u = &b;
    ..:   else:
    10:     b = 16;
    11: nop();
  """,

  allVars = {
    "v:main:u": types.Ptr(to=types.Int),
    "v:main:a": types.Int,
    "v:main:b": types.Int,
    "v:main:tmp": types.Int,
    "v:main:cond": types.Int,
  }, # end allVars dict

  allObjs = {
    "f:main":
      obj.Func(
        name= "f:main",
        paramNames= [],
        returnType= types.Int,
        paramTypes= [],

        basicBlocks= {
          -1: [ # -1 is always start/entry BB. (REQUIRED)
            instr.AssignI(expr.VarE("v:main:a"), expr.LitE(11)),
            instr.AssignI(expr.VarE("v:main:u"), expr.UnaryE(op.UO_ADDROF, expr.VarE("v:main:a"))),
            instr.UnDefValI(expr.VarE("v:main:cond")),
          ],

          2: [
            instr.CondI(expr.VarE("v:main:cond")),
          ],

          3: [
            instr.AssignI(expr.VarE("v:main:tmp"), expr.UnaryE(op.UO_DEREF, expr.VarE(
              "v:main:u"))),
            instr.AssignI(expr.VarE("v:main:b"), expr.BinaryE(expr.VarE("v:main:tmp"),
                                                              op.BO_MOD, expr.LitE(2))),
            instr.CondI(expr.VarE("v:main:b")),
          ],

          4: [
            instr.AssignI(expr.VarE("v:main:b"), expr.LitE(15)),
            instr.AssignI(expr.VarE("v:main:u"), expr.UnaryE(op.UO_ADDROF, expr.VarE("v:main:b"))),
          ],

          5: [
            instr.AssignI(expr.VarE("v:main:b"), expr.LitE(16))
          ],

          0: [], # 0 is always end/exit block (REQUIRED)
        },

        bbEdges= [
          (-1, 2, types.UnCondEdge),
          (2, 0, types.FalseEdge),
          (2, 3, types.TrueEdge),
          (3, 4, types.TrueEdge),
          (3, 5, types.FalseEdge),
          (4, 2, types.UnCondEdge),
          (5, 2, types.UnCondEdge),
        ],

        loc = types.Loc(10,11),
      ),
  } # end allObjs dict
) # end irTunit.TUnit object

