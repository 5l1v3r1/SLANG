
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "001870.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.11": types.Ptr(to=types.Int8),
    "v:main:t.10": types.Ptr(to=types.Void),
    "v:main:t.9": types.Ptr(to=types.Int8),
    "v:main:t.7": types.Int32,
    "v:main:t.6": types.Int32,
    "v:main:t.5": types.Int8,
    "v:main:t.4": types.Int32,
    "v:main:t.3": types.Int32,
    "v:main:t.8": types.Int8,
    "v:main:freddy": types.ConstSizeArray(of=types.Int8, size=7),
    "v:main:t.1": types.UInt32,
    "v:main:ShowChar": types.Int8,
    "v:main:InChar": types.Int32,
    "v:main:f": types.Ptr(to=types.Struct("s:_IO_FILE")),
    "v:main:t.2": types.UInt32,
  }, # end allVars dict

  allObjs = {
    "s:_IO_marker":
      types.Struct(
        name = "s:_IO_marker",
        fields = [
          ("_next", types.Ptr(to=types.Struct("s:_IO_marker"))),
          ("_sbuf", types.Ptr(to=types.Struct("s:_IO_FILE"))),
          ("_pos", types.Int32),
        ],
        loc = Loc(160,1),
      ),

    "s:_IO_FILE":
      types.Struct(
        name = "s:_IO_FILE",
        fields = [
          ("_flags", types.Int32),
          ("_IO_read_ptr", types.Ptr(to=types.Int8)),
          ("_IO_read_end", types.Ptr(to=types.Int8)),
          ("_IO_read_base", types.Ptr(to=types.Int8)),
          ("_IO_write_base", types.Ptr(to=types.Int8)),
          ("_IO_write_ptr", types.Ptr(to=types.Int8)),
          ("_IO_write_end", types.Ptr(to=types.Int8)),
          ("_IO_buf_base", types.Ptr(to=types.Int8)),
          ("_IO_buf_end", types.Ptr(to=types.Int8)),
          ("_IO_save_base", types.Ptr(to=types.Int8)),
          ("_IO_backup_base", types.Ptr(to=types.Int8)),
          ("_IO_save_end", types.Ptr(to=types.Int8)),
          ("_markers", types.Ptr(to=types.Struct("s:_IO_marker"))),
          ("_chain", types.Ptr(to=types.Struct("s:_IO_FILE"))),
          ("_fileno", types.Int32),
          ("_flags2", types.Int32),
          ("_old_offset", types.Int32),
          ("_cur_column", types.UInt32),
          ("_vtable_offset", types.Int8),
          ("_shortbuf", types.ConstSizeArray(of=types.Int8, size=1)),
          ("_lock", types.Ptr(to=types.Void)),
          ("_offset", types.Int32),
          ("__pad1", types.Ptr(to=types.Void)),
          ("__pad2", types.Ptr(to=types.Void)),
          ("__pad3", types.Ptr(to=types.Void)),
          ("__pad4", types.Ptr(to=types.Void)),
          ("__pad5", types.UInt32),
          ("_mode", types.Int32),
          ("_unused2", types.ConstSizeArray(of=types.Int8, size=20)),
        ],
        loc = Loc(245,1),
      ),


    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:main:f", Loc(5,4)), expr.CallE(expr.FuncE("f:fopen", Loc(5,14)), [expr.LitE("""fred.txt""", Loc(5,20)), expr.LitE("""w""", Loc(5,32))], Loc(5,14)), Loc(5,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:fwrite", Loc(6,4)), [expr.LitE("""hello
hello
""", Loc(6,11)), expr.LitE(1, Loc(6,29)), expr.LitE(12, Loc(6,32)), expr.VarE("v:main:f", Loc(6,36))], Loc(6,4)), Loc(6,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:fclose", Loc(7,4)), [expr.VarE("v:main:f", Loc(7,11))], Loc(7,4)), Loc(7,4)),
            instr.AssignI(expr.VarE("v:main:f", Loc(10,4)), expr.CallE(expr.FuncE("f:fopen", Loc(10,8)), [expr.LitE("""fred.txt""", Loc(10,14)), expr.LitE("""r""", Loc(10,26))], Loc(10,8)), Loc(10,4)),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(11,8)), expr.CallE(expr.FuncE("f:fread", Loc(11,8)), [expr.VarE("v:main:freddy", Loc(11,14)), expr.LitE(1, Loc(11,22)), expr.LitE(6, Loc(11,25)), expr.VarE("v:main:f", Loc(11,28))], Loc(11,8)), Loc(11,8)),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(11,8)), expr.BinaryE(expr.VarE("v:main:t.1", Loc(11,8)), op.BO_NE, expr.LitE(6, Loc(11,34)), Loc(11,8)), Loc(11,8)),
            instr.CondI(expr.VarE("v:main:t.2", Loc(11,8)), "IfTrue1", "IfFalse1", Loc(11,8)),
            instr.LabelI("IfTrue1"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(12,7)), [expr.LitE("""couldn't read fred.txt
""", Loc(12,14))], Loc(12,7)), Loc(12,7)),
            instr.GotoI("IfExit1"),
            instr.LabelI("IfFalse1"),
            instr.LabelI("IfExit1"),
            instr.AssignI(expr.ArrayE(expr.LitE(6, Loc(14,11)), expr.VarE("v:main:freddy", Loc(14,4)), Loc(14,4)), , Loc(14,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:fclose", Loc(15,4)), [expr.VarE("v:main:f", Loc(15,11))], Loc(15,4)), Loc(15,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(17,4)), [expr.LitE("""%s""", Loc(17,11)), expr.VarE("v:main:freddy", Loc(17,17))], Loc(17,4)), Loc(17,4)),
            instr.AssignI(expr.VarE("v:main:f", Loc(21,4)), expr.CallE(expr.FuncE("f:fopen", Loc(21,8)), [expr.LitE("""fred.txt""", Loc(21,14)), expr.LitE("""r""", Loc(21,26))], Loc(21,8)), Loc(21,4)),
            instr.LabelI("WhileCond2"),
            instr.AssignI(expr.VarE("v:main:InChar", Loc(22,13)), expr.CallE(expr.FuncE("f:fgetc", Loc(22,22)), [expr.VarE("v:main:f", Loc(22,28))], Loc(22,22)), Loc(22,13)),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(22,35)), expr.UnaryE(op.UO_MINUS, expr.LitE(1, Loc(22,35)), Loc(22,35)), Loc(22,35)),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(22,12)), expr.BinaryE(expr.VarE("v:main:InChar", Loc(22,13)), op.BO_NE, expr.VarE("v:main:t.3", Loc(22,35)), Loc(22,12)), Loc(22,12)),
            instr.CondI(expr.VarE("v:main:t.4", Loc(22,12)), "WhileBody2", "WhileExit2", Loc(22,12)),
            instr.LabelI("WhileBody2"),
            instr.AssignI(expr.VarE("v:main:ShowChar", Loc(24,7)), expr.VarE("v:main:InChar", Loc(24,18)), Loc(24,7)),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(25,11)), expr.BinaryE(expr.VarE("v:main:ShowChar", Loc(25,11)), op.BO_LT, , Loc(25,11)), Loc(25,11)),
            instr.CondI(expr.VarE("v:main:t.5", Loc(25,11)), "IfTrue3", "IfFalse3", Loc(25,11)),
            instr.LabelI("IfTrue3"),
            instr.AssignI(expr.VarE("v:main:ShowChar", Loc(26,10)), , Loc(26,10)),
            instr.GotoI("IfExit3"),
            instr.LabelI("IfFalse3"),
            instr.LabelI("IfExit3"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(28,7)), [expr.LitE("""ch: %d '%c'
""", Loc(28,14)), expr.VarE("v:main:InChar", Loc(28,31)), expr.VarE("v:main:ShowChar", Loc(28,39))], Loc(28,7)), Loc(28,7)),
            instr.GotoI("WhileCond2"),
            instr.LabelI("WhileExit2"),
            instr.CallI(expr.CallE(expr.FuncE("f:fclose", Loc(30,4)), [expr.VarE("v:main:f", Loc(30,11))], Loc(30,4)), Loc(30,4)),
            instr.AssignI(expr.VarE("v:main:f", Loc(32,4)), expr.CallE(expr.FuncE("f:fopen", Loc(32,8)), [expr.LitE("""fred.txt""", Loc(32,14)), expr.LitE("""r""", Loc(32,26))], Loc(32,8)), Loc(32,4)),
            instr.LabelI("WhileCond4"),
            instr.AssignI(expr.VarE("v:main:InChar", Loc(33,13)), expr.CallE(expr.FuncE("f:_IO_getc", Loc(33,22)), [expr.VarE("v:main:f", Loc(33,22))], Loc(33,22)), Loc(33,13)),
            instr.AssignI(expr.VarE("v:main:t.6", Loc(33,34)), expr.UnaryE(op.UO_MINUS, expr.LitE(1, Loc(33,34)), Loc(33,34)), Loc(33,34)),
            instr.AssignI(expr.VarE("v:main:t.7", Loc(33,12)), expr.BinaryE(expr.VarE("v:main:InChar", Loc(33,13)), op.BO_NE, expr.VarE("v:main:t.6", Loc(33,34)), Loc(33,12)), Loc(33,12)),
            instr.CondI(expr.VarE("v:main:t.7", Loc(33,12)), "WhileBody4", "WhileExit4", Loc(33,12)),
            instr.LabelI("WhileBody4"),
            instr.AssignI(expr.VarE("v:main:ShowChar", Loc(35,7)), expr.VarE("v:main:InChar", Loc(35,18)), Loc(35,7)),
            instr.AssignI(expr.VarE("v:main:t.8", Loc(36,11)), expr.BinaryE(expr.VarE("v:main:ShowChar", Loc(36,11)), op.BO_LT, , Loc(36,11)), Loc(36,11)),
            instr.CondI(expr.VarE("v:main:t.8", Loc(36,11)), "IfTrue5", "IfFalse5", Loc(36,11)),
            instr.LabelI("IfTrue5"),
            instr.AssignI(expr.VarE("v:main:ShowChar", Loc(37,10)), , Loc(37,10)),
            instr.GotoI("IfExit5"),
            instr.LabelI("IfFalse5"),
            instr.LabelI("IfExit5"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(39,7)), [expr.LitE("""ch: %d '%c'
""", Loc(39,14)), expr.VarE("v:main:InChar", Loc(39,31)), expr.VarE("v:main:ShowChar", Loc(39,39))], Loc(39,7)), Loc(39,7)),
            instr.GotoI("WhileCond4"),
            instr.LabelI("WhileExit4"),
            instr.CallI(expr.CallE(expr.FuncE("f:fclose", Loc(41,4)), [expr.VarE("v:main:f", Loc(41,11))], Loc(41,4)), Loc(41,4)),
            instr.AssignI(expr.VarE("v:main:f", Loc(43,4)), expr.CallE(expr.FuncE("f:fopen", Loc(43,8)), [expr.LitE("""fred.txt""", Loc(43,14)), expr.LitE("""r""", Loc(43,26))], Loc(43,8)), Loc(43,4)),
            instr.LabelI("WhileCond6"),
            instr.AssignI(expr.VarE("v:main:t.9", Loc(44,11)), expr.CallE(expr.FuncE("f:fgets", Loc(44,11)), [expr.VarE("v:main:freddy", Loc(44,17)), , expr.VarE("v:main:f", Loc(44,41))], Loc(44,11)), Loc(44,11)),
            instr.AssignI(expr.VarE("v:main:t.10", ), expr.CastE(expr.LitE(0, Loc(44,47)), types.Ptr(to=types.Void), Loc(44,47)), ),
            instr.AssignI(expr.VarE("v:main:t.11", Loc(44,11)), expr.BinaryE(expr.VarE("v:main:t.9", Loc(44,11)), op.BO_NE, expr.VarE("v:main:t.10", ), Loc(44,11)), Loc(44,11)),
            instr.CondI(expr.VarE("v:main:t.11", Loc(44,11)), "WhileBody6", "WhileExit6", Loc(44,11)),
            instr.LabelI("WhileBody6"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(45,7)), [expr.LitE("""x: %s""", Loc(45,14)), expr.VarE("v:main:freddy", Loc(45,23))], Loc(45,7)), Loc(45,7)),
            instr.GotoI("WhileCond6"),
            instr.LabelI("WhileExit6"),
            instr.CallI(expr.CallE(expr.FuncE("f:fclose", Loc(47,4)), [expr.VarE("v:main:f", Loc(47,11))], Loc(47,4)), Loc(47,4)),
            instr.ReturnI(expr.LitE(0, Loc(49,11))),
        ], # instrSeq end.
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
