
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "000830.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:three:c": types.Int32,
    "v:three:b": types.Int32,
    "v:three:a": types.Int32,
    "v:main:t.4": types.Int32,
    "v:one:a": types.Int32,
    "v:main:t.1": types.Int32,
    "v:main:t.3": types.Int32,
    "v:two:a": types.Int32,
    "v:main:t.2": types.Int32,
    "v:two:b": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          3: [
            instr.AssignI(expr.VarE("v:main:t.1", Loc(51,6)), expr.CallE(expr.FuncE("f:three", Loc(51,6)), [expr.LitE(1, Loc(51,6)), expr.LitE(2, Loc(51,6)), expr.LitE(3, Loc(51,6))], Loc(51,6)), Loc(51,6)),
            instr.CondI(expr.VarE("v:main:t.1", Loc(51,6)), Loc(51,2)),
          ],

          2: [
            instr.ReturnI(expr.LitE(4, Loc(52,10)), Loc(52,3)),
          ],

          1: [
            instr.ReturnI(expr.LitE(0, Loc(54,9)), Loc(54,2)),
          ],

          0: [
            instr.NopI(),
          ],

          4: [
            instr.ReturnI(expr.LitE(3, Loc(50,10)), Loc(50,3)),
          ],

          -1: [
            instr.NopI(),
          ],

          5: [
            instr.AssignI(expr.VarE("v:main:t.2", Loc(49,6)), expr.CallE(expr.FuncE("f:two", Loc(49,6)), [expr.LitE(1, Loc(49,6)), expr.LitE(2, Loc(49,6))], Loc(49,6)), Loc(49,6)),
            instr.CondI(expr.VarE("v:main:t.2", Loc(49,6)), Loc(49,2)),
          ],

          6: [
            instr.ReturnI(expr.LitE(2, Loc(48,10)), Loc(48,3)),
          ],

          7: [
            instr.AssignI(expr.VarE("v:main:t.3", Loc(47,6)), expr.CallE(expr.FuncE("f:one", Loc(47,6)), [expr.LitE(1, Loc(47,6))], Loc(47,6)), Loc(47,6)),
            instr.CondI(expr.VarE("v:main:t.3", Loc(47,6)), Loc(47,2)),
          ],

          8: [
            instr.ReturnI(expr.LitE(1, Loc(46,10)), Loc(46,3)),
          ],

          9: [
            instr.AssignI(expr.VarE("v:main:t.4", Loc(45,6)), expr.CallE(expr.FuncE("f:none", Loc(45,6)), [], Loc(45,6)), Loc(45,6)),
            instr.CondI(expr.VarE("v:main:t.4", Loc(45,6)), Loc(45,2)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 0, types.UnCondEdge),
          (3, 2, types.TrueEdge),
          (3, 1, types.FalseEdge),
          (4, 0, types.UnCondEdge),
          (5, 4, types.TrueEdge),
          (5, 3, types.FalseEdge),
          (6, 0, types.UnCondEdge),
          (7, 6, types.TrueEdge),
          (7, 5, types.FalseEdge),
          (8, 0, types.UnCondEdge),
          (9, 8, types.TrueEdge),
          (9, 7, types.FalseEdge),
          (-1, 9, types.UnCondEdge),
        }, # bbEdges end
      ), # f:main() end. 

    "f:none":
      obj.Func(
        name = "f:none",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          1: [
            instr.ReturnI(expr.LitE(0, Loc(6,9)), Loc(6,2)),
          ],

          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (-1, 1, types.UnCondEdge),
        }, # bbEdges end
      ), # f:none() end. 

    "f:two":
      obj.Func(
        name = "f:two",
        paramNames = ["v:two:a", "v:two:b"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          5: [
            instr.AssignI(expr.VarE("v:two:t.2", Loc(21,6)), expr.BinaryE(expr.VarE("v:two:a", Loc(21,6)), op.BO_NE, expr.LitE(1, Loc(21,11))), Loc(21,6)),
            instr.CondI(expr.VarE("v:two:t.2", Loc(21,6)), Loc(21,2)),
          ],

          -1: [
            instr.NopI(),
          ],

          4: [
            instr.ReturnI(expr.LitE(1, Loc(22,10)), Loc(22,3)),
          ],

          0: [
            instr.NopI(),
          ],

          1: [
            instr.ReturnI(expr.LitE(0, Loc(26,9)), Loc(26,2)),
          ],

          2: [
            instr.ReturnI(expr.LitE(1, Loc(24,10)), Loc(24,3)),
          ],

          3: [
            instr.AssignI(expr.VarE("v:two:t.1", Loc(23,6)), expr.BinaryE(expr.VarE("v:two:b", Loc(23,6)), op.BO_NE, expr.LitE(2, Loc(23,11))), Loc(23,6)),
            instr.CondI(expr.VarE("v:two:t.1", Loc(23,6)), Loc(23,2)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 0, types.UnCondEdge),
          (3, 2, types.TrueEdge),
          (3, 1, types.FalseEdge),
          (4, 0, types.UnCondEdge),
          (5, 4, types.TrueEdge),
          (5, 3, types.FalseEdge),
          (-1, 5, types.UnCondEdge),
        }, # bbEdges end
      ), # f:two() end. 

    "f:one":
      obj.Func(
        name = "f:one",
        paramNames = ["v:one:a"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

          1: [
            instr.ReturnI(expr.LitE(0, Loc(15,9)), Loc(15,2)),
          ],

          2: [
            instr.ReturnI(expr.LitE(1, Loc(13,10)), Loc(13,3)),
          ],

          3: [
            instr.AssignI(expr.VarE("v:one:t.1", Loc(12,6)), expr.BinaryE(expr.VarE("v:one:a", Loc(12,6)), op.BO_NE, expr.LitE(1, Loc(12,11))), Loc(12,6)),
            instr.CondI(expr.VarE("v:one:t.1", Loc(12,6)), Loc(12,2)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 0, types.UnCondEdge),
          (3, 2, types.TrueEdge),
          (3, 1, types.FalseEdge),
          (-1, 3, types.UnCondEdge),
        }, # bbEdges end
      ), # f:one() end. 

    "f:three":
      obj.Func(
        name = "f:three",
        paramNames = ["v:three:a", "v:three:b", "v:three:c"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          7: [
            instr.AssignI(expr.VarE("v:three:t.3", Loc(32,6)), expr.BinaryE(expr.VarE("v:three:a", Loc(32,6)), op.BO_NE, expr.LitE(1, Loc(32,11))), Loc(32,6)),
            instr.CondI(expr.VarE("v:three:t.3", Loc(32,6)), Loc(32,2)),
          ],

          6: [
            instr.ReturnI(expr.LitE(1, Loc(33,10)), Loc(33,3)),
          ],

          5: [
            instr.AssignI(expr.VarE("v:three:t.2", Loc(34,6)), expr.BinaryE(expr.VarE("v:three:b", Loc(34,6)), op.BO_NE, expr.LitE(2, Loc(34,11))), Loc(34,6)),
            instr.CondI(expr.VarE("v:three:t.2", Loc(34,6)), Loc(34,2)),
          ],

          -1: [
            instr.NopI(),
          ],

          4: [
            instr.ReturnI(expr.LitE(1, Loc(35,10)), Loc(35,3)),
          ],

          0: [
            instr.NopI(),
          ],

          1: [
            instr.ReturnI(expr.LitE(0, Loc(39,9)), Loc(39,2)),
          ],

          2: [
            instr.ReturnI(expr.LitE(1, Loc(37,10)), Loc(37,3)),
          ],

          3: [
            instr.AssignI(expr.VarE("v:three:t.1", Loc(36,6)), expr.BinaryE(expr.VarE("v:three:c", Loc(36,6)), op.BO_NE, expr.LitE(3, Loc(36,11))), Loc(36,6)),
            instr.CondI(expr.VarE("v:three:t.1", Loc(36,6)), Loc(36,2)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 0, types.UnCondEdge),
          (3, 2, types.TrueEdge),
          (3, 1, types.FalseEdge),
          (4, 0, types.UnCondEdge),
          (5, 4, types.TrueEdge),
          (5, 3, types.FalseEdge),
          (6, 0, types.UnCondEdge),
          (7, 6, types.TrueEdge),
          (7, 5, types.FalseEdge),
          (-1, 7, types.UnCondEdge),
        }, # bbEdges end
      ), # f:three() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
