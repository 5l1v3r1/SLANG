
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "001850.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.6": types.Int32,
    "v:main:t.5": types.Int32,
    "v:main:Array": types.ConstSizeArray(of=types.Int32, size=10),
    "v:main:t.4": types.Int32,
    "v:main:Count": types.Int32,
    "v:main:t.2": types.Int32,
    "v:main:t.1": types.Int32,
    "v:main:t.3": types.Int32,
    "v:main:Array2": types.ConstSizeArray(of=types.Int32, size=10),
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.ArrayE(0, expr.VarE("v:main:Array", Loc(7,4)), Loc(7,4)), expr.LitE(12, Loc(7,22)), Loc(7,22)),
            instr.AssignI(expr.ArrayE(1, expr.VarE("v:main:Array", Loc(7,4)), Loc(7,4)), expr.LitE(34, Loc(7,26)), Loc(7,26)),
            instr.AssignI(expr.ArrayE(2, expr.VarE("v:main:Array", Loc(7,4)), Loc(7,4)), expr.LitE(56, Loc(7,30)), Loc(7,30)),
            instr.AssignI(expr.ArrayE(3, expr.VarE("v:main:Array", Loc(7,4)), Loc(7,4)), expr.LitE(78, Loc(7,34)), Loc(7,34)),
            instr.AssignI(expr.ArrayE(4, expr.VarE("v:main:Array", Loc(7,4)), Loc(7,4)), expr.LitE(90, Loc(7,38)), Loc(7,38)),
            instr.AssignI(expr.ArrayE(5, expr.VarE("v:main:Array", Loc(7,4)), Loc(7,4)), expr.LitE(123, Loc(7,42)), Loc(7,42)),
            instr.AssignI(expr.ArrayE(6, expr.VarE("v:main:Array", Loc(7,4)), Loc(7,4)), expr.LitE(456, Loc(7,47)), Loc(7,47)),
            instr.AssignI(expr.ArrayE(7, expr.VarE("v:main:Array", Loc(7,4)), Loc(7,4)), expr.LitE(789, Loc(7,52)), Loc(7,52)),
            instr.AssignI(expr.ArrayE(8, expr.VarE("v:main:Array", Loc(7,4)), Loc(7,4)), expr.LitE(8642, Loc(7,57)), Loc(7,57)),
            instr.AssignI(expr.ArrayE(9, expr.VarE("v:main:Array", Loc(7,4)), Loc(7,4)), expr.LitE(9753, Loc(7,63)), Loc(7,63)),
            instr.AssignI(expr.VarE("v:main:Count", Loc(9,9)), expr.LitE(0, Loc(9,17)), Loc(9,9)),
            instr.LabelI("ForCond1"),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(9,20)), expr.BinaryE(expr.VarE("v:main:Count", Loc(9,20)), op.BO_LT, expr.LitE(10, Loc(9,28)), Loc(9,20)), Loc(9,20)),
            instr.CondI(expr.VarE("v:main:t.1", Loc(9,20)), "ForBody1", "ForExit1", Loc(9,20)),
            instr.LabelI("ForBody1"),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(10,33)), expr.ArrayE(expr.VarE("v:main:Count", Loc(10,39)), expr.VarE("v:main:Array", Loc(10,33)), Loc(10,33)), Loc(10,33)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(10,7)), [expr.LitE("""%d: %d
""", Loc(10,14)), expr.VarE("v:main:Count", Loc(10,26)), expr.VarE("v:main:t.2", Loc(10,33))], Loc(10,7)), Loc(10,7)),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(9,32)), expr.VarE("v:main:Count", Loc(9,32)), Loc(9,32)),
            instr.AssignI(expr.VarE("v:main:Count", Loc(9,32)), expr.BinaryE(expr.VarE("v:main:Count", Loc(9,32)), op.BO_ADD, expr.LitE(1, Loc(9,32)), Loc(9,32)), Loc(9,32)),
            instr.GotoI("ForCond1"),
            instr.LabelI("ForExit1"),
            instr.AssignI(expr.ArrayE(0, expr.VarE("v:main:Array2", Loc(12,4)), Loc(12,4)), expr.LitE(12, Loc(12,23)), Loc(12,23)),
            instr.AssignI(expr.ArrayE(1, expr.VarE("v:main:Array2", Loc(12,4)), Loc(12,4)), expr.LitE(34, Loc(12,27)), Loc(12,27)),
            instr.AssignI(expr.ArrayE(2, expr.VarE("v:main:Array2", Loc(12,4)), Loc(12,4)), expr.LitE(56, Loc(12,31)), Loc(12,31)),
            instr.AssignI(expr.ArrayE(3, expr.VarE("v:main:Array2", Loc(12,4)), Loc(12,4)), expr.LitE(78, Loc(12,35)), Loc(12,35)),
            instr.AssignI(expr.ArrayE(4, expr.VarE("v:main:Array2", Loc(12,4)), Loc(12,4)), expr.LitE(90, Loc(12,39)), Loc(12,39)),
            instr.AssignI(expr.ArrayE(5, expr.VarE("v:main:Array2", Loc(12,4)), Loc(12,4)), expr.LitE(123, Loc(12,43)), Loc(12,43)),
            instr.AssignI(expr.ArrayE(6, expr.VarE("v:main:Array2", Loc(12,4)), Loc(12,4)), expr.LitE(456, Loc(12,48)), Loc(12,48)),
            instr.AssignI(expr.ArrayE(7, expr.VarE("v:main:Array2", Loc(12,4)), Loc(12,4)), expr.LitE(789, Loc(12,53)), Loc(12,53)),
            instr.AssignI(expr.ArrayE(8, expr.VarE("v:main:Array2", Loc(12,4)), Loc(12,4)), expr.LitE(8642, Loc(12,58)), Loc(12,58)),
            instr.AssignI(expr.ArrayE(9, expr.VarE("v:main:Array2", Loc(12,4)), Loc(12,4)), expr.LitE(9753, Loc(12,64)), Loc(12,64)),
            instr.AssignI(expr.VarE("v:main:Count", Loc(14,9)), expr.LitE(0, Loc(14,17)), Loc(14,9)),
            instr.LabelI("ForCond2"),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(14,20)), expr.BinaryE(expr.VarE("v:main:Count", Loc(14,20)), op.BO_LT, expr.LitE(10, Loc(14,28)), Loc(14,20)), Loc(14,20)),
            instr.CondI(expr.VarE("v:main:t.4", Loc(14,20)), "ForBody2", "ForExit2", Loc(14,20)),
            instr.LabelI("ForBody2"),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(15,33)), expr.ArrayE(expr.VarE("v:main:Count", Loc(15,40)), expr.VarE("v:main:Array2", Loc(15,33)), Loc(15,33)), Loc(15,33)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(15,7)), [expr.LitE("""%d: %d
""", Loc(15,14)), expr.VarE("v:main:Count", Loc(15,26)), expr.VarE("v:main:t.5", Loc(15,33))], Loc(15,7)), Loc(15,7)),
            instr.AssignI(expr.VarE("v:main:t.6", Loc(14,32)), expr.VarE("v:main:Count", Loc(14,32)), Loc(14,32)),
            instr.AssignI(expr.VarE("v:main:Count", Loc(14,32)), expr.BinaryE(expr.VarE("v:main:Count", Loc(14,32)), op.BO_ADD, expr.LitE(1, Loc(14,32)), Loc(14,32)), Loc(14,32)),
            instr.GotoI("ForCond2"),
            instr.LabelI("ForExit2"),
            instr.ReturnI(expr.LitE(0, Loc(18,11))),
        ], # instrSeq end.
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
