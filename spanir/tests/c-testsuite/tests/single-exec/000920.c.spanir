
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "000920.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.10": types.ConstSizeArray(of=types.Int32, dim=4),
    "v:main:t.9": types.Int32,
    "v:main:t.8": types.Int32,
    "v:main:t.6": types.Int32,
    "v:main:t.1": types.Int32,
    "v:main:t.7": types.Int32,
    "v:a": types.ConstSizeArray(of=types.Int32, dim=4),
    "v:main:t.4": types.Int32,
    "v:main:t.2": types.Int32,
    "v:main:t.3": types.Int32,
    "v:main:t.5": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          11: [
            instr.AssignI(expr.VarE("v:main:t.9", Loc(6,19)), expr.BinaryE(expr.LitE(4, Loc(6,19)), op.BO_MUL, expr.LitE(4, Loc(6,21))), Loc(6,19)),
            instr.AssignI(expr.VarE("v:main:t.10", Loc(6,6)), expr.BinaryE(expr.LitE(16, Loc(6,6)), op.BO_NE, expr.VarE("v:main:t.9", Loc(6,19))), Loc(6,6)),
            instr.CondI(expr.VarE("v:main:t.10", Loc(6,6)), Loc(6,2)),
          ],

          10: [
            instr.ReturnI(expr.LitE(1, Loc(7,10)), Loc(7,3)),
          ],

          9: [
            instr.AssignI(expr.VarE("v:main:t.7", Loc(9,6)), expr.ArrayE(expr.VarE("v:a", Loc(9,6)), [expr.LitE(0, Loc(9,8))], Loc(9,6)), Loc(9,6)),
            instr.AssignI(expr.VarE("v:main:t.8", Loc(9,6)), expr.BinaryE(expr.VarE("v:main:t.7", Loc(9,6)), op.BO_NE, expr.LitE(5, Loc(9,14))), Loc(9,6)),
            instr.CondI(expr.VarE("v:main:t.8", Loc(9,6)), Loc(9,2)),
          ],

          8: [
            instr.ReturnI(expr.LitE(2, Loc(10,10)), Loc(10,3)),
          ],

          7: [
            instr.AssignI(expr.VarE("v:main:t.5", Loc(11,6)), expr.ArrayE(expr.VarE("v:a", Loc(11,6)), [expr.LitE(1, Loc(11,8))], Loc(11,6)), Loc(11,6)),
            instr.AssignI(expr.VarE("v:main:t.6", Loc(11,6)), expr.BinaryE(expr.VarE("v:main:t.5", Loc(11,6)), op.BO_NE, expr.LitE(0, Loc(11,14))), Loc(11,6)),
            instr.CondI(expr.VarE("v:main:t.6", Loc(11,6)), Loc(11,2)),
          ],

          6: [
            instr.ReturnI(expr.LitE(3, Loc(12,10)), Loc(12,3)),
          ],

          1: [
            instr.ReturnI(expr.LitE(0, Loc(18,9)), Loc(18,2)),
          ],

          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

          2: [
            instr.ReturnI(expr.LitE(5, Loc(16,10)), Loc(16,3)),
          ],

          3: [
            instr.AssignI(expr.VarE("v:main:t.1", Loc(15,6)), expr.ArrayE(expr.VarE("v:a", Loc(15,6)), [expr.LitE(3, Loc(15,8))], Loc(15,6)), Loc(15,6)),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(15,6)), expr.BinaryE(expr.VarE("v:main:t.1", Loc(15,6)), op.BO_NE, expr.LitE(3, Loc(15,14))), Loc(15,6)),
            instr.CondI(expr.VarE("v:main:t.2", Loc(15,6)), Loc(15,2)),
          ],

          4: [
            instr.ReturnI(expr.LitE(4, Loc(14,10)), Loc(14,3)),
          ],

          5: [
            instr.AssignI(expr.VarE("v:main:t.3", Loc(13,6)), expr.ArrayE(expr.VarE("v:a", Loc(13,6)), [expr.LitE(2, Loc(13,8))], Loc(13,6)), Loc(13,6)),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(13,6)), expr.BinaryE(expr.VarE("v:main:t.3", Loc(13,6)), op.BO_NE, expr.LitE(2, Loc(13,14))), Loc(13,6)),
            instr.CondI(expr.VarE("v:main:t.4", Loc(13,6)), Loc(13,2)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 0, types.UnCondEdge),
          (3, 2, types.TrueEdge),
          (3, 1, types.FalseEdge),
          (4, 0, types.UnCondEdge),
          (5, 4, types.TrueEdge),
          (5, 3, types.FalseEdge),
          (6, 0, types.UnCondEdge),
          (7, 6, types.TrueEdge),
          (7, 5, types.FalseEdge),
          (8, 0, types.UnCondEdge),
          (9, 8, types.TrueEdge),
          (9, 7, types.FalseEdge),
          (10, 0, types.UnCondEdge),
          (11, 0, types.TrueEdge),
          (11, 9, types.FalseEdge),
          (-1, 11, types.UnCondEdge),
        }, # bbEdges end
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
