
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "001590.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.2": types.Int32,
    "v:vfunc:a": types.Int32,
    "v:myfunc:x": types.Int32,
    "v:main:t.1": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:main:t.1", Loc(25,19)), expr.CallE(expr.FuncE("f:myfunc", Loc(25,19)), [expr.LitE(3, Loc(25,26))], Loc(25,19)), Loc(25,19)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(25,4)), [expr.LitE("""%d
""", Loc(25,11)), expr.VarE("v:main:t.1", Loc(25,19))], Loc(25,4)), Loc(25,4)),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(26,19)), expr.CallE(expr.FuncE("f:myfunc", Loc(26,19)), [expr.LitE(4, Loc(26,26))], Loc(26,19)), Loc(26,19)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(26,4)), [expr.LitE("""%d
""", Loc(26,11)), expr.VarE("v:main:t.2", Loc(26,19))], Loc(26,4)), Loc(26,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:vfunc", Loc(28,4)), [expr.LitE(1234, Loc(28,10))], Loc(28,4)), Loc(28,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:qfunc", Loc(30,4)), Loc(30,4)), Loc(30,4)),
            instr.ReturnI(expr.LitE(0, Loc(32,11))),
        ], # instrSeq end.
      ), # f:main() end. 

    "f:zfunc":
      obj.Func(
        name = "f:zfunc",
        paramNames = [],
        variadic = False,
        returnType = types.Void,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:zfunc:t.1", ), expr.CastE(expr.LitE(0, Loc(20,21)), types.Ptr(to=types.FuncSig(returnType=types.Void, paramTypes=[])), Loc(20,5)), ),
            instr.CallI(expr.CallE(expr.VarE("v:zfunc:t.1", ), Loc(20,4)), Loc(20,4)),
        ], # instrSeq end.
      ), # f:zfunc() end. 

    "f:qfunc":
      obj.Func(
        name = "f:qfunc",
        paramNames = [],
        variadic = False,
        returnType = types.Void,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(15,4)), [expr.LitE("""qfunc()
""", Loc(15,11))], Loc(15,4)), Loc(15,4)),
        ], # instrSeq end.
      ), # f:qfunc() end. 

    "f:myfunc":
      obj.Func(
        name = "f:myfunc",
        paramNames = ["v:myfunc:x"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:myfunc:t.1", Loc(5,11)), expr.BinaryE(expr.VarE("v:myfunc:x", Loc(5,11)), op.BO_MUL, expr.VarE("v:myfunc:x", Loc(5,15)), Loc(5,11)), Loc(5,11)),
            instr.ReturnI(expr.VarE("v:myfunc:t.1", Loc(5,11))),
        ], # instrSeq end.
      ), # f:myfunc() end. 

    "f:vfunc":
      obj.Func(
        name = "f:vfunc",
        paramNames = ["v:vfunc:a"],
        variadic = False,
        returnType = types.Void,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(10,4)), [expr.LitE("""a=%d
""", Loc(10,11)), expr.VarE("v:vfunc:a", Loc(10,21))], Loc(10,4)), Loc(10,4)),
        ], # instrSeq end.
      ), # f:vfunc() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
