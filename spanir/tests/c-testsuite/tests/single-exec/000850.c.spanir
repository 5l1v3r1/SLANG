
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "000850.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          19: [
            instr.CondI(expr.LitE(0, Loc(10,6)), Loc(10,2)),
          ],

          18: [
            instr.ReturnI(expr.LitE(1, Loc(11,10)), Loc(11,3)),
          ],

          17: [
            instr.CondI(expr.LitE(0, Loc(12,6)), Loc(12,2)),
          ],

          16: [
            instr.ReturnI(expr.LitE(1, Loc(13,10)), Loc(13,3)),
          ],

          5: [
            instr.CondI(expr.LitE(0, Loc(24,6)), Loc(24,2)),
          ],

          4: [
            instr.ReturnI(expr.LitE(1, Loc(25,10)), Loc(25,3)),
          ],

          3: [
            instr.CondI(expr.LitE(0, Loc(26,6)), Loc(26,2)),
          ],

          2: [
            instr.ReturnI(expr.LitE(1, Loc(27,10)), Loc(27,3)),
          ],

          0: [
            instr.NopI(),
          ],

          1: [
            instr.ReturnI(expr.LitE(0, Loc(29,9)), Loc(29,2)),
          ],

          6: [
            instr.ReturnI(expr.LitE(1, Loc(23,10)), Loc(23,3)),
          ],

          7: [
            instr.CondI(expr.LitE(0, Loc(22,6)), Loc(22,2)),
          ],

          8: [
            instr.ReturnI(expr.LitE(1, Loc(21,10)), Loc(21,3)),
          ],

          9: [
            instr.CondI(expr.LitE(0, Loc(20,6)), Loc(20,2)),
          ],

          10: [
            instr.ReturnI(expr.LitE(1, Loc(19,10)), Loc(19,3)),
          ],

          -1: [
            instr.NopI(),
          ],

          11: [
            instr.CondI(expr.LitE(0, Loc(18,6)), Loc(18,2)),
          ],

          12: [
            instr.ReturnI(expr.LitE(1, Loc(17,10)), Loc(17,3)),
          ],

          13: [
            instr.CondI(expr.LitE(0, Loc(16,6)), Loc(16,2)),
          ],

          14: [
            instr.ReturnI(expr.LitE(1, Loc(15,10)), Loc(15,3)),
          ],

          15: [
            instr.CondI(expr.LitE(0, Loc(14,6)), Loc(14,2)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 0, types.UnCondEdge),
          (3, 0, types.TrueEdge),
          (3, 1, types.FalseEdge),
          (4, 0, types.UnCondEdge),
          (5, 0, types.TrueEdge),
          (5, 3, types.FalseEdge),
          (6, 0, types.UnCondEdge),
          (7, 0, types.TrueEdge),
          (7, 5, types.FalseEdge),
          (8, 0, types.UnCondEdge),
          (9, 0, types.TrueEdge),
          (9, 7, types.FalseEdge),
          (10, 0, types.UnCondEdge),
          (11, 0, types.TrueEdge),
          (11, 9, types.FalseEdge),
          (12, 0, types.UnCondEdge),
          (13, 0, types.TrueEdge),
          (13, 11, types.FalseEdge),
          (14, 0, types.UnCondEdge),
          (15, 0, types.TrueEdge),
          (15, 13, types.FalseEdge),
          (16, 0, types.UnCondEdge),
          (17, 0, types.TrueEdge),
          (17, 15, types.FalseEdge),
          (18, 0, types.UnCondEdge),
          (19, 0, types.TrueEdge),
          (19, 17, types.FalseEdge),
          (-1, 19, types.UnCondEdge),
        }, # bbEdges end
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
