
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "002120.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.6": types.Int32,
    "v:main:t.5": types.Int32,
    "v:main:t.4": types.Int32,
    "v:main:t.3": types.Int32,
    "v:main:t.1": types.Int32,
    "v:main:t.2": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:main:t.1", Loc(17,6)), expr.LitE(1, Loc(17,6)), Loc(17,6)),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(17,6)), expr.LitE(1, Loc(17,6)), Loc(17,6)),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(17,6)), expr.LitE(1, Loc(17,6)), Loc(17,6)),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(17,6)), expr.LitE(1, Loc(17,6)), Loc(17,6)),
            instr.CondI(expr.BinaryE(, op.BO_EQ, expr.LitE(2, Loc(17,23)), Loc(17,6)), "NextCheckLand5", "TmpAssignLand5", Loc(17,6)),
            instr.LabelI("NextCheckLand5"),
            instr.CondI(expr.BinaryE(, op.BO_EQ, expr.LitE(4, Loc(18,24)), Loc(18,9)), "ExitLand5", "TmpAssignLand5", Loc(17,6)),
            instr.LabelI("TmpAssignLand5"),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(17,6)), expr.LitE(0, Loc(17,6)), Loc(17,6)),
            instr.LabelI("ExitLand5"),
            instr.CondI(expr.VarE("v:main:t.4", Loc(17,6)), "NextCheckLand4", "TmpAssignLand4", Loc(17,6)),
            instr.LabelI("NextCheckLand4"),
            instr.CondI(expr.BinaryE(, op.BO_EQ, expr.LitE(8, Loc(19,29)), Loc(19,9)), "ExitLand4", "TmpAssignLand4", Loc(17,6)),
            instr.LabelI("TmpAssignLand4"),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(17,6)), expr.LitE(0, Loc(17,6)), Loc(17,6)),
            instr.LabelI("ExitLand4"),
            instr.CondI(expr.VarE("v:main:t.3", Loc(17,6)), "NextCheckLand3", "TmpAssignLand3", Loc(17,6)),
            instr.LabelI("NextCheckLand3"),
            instr.CondI(expr.BinaryE(, op.BO_EQ, expr.LitE(8, Loc(20,34)), Loc(20,9)), "ExitLand3", "TmpAssignLand3", Loc(17,6)),
            instr.LabelI("TmpAssignLand3"),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(17,6)), expr.LitE(0, Loc(17,6)), Loc(17,6)),
            instr.LabelI("ExitLand3"),
            instr.CondI(expr.VarE("v:main:t.2", Loc(17,6)), "NextCheckLand2", "TmpAssignLand2", Loc(17,6)),
            instr.LabelI("NextCheckLand2"),
            instr.CondI(expr.BinaryE(, op.BO_EQ, expr.LitE(8, Loc(21,26)), Loc(21,9)), "ExitLand2", "TmpAssignLand2", Loc(17,6)),
            instr.LabelI("TmpAssignLand2"),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(17,6)), expr.LitE(0, Loc(17,6)), Loc(17,6)),
            instr.LabelI("ExitLand2"),
            instr.CondI(expr.VarE("v:main:t.1", Loc(17,6)), "IfTrue1", "IfFalse1", Loc(17,6)),
            instr.LabelI("IfTrue1"),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(22,9)), expr.CallE(expr.FuncE("f:printf", Loc(22,9)), [expr.LitE("""Ok
""", Loc(22,16))], Loc(22,9)), Loc(22,9)),
            instr.GotoI("IfExit1"),
            instr.LabelI("IfFalse1"),
            instr.AssignI(expr.VarE("v:main:t.6", Loc(24,9)), expr.CallE(expr.FuncE("f:printf", Loc(24,9)), [expr.LitE("""KO __LP64__
""", Loc(24,16))], Loc(24,9)), Loc(24,9)),
            instr.LabelI("IfExit1"),
        ], # instrSeq end.
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
