
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "001940.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:printf:__format": types.Ptr(to=types.Int8),
    "v:main:t.1": types.Int8,
    "v:main:t.2": types.Int8,
    "v:main:t.4": types.Int32,
    "v:main:b": types.Int8,
    "v:main:a": types.Int32,
    "v:main:t.3": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:printf":
      obj.Func(
        name = "f:printf",
        paramNames = ["v:printf:__format"],
        variadic = True,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
        }, # basicBlocks end.

        bbEdges= {
        }, # bbEdges end
      ), # f:printf() end. 

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          10: [
            instr.AssignI(expr.VarE("v:main:a", Loc(8,4)), expr.LitE(0, Loc(8,8)), Loc(8,4)),
          ],

          9: [
            instr.AssignI(expr.VarE("v:main:t.4", Loc(9,11)), expr.BinaryE(expr.VarE("v:main:a", Loc(9,11)), op.BO_LT, expr.LitE(2, Loc(9,15))), Loc(9,11)),
            instr.CondI(expr.VarE("v:main:t.4", Loc(9,11)), Loc(9,4)),
          ],

          8: [
            instr.AssignI(expr.VarE("v:main:t.3", Loc(11,20)), expr.VarE("v:main:a", Loc(11,20)), Loc(11,20)),
            instr.AssignI(expr.VarE("v:main:a", Loc(11,20)), expr.BinaryE(expr.VarE("v:main:a", Loc(11,20)), op.BO_ADD, expr.LitE(1, Loc(11,20)), Loc(11,20)), Loc(11,20)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(11,7)), [expr.LitE("""%d""", Loc(11,14)), expr.VarE("v:main:t.3", Loc(11,20))], Loc(11,7))),
          ],

          7: [
            instr.AssignI(expr.VarE("v:main:b", Loc(14,7)), ERROR:convertExpr, Loc(14,7)),
          ],

          6: [
            instr.AssignI(expr.VarE("v:main:t.2", Loc(15,14)), expr.BinaryE(expr.VarE("v:main:b", Loc(15,14)), op.BO_LT, ERROR:convertExpr), Loc(15,14)),
            instr.CondI(expr.VarE("v:main:t.2", Loc(15,14)), Loc(15,7)),
          ],

          1: [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(21,4)), [expr.LitE("""
""", Loc(21,11))], Loc(21,4))),
            instr.ReturnI(expr.LitE(0, Loc(23,11)), Loc(23,4)),
          ],

          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

          2: [
            instr.NopI(),
          ],

          3: [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(19,7)), [expr.LitE("""e""", Loc(19,14))], Loc(19,7))),
          ],

          4: [
            instr.NopI(),
          ],

          5: [
            instr.AssignI(expr.VarE("v:main:t.1", Loc(17,23)), expr.VarE("v:main:b", Loc(17,23)), Loc(17,23)),
            instr.AssignI(expr.VarE("v:main:b", Loc(17,23)), expr.BinaryE(expr.VarE("v:main:b", Loc(17,23)), op.BO_ADD, expr.LitE(1, Loc(17,23)), Loc(17,23)), Loc(17,23)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(17,10)), [expr.LitE("""%c""", Loc(17,17)), expr.VarE("v:main:t.1", Loc(17,23))], Loc(17,10))),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 9, types.UnCondEdge),
          (3, 2, types.UnCondEdge),
          (4, 6, types.UnCondEdge),
          (5, 4, types.UnCondEdge),
          (6, 5, types.TrueEdge),
          (6, 3, types.FalseEdge),
          (7, 6, types.UnCondEdge),
          (8, 1, types.UnCondEdge),
          (9, 8, types.TrueEdge),
          (9, 1, types.FalseEdge),
          (10, 9, types.UnCondEdge),
          (-1, 10, types.UnCondEdge),
        }, # bbEdges end
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
