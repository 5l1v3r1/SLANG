
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "000370.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.5": types.Ptr(to=types.Int32),
    "v:main:p": types.Ptr(to=types.Int32),
    "v:main:t.1": types.Int32,
    "v:main:t.6": types.Ptr(to=types.Int32),
    "v:main:x": types.ConstSizeArray(of=types.Int32, size=2),
    "v:main:t.2": types.Int32,
    "v:main:t.3": types.Ptr(to=types.Int32),
    "v:main:t.4": types.Ptr(to=types.Int32),
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.ArrayE(expr.LitE(1, Loc(7,4)), expr.VarE("v:main:x", Loc(7,2)), Loc(7,2)), expr.LitE(7, Loc(7,9)), Loc(7,2)),
            instr.AssignI(expr.VarE("v:main:p", Loc(8,2)), expr.UnaryE(op.UO_ADDROF, expr.ArrayE(expr.LitE(0, Loc(8,9)), expr.VarE("v:main:x", Loc(8,7)), Loc(8,7)), Loc(8,6)), Loc(8,2)),
            instr.AssignI(expr.VarE("v:main:p", Loc(9,2)), expr.BinaryE(expr.VarE("v:main:p", Loc(9,6)), op.BO_ADD, expr.LitE(1, Loc(9,10)), Loc(9,6)), Loc(9,2)),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(11,5)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:p", Loc(11,6)), Loc(11,5)), Loc(11,5)),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(11,5)), expr.BinaryE(expr.VarE("v:main:t.1", Loc(11,5)), op.BO_NE, expr.LitE(7, Loc(11,11)), Loc(11,5)), Loc(11,5)),
            instr.CondI(expr.VarE("v:main:t.2", Loc(11,5)), "IfTrue1", "IfFalse1", Loc(11,5)),
            instr.LabelI("IfTrue1"),
            instr.ReturnI(expr.LitE(1, Loc(12,10))),
            instr.GotoI("IfExit1"),
            instr.LabelI("IfFalse1"),
            instr.LabelI("IfExit1"),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(13,5)), expr.UnaryE(op.UO_ADDROF, expr.ArrayE(expr.LitE(1, Loc(13,8)), expr.VarE("v:main:x", Loc(13,6)), Loc(13,6)), Loc(13,5)), Loc(13,5)),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(13,13)), expr.UnaryE(op.UO_ADDROF, expr.ArrayE(expr.LitE(0, Loc(13,16)), expr.VarE("v:main:x", Loc(13,14)), Loc(13,14)), Loc(13,13)), Loc(13,13)),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(13,5)), expr.BinaryE(expr.VarE("v:main:t.3", Loc(13,5)), op.BO_SUB, expr.VarE("v:main:t.4", Loc(13,13)), Loc(13,5)), Loc(13,5)),
            instr.AssignI(expr.VarE("v:main:t.6", Loc(13,5)), expr.BinaryE(expr.VarE("v:main:t.5", Loc(13,5)), op.BO_NE, expr.LitE(1, Loc(13,22)), Loc(13,5)), Loc(13,5)),
            instr.CondI(expr.VarE("v:main:t.6", Loc(13,5)), "IfTrue2", "IfFalse2", Loc(13,5)),
            instr.LabelI("IfTrue2"),
            instr.ReturnI(expr.LitE(1, Loc(14,10))),
            instr.GotoI("IfExit2"),
            instr.LabelI("IfFalse2"),
            instr.LabelI("IfExit2"),
            instr.ReturnI(expr.LitE(0, Loc(16,9))),
        ], # instrSeq end.
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
