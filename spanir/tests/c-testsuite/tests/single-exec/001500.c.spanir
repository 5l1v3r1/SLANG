
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "001500.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.14": types.Int32,
    "v:main:t.13": types.Int32,
    "v:main:t.12": types.Int32,
    "v:main:t.11": types.Int32,
    "v:main:t.10": types.Int32,
    "v:main:t.9": types.Int32,
    "v:main:t.8": types.Ptr(to=types.Struct("s:S1")),
    "v:main:t.7": types.Int32,
    "v:main:t.6": types.Int32,
    "v:main:t.1": types.Int32,
    "": ,
    "v:main:t.4": types.Int32,
    "v:main:t.2": types.Int32,
    "v:main:t.3": types.Int32,
    "v:main:t.5": types.Ptr(to=types.Struct("s:S1")),
  }, # end allVars dict

  allObjs = {
    "s:S1":
      types.Struct(
        name = "s:S1",
        fields = [
          ("a", types.Int32),
          ("b", types.Int32),
        ],
        loc = Loc(1,1),
      ),


    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:main:t.1", Loc(20,5)), expr.MemberE("a", expr.MemberE("s1", expr.VarE("", Loc(20,5)), Loc(20,5)), Loc(20,5)), Loc(20,5)),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(20,5)), expr.BinaryE(expr.VarE("v:main:t.1", Loc(20,5)), op.BO_NE, expr.LitE(1, Loc(20,16)), Loc(20,5)), Loc(20,5)),
            instr.CondI(expr.VarE("v:main:t.2", Loc(20,5)), "IfTrue1", "IfFalse1", Loc(20,5)),
            instr.LabelI("IfTrue1"),
            instr.ReturnI(expr.LitE(1, Loc(21,10))),
            instr.GotoI("IfExit1"),
            instr.LabelI("IfFalse1"),
            instr.LabelI("IfExit1"),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(22,5)), expr.MemberE("b", expr.MemberE("s1", expr.VarE("", Loc(22,5)), Loc(22,5)), Loc(22,5)), Loc(22,5)),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(22,5)), expr.BinaryE(expr.VarE("v:main:t.3", Loc(22,5)), op.BO_NE, expr.LitE(2, Loc(22,16)), Loc(22,5)), Loc(22,5)),
            instr.CondI(expr.VarE("v:main:t.4", Loc(22,5)), "IfTrue2", "IfFalse2", Loc(22,5)),
            instr.LabelI("IfTrue2"),
            instr.ReturnI(expr.LitE(2, Loc(23,10))),
            instr.GotoI("IfExit2"),
            instr.LabelI("IfFalse2"),
            instr.LabelI("IfExit2"),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(24,5)), expr.MemberE("ps1", expr.VarE("", Loc(24,5)), Loc(24,5)), Loc(24,5)),
            instr.AssignI(expr.VarE("v:main:t.6", Loc(24,5)), expr.MemberE("a", expr.VarE("v:main:t.5", Loc(24,5)), Loc(24,5)), Loc(24,5)),
            instr.AssignI(expr.VarE("v:main:t.7", Loc(24,5)), expr.BinaryE(expr.VarE("v:main:t.6", Loc(24,5)), op.BO_NE, expr.LitE(1, Loc(24,18)), Loc(24,5)), Loc(24,5)),
            instr.CondI(expr.VarE("v:main:t.7", Loc(24,5)), "IfTrue3", "IfFalse3", Loc(24,5)),
            instr.LabelI("IfTrue3"),
            instr.ReturnI(expr.LitE(3, Loc(25,10))),
            instr.GotoI("IfExit3"),
            instr.LabelI("IfFalse3"),
            instr.LabelI("IfExit3"),
            instr.AssignI(expr.VarE("v:main:t.8", Loc(26,5)), expr.MemberE("ps1", expr.VarE("", Loc(26,5)), Loc(26,5)), Loc(26,5)),
            instr.AssignI(expr.VarE("v:main:t.9", Loc(26,5)), expr.MemberE("b", expr.VarE("v:main:t.8", Loc(26,5)), Loc(26,5)), Loc(26,5)),
            instr.AssignI(expr.VarE("v:main:t.10", Loc(26,5)), expr.BinaryE(expr.VarE("v:main:t.9", Loc(26,5)), op.BO_NE, expr.LitE(2, Loc(26,18)), Loc(26,5)), Loc(26,5)),
            instr.CondI(expr.VarE("v:main:t.10", Loc(26,5)), "IfTrue4", "IfFalse4", Loc(26,5)),
            instr.LabelI("IfTrue4"),
            instr.ReturnI(expr.LitE(4, Loc(27,10))),
            instr.GotoI("IfExit4"),
            instr.LabelI("IfFalse4"),
            instr.LabelI("IfExit4"),
            instr.AssignI(expr.VarE("v:main:t.11", Loc(28,5)), expr.ArrayE(expr.LitE(0, Loc(28,12)), expr.MemberE("arr", expr.VarE("", Loc(28,5)), Loc(28,5)), Loc(28,5)), Loc(28,5)),
            instr.AssignI(expr.VarE("v:main:t.12", Loc(28,5)), expr.BinaryE(expr.VarE("v:main:t.11", Loc(28,5)), op.BO_NE, expr.LitE(1, Loc(28,18)), Loc(28,5)), Loc(28,5)),
            instr.CondI(expr.VarE("v:main:t.12", Loc(28,5)), "IfTrue5", "IfFalse5", Loc(28,5)),
            instr.LabelI("IfTrue5"),
            instr.ReturnI(expr.LitE(5, Loc(29,10))),
            instr.GotoI("IfExit5"),
            instr.LabelI("IfFalse5"),
            instr.LabelI("IfExit5"),
            instr.AssignI(expr.VarE("v:main:t.13", Loc(30,5)), expr.ArrayE(expr.LitE(1, Loc(30,12)), expr.MemberE("arr", expr.VarE("", Loc(30,5)), Loc(30,5)), Loc(30,5)), Loc(30,5)),
            instr.AssignI(expr.VarE("v:main:t.14", Loc(30,5)), expr.BinaryE(expr.VarE("v:main:t.13", Loc(30,5)), op.BO_NE, expr.LitE(2, Loc(30,18)), Loc(30,5)), Loc(30,5)),
            instr.CondI(expr.VarE("v:main:t.14", Loc(30,5)), "IfTrue6", "IfFalse6", Loc(30,5)),
            instr.LabelI("IfTrue6"),
            instr.ReturnI(expr.LitE(6, Loc(31,10))),
            instr.GotoI("IfExit6"),
            instr.LabelI("IfFalse6"),
            instr.LabelI("IfExit6"),
            instr.ReturnI(expr.LitE(0, Loc(32,9))),
        ], # instrSeq end.
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
