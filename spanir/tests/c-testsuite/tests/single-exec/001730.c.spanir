
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "001730.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.10": types.Int8,
    "v:main:t.9": types.Ptr(to=types.Int8),
    "v:main:t.1": types.Int8,
    "v:main:t.5": types.Ptr(to=types.Int8),
    "v:main:src": types.Ptr(to=types.Int8),
    "v:main:x": types.Int32,
    "v:main:y": types.Int8,
    "v:main:c": types.Int32,
    "v:main:dest": types.Ptr(to=types.Int8),
    "v:main:b": types.Ptr(to=types.Int8),
    "v:main:t.2": types.Int8,
    "v:main:t.3": types.Int8,
    "v:main:t.4": types.Int8,
    "v:main:destarray": types.ConstSizeArray(of=types.Int8, size=10),
    "v:main:t.8": types.Ptr(to=types.Int8),
    "v:main:t.6": types.Int8,
    "v:main:a": types.Ptr(to=types.Int8),
    "v:main:t.7": types.Int8,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:main:x", Loc(5,4)), , Loc(5,4)),
            instr.AssignI(expr.VarE("v:main:y", Loc(6,4)), expr.VarE("v:main:x", Loc(6,13)), Loc(6,4)),
            instr.AssignI(expr.VarE("v:main:a", Loc(8,4)), expr.LitE("""hello""", Loc(8,14)), Loc(8,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(10,4)), [expr.LitE("""%s
""", Loc(10,11)), expr.VarE("v:main:a", Loc(10,19))], Loc(10,4)), Loc(10,4)),
            instr.AssignI(expr.VarE("v:main:c", Loc(13,4)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:a", Loc(13,9)), Loc(13,8)), Loc(13,4)),
            instr.AssignI(expr.VarE("v:main:b", Loc(16,9)), expr.VarE("v:main:a", Loc(16,13)), Loc(16,9)),
            instr.LabelI("ForCond1"),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(16,16)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:b", Loc(16,17)), Loc(16,16)), Loc(16,16)),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(16,16)), expr.BinaryE(expr.VarE("v:main:t.1", Loc(16,16)), op.BO_NE, expr.LitE(0, Loc(16,22)), Loc(16,16)), Loc(16,16)),
            instr.CondI(expr.VarE("v:main:t.2", Loc(16,16)), "ForBody1", "ForExit1", Loc(16,16)),
            instr.LabelI("ForBody1"),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(17,26)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:b", Loc(17,27)), Loc(17,26)), Loc(17,26)),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(17,30)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:b", Loc(17,31)), Loc(17,30)), Loc(17,30)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(17,7)), [expr.LitE("""%c: %d
""", Loc(17,14)), expr.VarE("v:main:t.3", Loc(17,26)), expr.VarE("v:main:t.4", Loc(17,30))], Loc(17,7)), Loc(17,7)),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(16,25)), expr.VarE("v:main:b", Loc(16,25)), Loc(16,25)),
            instr.AssignI(expr.VarE("v:main:b", Loc(16,25)), expr.BinaryE(expr.VarE("v:main:b", Loc(16,25)), op.BO_ADD, expr.LitE(1, Loc(16,25)), Loc(16,25)), Loc(16,25)),
            instr.GotoI("ForCond1"),
            instr.LabelI("ForExit1"),
            instr.AssignI(expr.VarE("v:main:dest", Loc(20,4)), expr.UnaryE(op.UO_ADDROF, expr.ArrayE(expr.LitE(0, Loc(20,28)), expr.VarE("v:main:destarray", Loc(20,18)), Loc(20,18)), Loc(20,17)), Loc(20,4)),
            instr.AssignI(expr.VarE("v:main:src", Loc(21,4)), expr.VarE("v:main:a", Loc(21,16)), Loc(21,4)),
            instr.LabelI("WhileCond2"),
            instr.AssignI(expr.VarE("v:main:t.6", Loc(23,11)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:src", Loc(23,12)), Loc(23,11)), Loc(23,11)),
            instr.AssignI(expr.VarE("v:main:t.7", Loc(23,11)), expr.BinaryE(expr.VarE("v:main:t.6", Loc(23,11)), op.BO_NE, expr.LitE(0, Loc(23,19)), Loc(23,11)), Loc(23,11)),
            instr.CondI(expr.VarE("v:main:t.7", Loc(23,11)), "WhileBody2", "WhileExit2", Loc(23,11)),
            instr.LabelI("WhileBody2"),
            instr.AssignI(expr.VarE("v:main:t.8", Loc(24,18)), expr.VarE("v:main:src", Loc(24,18)), Loc(24,18)),
            instr.AssignI(expr.VarE("v:main:src", Loc(24,18)), expr.BinaryE(expr.VarE("v:main:src", Loc(24,18)), op.BO_ADD, expr.LitE(1, Loc(24,18)), Loc(24,18)), Loc(24,18)),
            instr.AssignI(expr.VarE("v:main:t.9", Loc(24,8)), expr.VarE("v:main:dest", Loc(24,8)), Loc(24,8)),
            instr.AssignI(expr.VarE("v:main:dest", Loc(24,8)), expr.BinaryE(expr.VarE("v:main:dest", Loc(24,8)), op.BO_ADD, expr.LitE(1, Loc(24,8)), Loc(24,8)), Loc(24,8)),
            instr.AssignI(expr.VarE("v:main:t.10", Loc(24,17)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.8", Loc(24,18)), Loc(24,17)), Loc(24,17)),
            instr.AssignI(expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.9", Loc(24,8)), Loc(24,7)), expr.VarE("v:main:t.10", Loc(24,17)), Loc(24,7)),
            instr.GotoI("WhileCond2"),
            instr.LabelI("WhileExit2"),
            instr.AssignI(expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:dest", Loc(26,5)), Loc(26,4)), expr.LitE(0, Loc(26,12)), Loc(26,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(28,4)), [expr.LitE("""copied string is %s
""", Loc(28,11)), expr.VarE("v:main:destarray", Loc(28,36))], Loc(28,4)), Loc(28,4)),
            instr.ReturnI(expr.LitE(0, Loc(30,11))),
        ], # instrSeq end.
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
