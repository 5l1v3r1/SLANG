
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "000560.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:d": types.Int32,
    "v:main:c": types.Int32,
    "v:main:a": types.Int32,
    "v:main:b": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:main:a", Loc(6,4)), expr.LitE(42, Loc(6,8)), Loc(6,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(7,4)), [expr.LitE("""%d
""", Loc(7,11)), expr.VarE("v:main:a", Loc(7,19))], Loc(7,4)), Loc(7,4)),
            instr.AssignI(expr.VarE("v:main:b", Loc(9,4)), expr.LitE(64, Loc(9,12)), Loc(9,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(10,4)), [expr.LitE("""%d
""", Loc(10,11)), expr.VarE("v:main:b", Loc(10,19))], Loc(10,4)), Loc(10,4)),
            instr.AssignI(expr.VarE("v:main:c", Loc(12,4)), expr.LitE(12, Loc(12,12)), Loc(12,4)),
            instr.AssignI(expr.VarE("v:main:d", Loc(12,4)), expr.LitE(34, Loc(12,20)), Loc(12,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(13,4)), [expr.LitE("""%d, %d
""", Loc(13,11)), expr.VarE("v:main:c", Loc(13,23)), expr.VarE("v:main:d", Loc(13,26))], Loc(13,4)), Loc(13,4)),
            instr.ReturnI(expr.LitE(0, Loc(15,11))),
        ], # instrSeq end.
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
