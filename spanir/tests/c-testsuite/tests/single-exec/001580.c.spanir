
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "001580.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.4": types.Int32,
    "v:main:t.3": types.Int32,
    "v:main:t.2": types.Int32,
    "v:main:Count": types.Int32,
    "v:main:t.1": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:main:Count", Loc(7,9)), expr.LitE(0, Loc(7,17)), Loc(7,9)),
            instr.LabelI("ForCond1"),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(7,20)), expr.BinaryE(expr.VarE("v:main:Count", Loc(7,20)), op.BO_LT, expr.LitE(4, Loc(7,28)), Loc(7,20)), Loc(7,20)),
            instr.CondI(expr.VarE("v:main:t.1", Loc(7,20)), "ForBody1", "ForExit1", Loc(7,20)),
            instr.LabelI("ForBody1"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(9,7)), [expr.LitE("""%d
""", Loc(9,14)), expr.VarE("v:main:Count", Loc(9,22))], Loc(9,7)), Loc(9,7)),
            instr.LabelI("CaseCond2-0"),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(12,10)), expr.BinaryE(expr.VarE("v:main:Count", Loc(10,15)), op.BO_EQ, expr.LitE(1, Loc(12,15)), Loc(12,10)), Loc(12,10)),
            instr.CondI(expr.VarE("v:main:t.2", Loc(12,10)), "CaseBody2-0", "CaseCond2-1", Loc(12,10)),
            instr.LabelI("CaseBody2-0"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(13,13)), [expr.LitE("""%d
""", Loc(13,20)), expr.LitE(1, Loc(13,28))], Loc(13,13)), Loc(13,13)),
            instr.GotoI("SwitchExit2"),
            instr.LabelI("CaseCond2-1"),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(16,10)), expr.BinaryE(expr.VarE("v:main:Count", Loc(10,15)), op.BO_EQ, expr.LitE(2, Loc(16,15)), Loc(16,10)), Loc(16,10)),
            instr.CondI(expr.VarE("v:main:t.3", Loc(16,10)), "CaseBody2-1", "Default2", Loc(16,10)),
            instr.LabelI("CaseBody2-1"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(17,13)), [expr.LitE("""%d
""", Loc(17,20)), expr.LitE(2, Loc(17,28))], Loc(17,13)), Loc(17,13)),
            instr.LabelI("CaseCond2-2"),
            instr.LabelI("Default2"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(21,13)), [expr.LitE("""%d
""", Loc(21,20)), expr.LitE(0, Loc(21,28))], Loc(21,13)), Loc(21,13)),
            instr.LabelI("SwitchExit2"),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(7,31)), expr.VarE("v:main:Count", Loc(7,31)), Loc(7,31)),
            instr.AssignI(expr.VarE("v:main:Count", Loc(7,31)), expr.BinaryE(expr.VarE("v:main:Count", Loc(7,31)), op.BO_ADD, expr.LitE(1, Loc(7,31)), Loc(7,31)), Loc(7,31)),
            instr.GotoI("ForCond1"),
            instr.LabelI("ForExit1"),
            instr.ReturnI(expr.LitE(0, Loc(26,11))),
        ], # instrSeq end.
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
