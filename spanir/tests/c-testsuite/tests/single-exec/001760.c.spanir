
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "001760.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.4": types.Int32,
    "v:main:i": types.Int32,
    "v:partition:left": types.Int32,
    "v:main:t.1": types.Int32,
    "v:swap:b": types.Int32,
    "v:partition:right": types.Int32,
    "v:array": types.ConstSizeArray(of=types.Int32, dim=16),
    "v:swap:tmp": types.Int32,
    "v:partition:index": types.Int32,
    "v:partition:pivotIndex": types.Int32,
    "v:partition:pivotValue": types.Int32,
    "v:swap:a": types.Int32,
    "v:main:t.2": types.Int32,
    "v:printf:__format": types.Ptr(to=types.Int8),
    "v:main:t.3": types.Int32,
    "v:partition:i": types.Int32,
    "v:quicksort:left": types.Int32,
    "v:quicksort:right": types.Int32,
    "v:quicksort:index": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:printf":
      obj.Func(
        name = "f:printf",
        paramNames = ["v:printf:__format"],
        variadic = True,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
        }, # basicBlocks end.

        bbEdges= {
        }, # bbEdges end
      ), # f:printf() end. 

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          9: [
            instr.AssignI(expr.ArrayE(expr.VarE("v:array", Loc(51,4)), [expr.LitE(0, Loc(51,10))], Loc(51,4)), expr.LitE(62, Loc(51,15)), Loc(51,4)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:array", Loc(52,4)), [expr.LitE(1, Loc(52,10))], Loc(52,4)), expr.LitE(83, Loc(52,15)), Loc(52,4)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:array", Loc(53,4)), [expr.LitE(2, Loc(53,10))], Loc(53,4)), expr.LitE(4, Loc(53,15)), Loc(53,4)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:array", Loc(54,4)), [expr.LitE(3, Loc(54,10))], Loc(54,4)), expr.LitE(89, Loc(54,15)), Loc(54,4)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:array", Loc(55,4)), [expr.LitE(4, Loc(55,10))], Loc(55,4)), expr.LitE(36, Loc(55,15)), Loc(55,4)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:array", Loc(56,4)), [expr.LitE(5, Loc(56,10))], Loc(56,4)), expr.LitE(21, Loc(56,15)), Loc(56,4)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:array", Loc(57,4)), [expr.LitE(6, Loc(57,10))], Loc(57,4)), expr.LitE(74, Loc(57,15)), Loc(57,4)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:array", Loc(58,4)), [expr.LitE(7, Loc(58,10))], Loc(58,4)), expr.LitE(37, Loc(58,15)), Loc(58,4)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:array", Loc(59,4)), [expr.LitE(8, Loc(59,10))], Loc(59,4)), expr.LitE(65, Loc(59,15)), Loc(59,4)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:array", Loc(60,4)), [expr.LitE(9, Loc(60,10))], Loc(60,4)), expr.LitE(33, Loc(60,15)), Loc(60,4)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:array", Loc(61,4)), [expr.LitE(10, Loc(61,10))], Loc(61,4)), expr.LitE(96, Loc(61,16)), Loc(61,4)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:array", Loc(62,4)), [expr.LitE(11, Loc(62,10))], Loc(62,4)), expr.LitE(38, Loc(62,16)), Loc(62,4)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:array", Loc(63,4)), [expr.LitE(12, Loc(63,10))], Loc(63,4)), expr.LitE(53, Loc(63,16)), Loc(63,4)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:array", Loc(64,4)), [expr.LitE(13, Loc(64,10))], Loc(64,4)), expr.LitE(16, Loc(64,16)), Loc(64,4)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:array", Loc(65,4)), [expr.LitE(14, Loc(65,10))], Loc(65,4)), expr.LitE(74, Loc(65,16)), Loc(65,4)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:array", Loc(66,4)), [expr.LitE(15, Loc(66,10))], Loc(66,4)), expr.LitE(55, Loc(66,16)), Loc(66,4)),
            instr.AssignI(expr.VarE("v:main:i", Loc(68,9)), expr.LitE(0, Loc(68,13)), Loc(68,9)),
          ],

          8: [
            instr.AssignI(expr.VarE("v:main:t.4", Loc(68,16)), expr.BinaryE(expr.VarE("v:main:i", Loc(68,16)), op.BO_LT, expr.LitE(16, Loc(68,20))), Loc(68,16)),
            instr.CondI(expr.VarE("v:main:t.4", Loc(68,16)), Loc(68,4)),
          ],

          7: [
            instr.AssignI(expr.VarE("v:main:t.3", Loc(69,21)), expr.ArrayE(expr.VarE("v:array", Loc(69,21)), [expr.VarE("v:main:i", Loc(69,27))], Loc(69,21)), Loc(69,21)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(69,7)), [expr.LitE("""%d """, Loc(69,14)), expr.VarE("v:main:t.3", Loc(69,21))], Loc(69,7))),
          ],

          6: [
            instr.AssignI(expr.VarE("v:main:i", Loc(68,24)), expr.BinaryE(expr.VarE("v:main:i", Loc(68,24)), op.BO_ADD, expr.LitE(1, Loc(68,24)), Loc(68,24)), Loc(68,24)),
          ],

          1: [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(78,4)), [expr.LitE("""
""", Loc(78,11))], Loc(78,4))),
            instr.ReturnI(expr.LitE(0, Loc(80,11)), Loc(80,4)),
          ],

          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

          2: [
            instr.AssignI(expr.VarE("v:main:i", Loc(75,24)), expr.BinaryE(expr.VarE("v:main:i", Loc(75,24)), op.BO_ADD, expr.LitE(1, Loc(75,24)), Loc(75,24)), Loc(75,24)),
          ],

          3: [
            instr.AssignI(expr.VarE("v:main:t.1", Loc(76,21)), expr.ArrayE(expr.VarE("v:array", Loc(76,21)), [expr.VarE("v:main:i", Loc(76,27))], Loc(76,21)), Loc(76,21)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(76,7)), [expr.LitE("""%d """, Loc(76,14)), expr.VarE("v:main:t.1", Loc(76,21))], Loc(76,7))),
          ],

          4: [
            instr.AssignI(expr.VarE("v:main:t.2", Loc(75,16)), expr.BinaryE(expr.VarE("v:main:i", Loc(75,16)), op.BO_LT, expr.LitE(16, Loc(75,20))), Loc(75,16)),
            instr.CondI(expr.VarE("v:main:t.2", Loc(75,16)), Loc(75,4)),
          ],

          5: [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(71,4)), [expr.LitE("""
""", Loc(71,11))], Loc(71,4))),
            instr.CallI(expr.CallE(expr.FuncE("f:quicksort", Loc(73,4)), [expr.LitE(0, Loc(73,14)), expr.LitE(15, Loc(73,17))], Loc(73,4))),
            instr.AssignI(expr.VarE("v:main:i", Loc(75,9)), expr.LitE(0, Loc(75,13)), Loc(75,9)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 4, types.UnCondEdge),
          (3, 2, types.UnCondEdge),
          (4, 3, types.TrueEdge),
          (4, 1, types.FalseEdge),
          (5, 4, types.UnCondEdge),
          (6, 8, types.UnCondEdge),
          (7, 6, types.UnCondEdge),
          (8, 7, types.TrueEdge),
          (8, 5, types.FalseEdge),
          (9, 8, types.UnCondEdge),
          (-1, 9, types.UnCondEdge),
        }, # bbEdges end
      ), # f:main() end. 

    "f:quicksort":
      obj.Func(
        name = "f:quicksort",
        paramNames = ["v:quicksort:left", "v:quicksort:right"],
        variadic = False,
        returnType = types.Void,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          3: [
            instr.AssignI(expr.VarE("v:quicksort:t.3", Loc(39,7)), expr.BinaryE(expr.VarE("v:quicksort:left", Loc(39,7)), op.BO_GE, expr.VarE("v:quicksort:right", Loc(39,15))), Loc(39,7)),
            instr.CondI(expr.VarE("v:quicksort:t.3", Loc(39,7)), Loc(39,4)),
          ],

          2: [
            instr.ReturnI(Loc(40,7)),
          ],

          0: [
            instr.NopI(),
          ],

          -1: [
            instr.NopI(),
          ],

          1: [
            instr.AssignI(expr.VarE("v:quicksort:index", Loc(42,4)), expr.CallE(expr.FuncE("f:partition", Loc(42,16)), [expr.VarE("v:quicksort:left", Loc(42,26)), expr.VarE("v:quicksort:right", Loc(42,32))], Loc(42,16)), Loc(42,4)),
            instr.AssignI(expr.VarE("v:quicksort:t.1", Loc(43,20)), expr.BinaryE(expr.VarE("v:quicksort:index", Loc(43,20)), op.BO_SUB, expr.LitE(1, Loc(43,28))), Loc(43,20)),
            instr.CallI(expr.CallE(expr.FuncE("f:quicksort", Loc(43,4)), [expr.VarE("v:quicksort:left", Loc(43,14)), expr.VarE("v:quicksort:t.1", Loc(43,20))], Loc(43,4))),
            instr.AssignI(expr.VarE("v:quicksort:t.2", Loc(44,14)), expr.BinaryE(expr.VarE("v:quicksort:index", Loc(44,14)), op.BO_ADD, expr.LitE(1, Loc(44,22))), Loc(44,14)),
            instr.CallI(expr.CallE(expr.FuncE("f:quicksort", Loc(44,4)), [expr.VarE("v:quicksort:t.2", Loc(44,14)), expr.VarE("v:quicksort:right", Loc(44,25))], Loc(44,4))),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 0, types.UnCondEdge),
          (3, 2, types.TrueEdge),
          (3, 1, types.FalseEdge),
          (-1, 3, types.UnCondEdge),
        }, # bbEdges end
      ), # f:quicksort() end. 

    "f:swap":
      obj.Func(
        name = "f:swap",
        paramNames = ["v:swap:a", "v:swap:b"],
        variadic = False,
        returnType = types.Void,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          0: [
            instr.NopI(),
          ],

          -1: [
            instr.NopI(),
          ],

          1: [
            instr.AssignI(expr.VarE("v:swap:tmp", Loc(8,4)), expr.ArrayE(expr.VarE("v:array", Loc(8,15)), [expr.VarE("v:swap:a", Loc(8,21))], Loc(8,15)), Loc(8,4)),
            instr.AssignI(expr.VarE("v:swap:t.1", Loc(9,15)), expr.ArrayE(expr.VarE("v:array", Loc(9,15)), [expr.VarE("v:swap:b", Loc(9,21))], Loc(9,15)), Loc(9,15)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:array", Loc(9,4)), [expr.VarE("v:swap:a", Loc(9,10))], Loc(9,4)), expr.VarE("v:swap:t.1", Loc(9,15)), Loc(9,4)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:array", Loc(10,4)), [expr.VarE("v:swap:b", Loc(10,10))], Loc(10,4)), expr.VarE("v:swap:tmp", Loc(10,15)), Loc(10,4)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (-1, 1, types.UnCondEdge),
        }, # bbEdges end
      ), # f:swap() end. 

    "f:partition":
      obj.Func(
        name = "f:partition",
        paramNames = ["v:partition:left", "v:partition:right"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          6: [
            instr.AssignI(expr.VarE("v:partition:pivotIndex", Loc(17,4)), expr.VarE("v:partition:left", Loc(17,21)), Loc(17,4)),
            instr.AssignI(expr.VarE("v:partition:pivotValue", Loc(18,4)), expr.ArrayE(expr.VarE("v:array", Loc(18,21)), [expr.VarE("v:partition:pivotIndex", Loc(18,27))], Loc(18,21)), Loc(18,4)),
            instr.AssignI(expr.VarE("v:partition:index", Loc(19,4)), expr.VarE("v:partition:left", Loc(19,16)), Loc(19,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:swap", Loc(22,4)), [expr.VarE("v:partition:pivotIndex", Loc(22,9)), expr.VarE("v:partition:right", Loc(22,21))], Loc(22,4))),
            instr.AssignI(expr.VarE("v:partition:i", Loc(23,8)), expr.VarE("v:partition:left", Loc(23,12)), Loc(23,8)),
          ],

          1: [
            instr.CallI(expr.CallE(expr.FuncE("f:swap", Loc(31,4)), [expr.VarE("v:partition:right", Loc(31,9)), expr.VarE("v:partition:index", Loc(31,16))], Loc(31,4))),
            instr.ReturnI(expr.VarE("v:partition:index", Loc(33,11)), Loc(33,4)),
          ],

          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

          2: [
            instr.AssignI(expr.VarE("v:partition:i", Loc(23,29)), expr.BinaryE(expr.VarE("v:partition:i", Loc(23,29)), op.BO_ADD, expr.LitE(1, Loc(23,29)), Loc(23,29)), Loc(23,29)),
          ],

          3: [
            instr.CallI(expr.CallE(expr.FuncE("f:swap", Loc(27,10)), [expr.VarE("v:partition:i", Loc(27,15)), expr.VarE("v:partition:index", Loc(27,18))], Loc(27,10))),
            instr.AssignI(expr.VarE("v:partition:index", Loc(28,10)), expr.BinaryE(expr.VarE("v:partition:index", Loc(28,10)), op.BO_ADD, expr.LitE(1, Loc(28,19)), Loc(28,10)), Loc(28,10)),
          ],

          4: [
            instr.AssignI(expr.VarE("v:partition:t.1", Loc(25,10)), expr.ArrayE(expr.VarE("v:array", Loc(25,10)), [expr.VarE("v:partition:i", Loc(25,16))], Loc(25,10)), Loc(25,10)),
            instr.AssignI(expr.VarE("v:partition:t.2", Loc(25,10)), expr.BinaryE(expr.VarE("v:partition:t.1", Loc(25,10)), op.BO_LT, expr.VarE("v:partition:pivotValue", Loc(25,21))), Loc(25,10)),
            instr.CondI(expr.VarE("v:partition:t.2", Loc(25,10)), Loc(25,7)),
          ],

          5: [
            instr.AssignI(expr.VarE("v:partition:t.3", Loc(23,18)), expr.BinaryE(expr.VarE("v:partition:i", Loc(23,18)), op.BO_LT, expr.VarE("v:partition:right", Loc(23,22))), Loc(23,18)),
            instr.CondI(expr.VarE("v:partition:t.3", Loc(23,18)), Loc(23,4)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 5, types.UnCondEdge),
          (3, 2, types.UnCondEdge),
          (4, 3, types.TrueEdge),
          (4, 2, types.FalseEdge),
          (5, 4, types.TrueEdge),
          (5, 1, types.FalseEdge),
          (6, 5, types.UnCondEdge),
          (-1, 6, types.UnCondEdge),
        }, # bbEdges end
      ), # f:partition() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
