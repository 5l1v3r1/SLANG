
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "000310.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.12": types.Int32,
    "v:main:t.10": types.Int32,
    "v:main:t.9": types.Int32,
    "v:main:t.8": types.Int32,
    "v:main:t.7": types.Int32,
    "v:main:t.6": types.Int32,
    "v:main:t.5": types.Int32,
    "v:main:t.11": types.Int32,
    "v:main:y": types.Int32,
    "v:main:t.1": types.Int32,
    "v:main:t.2": types.Int32,
    "v:main:x": types.Int32,
    "v:main:t.3": types.Int32,
    "v:main:t.4": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:zero":
      obj.Func(
        name = "f:zero",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.ReturnI(expr.LitE(0, Loc(4,9))),
        ], # instrSeq end.
      ), # f:zero() end. 

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:main:x", Loc(19,2)), expr.CallE(expr.FuncE("f:zero", Loc(19,6)), Loc(19,6)), Loc(19,2)),
            instr.AssignI(expr.VarE("v:main:x", Loc(20,8)), expr.BinaryE(expr.VarE("v:main:x", Loc(20,8)), op.BO_ADD, expr.LitE(1, Loc(20,6)), Loc(20,6)), Loc(20,6)),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(20,8)), expr.VarE("v:main:x", Loc(20,8)), Loc(20,8)),
            instr.AssignI(expr.VarE("v:main:y", Loc(20,2)), expr.VarE("v:main:t.1", Loc(20,8)), Loc(20,2)),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(21,6)), expr.BinaryE(expr.VarE("v:main:x", Loc(21,6)), op.BO_NE, expr.LitE(1, Loc(21,11)), Loc(21,6)), Loc(21,6)),
            instr.CondI(expr.VarE("v:main:t.2", Loc(21,6)), "IfTrue1", "IfFalse1", Loc(21,6)),
            instr.LabelI("IfTrue1"),
            instr.ReturnI(expr.LitE(1, Loc(22,10))),
            instr.GotoI("IfExit1"),
            instr.LabelI("IfFalse1"),
            instr.LabelI("IfExit1"),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(23,6)), expr.BinaryE(expr.VarE("v:main:y", Loc(23,6)), op.BO_NE, expr.LitE(1, Loc(23,11)), Loc(23,6)), Loc(23,6)),
            instr.CondI(expr.VarE("v:main:t.3", Loc(23,6)), "IfTrue2", "IfFalse2", Loc(23,6)),
            instr.LabelI("IfTrue2"),
            instr.ReturnI(expr.LitE(1, Loc(24,10))),
            instr.GotoI("IfExit2"),
            instr.LabelI("IfFalse2"),
            instr.LabelI("IfExit2"),
            instr.AssignI(expr.VarE("v:main:x", Loc(26,2)), expr.CallE(expr.FuncE("f:one", Loc(26,6)), Loc(26,6)), Loc(26,2)),
            instr.AssignI(expr.VarE("v:main:x", Loc(27,8)), expr.BinaryE(expr.VarE("v:main:x", Loc(27,8)), op.BO_SUB, expr.LitE(1, Loc(27,6)), Loc(27,6)), Loc(27,6)),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(27,8)), expr.VarE("v:main:x", Loc(27,8)), Loc(27,8)),
            instr.AssignI(expr.VarE("v:main:y", Loc(27,2)), expr.VarE("v:main:t.4", Loc(27,8)), Loc(27,2)),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(28,6)), expr.BinaryE(expr.VarE("v:main:x", Loc(28,6)), op.BO_NE, expr.LitE(0, Loc(28,11)), Loc(28,6)), Loc(28,6)),
            instr.CondI(expr.VarE("v:main:t.5", Loc(28,6)), "IfTrue3", "IfFalse3", Loc(28,6)),
            instr.LabelI("IfTrue3"),
            instr.ReturnI(expr.LitE(1, Loc(29,10))),
            instr.GotoI("IfExit3"),
            instr.LabelI("IfFalse3"),
            instr.LabelI("IfExit3"),
            instr.AssignI(expr.VarE("v:main:t.6", Loc(30,6)), expr.BinaryE(expr.VarE("v:main:y", Loc(30,6)), op.BO_NE, expr.LitE(0, Loc(30,11)), Loc(30,6)), Loc(30,6)),
            instr.CondI(expr.VarE("v:main:t.6", Loc(30,6)), "IfTrue4", "IfFalse4", Loc(30,6)),
            instr.LabelI("IfTrue4"),
            instr.ReturnI(expr.LitE(1, Loc(31,10))),
            instr.GotoI("IfExit4"),
            instr.LabelI("IfFalse4"),
            instr.LabelI("IfExit4"),
            instr.AssignI(expr.VarE("v:main:x", Loc(33,2)), expr.CallE(expr.FuncE("f:zero", Loc(33,6)), Loc(33,6)), Loc(33,2)),
            instr.AssignI(expr.VarE("v:main:t.7", Loc(34,6)), expr.VarE("v:main:x", Loc(34,6)), Loc(34,6)),
            instr.AssignI(expr.VarE("v:main:x", Loc(34,6)), expr.BinaryE(expr.VarE("v:main:x", Loc(34,6)), op.BO_ADD, expr.LitE(1, Loc(34,6)), Loc(34,6)), Loc(34,6)),
            instr.AssignI(expr.VarE("v:main:y", Loc(34,2)), expr.VarE("v:main:t.7", Loc(34,6)), Loc(34,2)),
            instr.AssignI(expr.VarE("v:main:t.8", Loc(35,6)), expr.BinaryE(expr.VarE("v:main:x", Loc(35,6)), op.BO_NE, expr.LitE(1, Loc(35,11)), Loc(35,6)), Loc(35,6)),
            instr.CondI(expr.VarE("v:main:t.8", Loc(35,6)), "IfTrue5", "IfFalse5", Loc(35,6)),
            instr.LabelI("IfTrue5"),
            instr.ReturnI(expr.LitE(1, Loc(36,10))),
            instr.GotoI("IfExit5"),
            instr.LabelI("IfFalse5"),
            instr.LabelI("IfExit5"),
            instr.AssignI(expr.VarE("v:main:t.9", Loc(37,6)), expr.BinaryE(expr.VarE("v:main:y", Loc(37,6)), op.BO_NE, expr.LitE(0, Loc(37,11)), Loc(37,6)), Loc(37,6)),
            instr.CondI(expr.VarE("v:main:t.9", Loc(37,6)), "IfTrue6", "IfFalse6", Loc(37,6)),
            instr.LabelI("IfTrue6"),
            instr.ReturnI(expr.LitE(1, Loc(38,10))),
            instr.GotoI("IfExit6"),
            instr.LabelI("IfFalse6"),
            instr.LabelI("IfExit6"),
            instr.AssignI(expr.VarE("v:main:x", Loc(40,2)), expr.CallE(expr.FuncE("f:one", Loc(40,6)), Loc(40,6)), Loc(40,2)),
            instr.AssignI(expr.VarE("v:main:t.10", Loc(41,6)), expr.VarE("v:main:x", Loc(41,6)), Loc(41,6)),
            instr.AssignI(expr.VarE("v:main:x", Loc(41,6)), expr.BinaryE(expr.VarE("v:main:x", Loc(41,6)), op.BO_SUB, expr.LitE(1, Loc(41,6)), Loc(41,6)), Loc(41,6)),
            instr.AssignI(expr.VarE("v:main:y", Loc(41,2)), expr.VarE("v:main:t.10", Loc(41,6)), Loc(41,2)),
            instr.AssignI(expr.VarE("v:main:t.11", Loc(42,6)), expr.BinaryE(expr.VarE("v:main:x", Loc(42,6)), op.BO_NE, expr.LitE(0, Loc(42,11)), Loc(42,6)), Loc(42,6)),
            instr.CondI(expr.VarE("v:main:t.11", Loc(42,6)), "IfTrue7", "IfFalse7", Loc(42,6)),
            instr.LabelI("IfTrue7"),
            instr.ReturnI(expr.LitE(1, Loc(43,10))),
            instr.GotoI("IfExit7"),
            instr.LabelI("IfFalse7"),
            instr.LabelI("IfExit7"),
            instr.AssignI(expr.VarE("v:main:t.12", Loc(44,6)), expr.BinaryE(expr.VarE("v:main:y", Loc(44,6)), op.BO_NE, expr.LitE(1, Loc(44,11)), Loc(44,6)), Loc(44,6)),
            instr.CondI(expr.VarE("v:main:t.12", Loc(44,6)), "IfTrue8", "IfFalse8", Loc(44,6)),
            instr.LabelI("IfTrue8"),
            instr.ReturnI(expr.LitE(1, Loc(45,10))),
            instr.GotoI("IfExit8"),
            instr.LabelI("IfFalse8"),
            instr.LabelI("IfExit8"),
            instr.ReturnI(expr.LitE(0, Loc(47,9))),
        ], # instrSeq end.
      ), # f:main() end. 

    "f:one":
      obj.Func(
        name = "f:one",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.ReturnI(expr.LitE(1, Loc(10,9))),
        ], # instrSeq end.
      ), # f:one() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
