
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "000310.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.10": types.Int32,
    "v:main:t.9": types.Int32,
    "v:main:x": types.Int32,
    "v:main:t.1": types.Int32,
    "v:main:t.2": types.Int32,
    "v:main:y": types.Int32,
    "v:main:t.3": types.Int32,
    "v:main:t.4": types.Int32,
    "v:main:t.5": types.Int32,
    "v:main:t.6": types.Int32,
    "v:main:t.7": types.Int32,
    "v:main:t.8": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          17: [
            instr.AssignI(expr.VarE("v:main:x", Loc(19,2)), expr.CallE(expr.FuncE("f:zero", Loc(19,6)), [], Loc(19,6)), Loc(19,2)),
            instr.AssignI(expr.VarE("v:main:x", Loc(20,8)), expr.BinaryE(expr.VarE("v:main:x", Loc(20,8)), op.BO_ADD, expr.LitE(1), Loc(20,6)), Loc(20,6)),
            instr.AssignI(expr.VarE("v:main:y", Loc(20,2)), expr.VarE("v:main:x", Loc(20,8)), Loc(20,2)),
            instr.AssignI(expr.VarE("v:main:t.10", Loc(21,6)), expr.BinaryE(expr.VarE("v:main:x", Loc(21,6)), op.BO_NE, expr.LitE(1, Loc(21,11))), Loc(21,6)),
            instr.CondI(expr.VarE("v:main:t.10", Loc(21,6)), Loc(21,2)),
          ],

          16: [
            instr.ReturnI(expr.LitE(1, Loc(22,10)), Loc(22,3)),
          ],

          15: [
            instr.AssignI(expr.VarE("v:main:t.9", Loc(23,6)), expr.BinaryE(expr.VarE("v:main:y", Loc(23,6)), op.BO_NE, expr.LitE(1, Loc(23,11))), Loc(23,6)),
            instr.CondI(expr.VarE("v:main:t.9", Loc(23,6)), Loc(23,2)),
          ],

          14: [
            instr.ReturnI(expr.LitE(1, Loc(24,10)), Loc(24,3)),
          ],

          13: [
            instr.AssignI(expr.VarE("v:main:x", Loc(26,2)), expr.CallE(expr.FuncE("f:one", Loc(26,6)), [], Loc(26,6)), Loc(26,2)),
            instr.AssignI(expr.VarE("v:main:x", Loc(27,8)), expr.BinaryE(expr.VarE("v:main:x", Loc(27,8)), op.BO_SUB, expr.LitE(1), Loc(27,6)), Loc(27,6)),
            instr.AssignI(expr.VarE("v:main:y", Loc(27,2)), expr.VarE("v:main:x", Loc(27,8)), Loc(27,2)),
            instr.AssignI(expr.VarE("v:main:t.8", Loc(28,6)), expr.BinaryE(expr.VarE("v:main:x", Loc(28,6)), op.BO_NE, expr.LitE(0, Loc(28,11))), Loc(28,6)),
            instr.CondI(expr.VarE("v:main:t.8", Loc(28,6)), Loc(28,2)),
          ],

          12: [
            instr.ReturnI(expr.LitE(1, Loc(29,10)), Loc(29,3)),
          ],

          11: [
            instr.AssignI(expr.VarE("v:main:t.7", Loc(30,6)), expr.BinaryE(expr.VarE("v:main:y", Loc(30,6)), op.BO_NE, expr.LitE(0, Loc(30,11))), Loc(30,6)),
            instr.CondI(expr.VarE("v:main:t.7", Loc(30,6)), Loc(30,2)),
          ],

          10: [
            instr.ReturnI(expr.LitE(1, Loc(31,10)), Loc(31,3)),
          ],

          3: [
            instr.AssignI(expr.VarE("v:main:t.1", Loc(44,6)), expr.BinaryE(expr.VarE("v:main:y", Loc(44,6)), op.BO_NE, expr.LitE(1, Loc(44,11))), Loc(44,6)),
            instr.CondI(expr.VarE("v:main:t.1", Loc(44,6)), Loc(44,2)),
          ],

          2: [
            instr.ReturnI(expr.LitE(1, Loc(45,10)), Loc(45,3)),
          ],

          1: [
            instr.ReturnI(expr.LitE(0, Loc(47,9)), Loc(47,2)),
          ],

          0: [
            instr.NopI(),
          ],

          4: [
            instr.ReturnI(expr.LitE(1, Loc(43,10)), Loc(43,3)),
          ],

          -1: [
            instr.NopI(),
          ],

          5: [
            instr.AssignI(expr.VarE("v:main:x", Loc(40,2)), expr.CallE(expr.FuncE("f:one", Loc(40,6)), [], Loc(40,6)), Loc(40,2)),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(41,6)), expr.VarE("v:main:x", Loc(41,6)), Loc(41,6)),
            instr.AssignI(expr.VarE("v:main:x", Loc(41,6)), expr.BinaryE(expr.VarE("v:main:x", Loc(41,6)), op.BO_SUB, expr.LitE(1, Loc(41,6)), Loc(41,6)), Loc(41,6)),
            instr.AssignI(expr.VarE("v:main:y", Loc(41,2)), expr.VarE("v:main:t.2", Loc(41,6)), Loc(41,2)),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(42,6)), expr.BinaryE(expr.VarE("v:main:x", Loc(42,6)), op.BO_NE, expr.LitE(0, Loc(42,11))), Loc(42,6)),
            instr.CondI(expr.VarE("v:main:t.3", Loc(42,6)), Loc(42,2)),
          ],

          6: [
            instr.ReturnI(expr.LitE(1, Loc(38,10)), Loc(38,3)),
          ],

          7: [
            instr.AssignI(expr.VarE("v:main:t.4", Loc(37,6)), expr.BinaryE(expr.VarE("v:main:y", Loc(37,6)), op.BO_NE, expr.LitE(0, Loc(37,11))), Loc(37,6)),
            instr.CondI(expr.VarE("v:main:t.4", Loc(37,6)), Loc(37,2)),
          ],

          8: [
            instr.ReturnI(expr.LitE(1, Loc(36,10)), Loc(36,3)),
          ],

          9: [
            instr.AssignI(expr.VarE("v:main:x", Loc(33,2)), expr.CallE(expr.FuncE("f:zero", Loc(33,6)), [], Loc(33,6)), Loc(33,2)),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(34,6)), expr.VarE("v:main:x", Loc(34,6)), Loc(34,6)),
            instr.AssignI(expr.VarE("v:main:x", Loc(34,6)), expr.BinaryE(expr.VarE("v:main:x", Loc(34,6)), op.BO_ADD, expr.LitE(1, Loc(34,6)), Loc(34,6)), Loc(34,6)),
            instr.AssignI(expr.VarE("v:main:y", Loc(34,2)), expr.VarE("v:main:t.5", Loc(34,6)), Loc(34,2)),
            instr.AssignI(expr.VarE("v:main:t.6", Loc(35,6)), expr.BinaryE(expr.VarE("v:main:x", Loc(35,6)), op.BO_NE, expr.LitE(1, Loc(35,11))), Loc(35,6)),
            instr.CondI(expr.VarE("v:main:t.6", Loc(35,6)), Loc(35,2)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 0, types.UnCondEdge),
          (3, 2, types.TrueEdge),
          (3, 1, types.FalseEdge),
          (4, 0, types.UnCondEdge),
          (5, 4, types.TrueEdge),
          (5, 3, types.FalseEdge),
          (6, 0, types.UnCondEdge),
          (7, 6, types.TrueEdge),
          (7, 5, types.FalseEdge),
          (8, 0, types.UnCondEdge),
          (9, 8, types.TrueEdge),
          (9, 7, types.FalseEdge),
          (10, 0, types.UnCondEdge),
          (11, 10, types.TrueEdge),
          (11, 9, types.FalseEdge),
          (12, 0, types.UnCondEdge),
          (13, 12, types.TrueEdge),
          (13, 11, types.FalseEdge),
          (14, 0, types.UnCondEdge),
          (15, 14, types.TrueEdge),
          (15, 13, types.FalseEdge),
          (16, 0, types.UnCondEdge),
          (17, 16, types.TrueEdge),
          (17, 15, types.FalseEdge),
          (-1, 17, types.UnCondEdge),
        }, # bbEdges end
      ), # f:main() end. 

    "f:one":
      obj.Func(
        name = "f:one",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          1: [
            instr.ReturnI(expr.LitE(1, Loc(10,9)), Loc(10,2)),
          ],

          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (-1, 1, types.UnCondEdge),
        }, # bbEdges end
      ), # f:one() end. 

    "f:zero":
      obj.Func(
        name = "f:zero",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          1: [
            instr.ReturnI(expr.LitE(0, Loc(4,9)), Loc(4,2)),
          ],

          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (-1, 1, types.UnCondEdge),
        }, # bbEdges end
      ), # f:zero() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
