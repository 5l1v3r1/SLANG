
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "000840.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.4": types.Int32,
    "v:main:t.3": types.Int32,
    "v:three:c": types.Int32,
    "v:three:b": types.Int32,
    "v:main:t.1": types.Int32,
    "v:two:a": types.Int32,
    "v:one:a": types.Int32,
    "v:two:b": types.Int32,
    "v:main:t.2": types.Int32,
    "v:three:a": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:main:t.1", Loc(45,6)), expr.CallE(expr.FuncE("f:none", Loc(45,6)), Loc(45,6)), Loc(45,6)),
            instr.CondI(expr.VarE("v:main:t.1", Loc(45,6)), "IfTrue7", "IfFalse7", Loc(45,6)),
            instr.LabelI("IfTrue7"),
            instr.ReturnI(expr.LitE(1, Loc(46,10))),
            instr.GotoI("IfExit7"),
            instr.LabelI("IfFalse7"),
            instr.LabelI("IfExit7"),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(47,6)), expr.CallE(expr.FuncE("f:one", Loc(47,6)), [expr.LitE(1, Loc(47,10))], Loc(47,6)), Loc(47,6)),
            instr.CondI(expr.VarE("v:main:t.2", Loc(47,6)), "IfTrue8", "IfFalse8", Loc(47,6)),
            instr.LabelI("IfTrue8"),
            instr.ReturnI(expr.LitE(2, Loc(48,10))),
            instr.GotoI("IfExit8"),
            instr.LabelI("IfFalse8"),
            instr.LabelI("IfExit8"),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(49,6)), expr.CallE(expr.FuncE("f:two", Loc(49,6)), [expr.LitE(1, Loc(49,10)), expr.LitE(2, Loc(49,10))], Loc(49,6)), Loc(49,6)),
            instr.CondI(expr.VarE("v:main:t.3", Loc(49,6)), "IfTrue9", "IfFalse9", Loc(49,6)),
            instr.LabelI("IfTrue9"),
            instr.ReturnI(expr.LitE(3, Loc(50,10))),
            instr.GotoI("IfExit9"),
            instr.LabelI("IfFalse9"),
            instr.LabelI("IfExit9"),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(51,6)), expr.CallE(expr.FuncE("f:three", Loc(51,6)), [expr.LitE(1, Loc(51,12)), expr.LitE(2, Loc(51,12)), expr.LitE(3, Loc(51,12))], Loc(51,6)), Loc(51,6)),
            instr.CondI(expr.VarE("v:main:t.4", Loc(51,6)), "IfTrue10", "IfFalse10", Loc(51,6)),
            instr.LabelI("IfTrue10"),
            instr.ReturnI(expr.LitE(4, Loc(52,10))),
            instr.GotoI("IfExit10"),
            instr.LabelI("IfFalse10"),
            instr.LabelI("IfExit10"),
            instr.ReturnI(expr.LitE(0, Loc(53,9))),
        ], # instrSeq end.
      ), # f:main() end. 

    "f:two":
      obj.Func(
        name = "f:two",
        paramNames = ["v:two:a", "v:two:b"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:two:t.1", Loc(21,6)), expr.BinaryE(expr.VarE("v:two:a", Loc(21,6)), op.BO_NE, expr.LitE(1, Loc(21,11)), Loc(21,6)), Loc(21,6)),
            instr.CondI(expr.VarE("v:two:t.1", Loc(21,6)), "IfTrue2", "IfFalse2", Loc(21,6)),
            instr.LabelI("IfTrue2"),
            instr.ReturnI(expr.LitE(1, Loc(22,10))),
            instr.GotoI("IfExit2"),
            instr.LabelI("IfFalse2"),
            instr.LabelI("IfExit2"),
            instr.AssignI(expr.VarE("v:two:t.2", Loc(23,6)), expr.BinaryE(expr.VarE("v:two:b", Loc(23,6)), op.BO_NE, expr.LitE(2, Loc(23,11)), Loc(23,6)), Loc(23,6)),
            instr.CondI(expr.VarE("v:two:t.2", Loc(23,6)), "IfTrue3", "IfFalse3", Loc(23,6)),
            instr.LabelI("IfTrue3"),
            instr.ReturnI(expr.LitE(1, Loc(24,10))),
            instr.GotoI("IfExit3"),
            instr.LabelI("IfFalse3"),
            instr.LabelI("IfExit3"),
            instr.ReturnI(expr.LitE(0, Loc(26,9))),
        ], # instrSeq end.
      ), # f:two() end. 

    "f:none":
      obj.Func(
        name = "f:none",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.ReturnI(expr.LitE(0, Loc(6,9))),
        ], # instrSeq end.
      ), # f:none() end. 

    "f:three":
      obj.Func(
        name = "f:three",
        paramNames = ["v:three:a", "v:three:b", "v:three:c"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:three:t.1", Loc(32,6)), expr.BinaryE(expr.VarE("v:three:a", Loc(32,6)), op.BO_NE, expr.LitE(1, Loc(32,11)), Loc(32,6)), Loc(32,6)),
            instr.CondI(expr.VarE("v:three:t.1", Loc(32,6)), "IfTrue4", "IfFalse4", Loc(32,6)),
            instr.LabelI("IfTrue4"),
            instr.ReturnI(expr.LitE(1, Loc(33,10))),
            instr.GotoI("IfExit4"),
            instr.LabelI("IfFalse4"),
            instr.LabelI("IfExit4"),
            instr.AssignI(expr.VarE("v:three:t.2", Loc(34,6)), expr.BinaryE(expr.VarE("v:three:b", Loc(34,6)), op.BO_NE, expr.LitE(2, Loc(34,11)), Loc(34,6)), Loc(34,6)),
            instr.CondI(expr.VarE("v:three:t.2", Loc(34,6)), "IfTrue5", "IfFalse5", Loc(34,6)),
            instr.LabelI("IfTrue5"),
            instr.ReturnI(expr.LitE(1, Loc(35,10))),
            instr.GotoI("IfExit5"),
            instr.LabelI("IfFalse5"),
            instr.LabelI("IfExit5"),
            instr.AssignI(expr.VarE("v:three:t.3", Loc(36,6)), expr.BinaryE(expr.VarE("v:three:c", Loc(36,6)), op.BO_NE, expr.LitE(3, Loc(36,11)), Loc(36,6)), Loc(36,6)),
            instr.CondI(expr.VarE("v:three:t.3", Loc(36,6)), "IfTrue6", "IfFalse6", Loc(36,6)),
            instr.LabelI("IfTrue6"),
            instr.ReturnI(expr.LitE(1, Loc(37,10))),
            instr.GotoI("IfExit6"),
            instr.LabelI("IfFalse6"),
            instr.LabelI("IfExit6"),
            instr.ReturnI(expr.LitE(0, Loc(39,9))),
        ], # instrSeq end.
      ), # f:three() end. 

    "f:one":
      obj.Func(
        name = "f:one",
        paramNames = ["v:one:a"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:one:t.1", Loc(12,6)), expr.BinaryE(expr.VarE("v:one:a", Loc(12,6)), op.BO_NE, expr.LitE(1, Loc(12,11)), Loc(12,6)), Loc(12,6)),
            instr.CondI(expr.VarE("v:one:t.1", Loc(12,6)), "IfTrue1", "IfFalse1", Loc(12,6)),
            instr.LabelI("IfTrue1"),
            instr.ReturnI(expr.LitE(1, Loc(13,10))),
            instr.GotoI("IfExit1"),
            instr.LabelI("IfFalse1"),
            instr.LabelI("IfExit1"),
            instr.ReturnI(expr.LitE(0, Loc(15,9))),
        ], # instrSeq end.
      ), # f:one() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
