
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "001710.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.5": types.Ptr(to=types.Int32),
    "v:main:t.4": types.Ptr(to=types.Void),
    "v:main:t.3": types.Int32,
    "v:main:c": types.Ptr(to=types.Int32),
    "v:printf:__format": types.Ptr(to=types.Int8),
    "v:main:t.1": types.Ptr(to=types.Void),
    "v:main:t.2": types.Ptr(to=types.Int32),
    "v:main:a": types.Int32,
    "v:main:b": types.Ptr(to=types.Int32),
  }, # end allVars dict

  allObjs = {

    "f:printf":
      obj.Func(
        name = "f:printf",
        paramNames = ["v:printf:__format"],
        variadic = True,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
        }, # basicBlocks end.

        bbEdges= {
        }, # bbEdges end
      ), # f:printf() end. 

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          7: [
            instr.AssignI(expr.VarE("v:main:a", Loc(9,4)), expr.LitE(42, Loc(9,8)), Loc(9,4)),
            instr.AssignI(expr.VarE("v:main:b", Loc(10,4)), expr.UnaryE(op.UO_ADDROF, expr.VarE("v:main:a", Loc(10,9)), Loc(10,8)), Loc(10,4)),
            instr.AssignI(expr.VarE("v:main:c", Loc(11,4)), expr.CastE(expr.LitE(0, Loc(11,8)), types.Ptr(to=types.Void), Loc(11,8)), Loc(11,4)),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(13,19)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:b", Loc(13,20)), Loc(13,19)), Loc(13,19)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(13,4)), [expr.LitE("""%d
""", Loc(13,11)), expr.VarE("v:main:t.3", Loc(13,19))], Loc(13,4))),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(15,13)), expr.CastE(expr.LitE(0, Loc(15,13)), types.Ptr(to=types.Void), Loc(15,13)), Loc(15,13)),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(15,8)), expr.BinaryE(expr.VarE("v:main:b", Loc(15,8)), op.BO_EQ, expr.VarE("v:main:t.4", Loc(15,13))), Loc(15,8)),
            instr.CondI(expr.VarE("v:main:t.5", Loc(15,8)), Loc(15,4)),
          ],

          6: [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(16,7)), [expr.LitE("""b is NULL
""", Loc(16,14))], Loc(16,7))),
          ],

          1: [
            instr.ReturnI(expr.LitE(0, Loc(25,11)), Loc(25,4)),
          ],

          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

          2: [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(23,7)), [expr.LitE("""c is not NULL
""", Loc(23,14))], Loc(23,7))),
          ],

          3: [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(21,7)), [expr.LitE("""c is NULL
""", Loc(21,14))], Loc(21,7))),
          ],

          4: [
            instr.AssignI(expr.VarE("v:main:t.1", Loc(20,13)), expr.CastE(expr.LitE(0, Loc(20,13)), types.Ptr(to=types.Void), Loc(20,13)), Loc(20,13)),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(20,8)), expr.BinaryE(expr.VarE("v:main:c", Loc(20,8)), op.BO_EQ, expr.VarE("v:main:t.1", Loc(20,13))), Loc(20,8)),
            instr.CondI(expr.VarE("v:main:t.2", Loc(20,8)), Loc(20,4)),
          ],

          5: [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(18,7)), [expr.LitE("""b is not NULL
""", Loc(18,14))], Loc(18,7))),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 1, types.UnCondEdge),
          (3, 1, types.UnCondEdge),
          (4, 3, types.TrueEdge),
          (4, 2, types.FalseEdge),
          (5, 4, types.UnCondEdge),
          (6, 4, types.UnCondEdge),
          (7, 6, types.TrueEdge),
          (7, 5, types.FalseEdge),
          (-1, 7, types.UnCondEdge),
        }, # bbEdges end
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
