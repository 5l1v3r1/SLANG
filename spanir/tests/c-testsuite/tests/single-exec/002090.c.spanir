
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "002090.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:f5:i": types.Ptr(to=types.FuncSig(returnType=types.Int32)),
    "v:f5:fp": types.Ptr(to=types.FuncSig(returnType=types.Int32, paramTypes=[types.Ptr(to=types.FuncSig(returnType=types.Int32))])),
    "v:f4:t.3": types.Int32,
    "v:f4:i": types.Int32,
    "v:f3:i": types.Int32,
    "v:f3:fp": types.Ptr(to=types.FuncSig(returnType=types.Int32, paramTypes=[types.Int32])),
    "v:f4:fp": types.Ptr(to=types.Ptr(to=types.FuncSig(returnType=types.Int32, paramTypes=[types.Int32]))),
    "v:f1:i": types.Int32,
    "v:f1:fp": types.Ptr(to=types.FuncSig(returnType=types.Int32)),
    "v:f5:t.1": types.Int32,
    "v:f2:fp": types.Ptr(to=types.FuncSig(returnType=types.Int32, paramTypes=[types.Int32])),
    "v:f4:t.2": UnknownType.,
    "v:f2:i": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.ReturnI(expr.LitE(0, Loc(43,22))),
        ], # instrSeq end.
      ), # f:main() end. 

    "f:f4":
      obj.Func(
        name = "f:f4",
        paramNames = ["v:f4:fp", "v:f4:i"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:f4:t.1", Loc(36,12)), expr.ArrayE(expr.VarE("v:f4:i", Loc(36,15)), expr.VarE("v:f4:fp", Loc(36,12)), Loc(36,12)), Loc(36,12)),
            instr.AssignI(expr.VarE("v:f4:t.2", Loc(36,11)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:f4:t.1", Loc(36,12)), Loc(36,11)), Loc(36,11)),
            instr.AssignI(expr.VarE("v:f4:t.3", Loc(36,10)), expr.CallE(expr.VarE("v:f4:t.2", Loc(36,11)), [expr.VarE("v:f4:i", Loc(36,19))], Loc(36,10)), Loc(36,10)),
            instr.ReturnI(expr.VarE("v:f4:t.3", Loc(36,10))),
        ], # instrSeq end.
      ), # f:f4() end. 

    "f:f3":
      obj.Func(
        name = "f:f3",
        paramNames = ["v:f3:fp", "v:f3:i"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:f3:t.1", Loc(32,11)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:f3:fp", Loc(32,12)), Loc(32,11)), Loc(32,11)),
            instr.AssignI(expr.VarE("v:f3:t.2", Loc(32,10)), expr.CallE(expr.VarE("v:f3:t.1", Loc(32,11)), [expr.VarE("v:f3:i", Loc(32,16))], Loc(32,10)), Loc(32,10)),
            instr.ReturnI(expr.VarE("v:f3:t.2", Loc(32,10))),
        ], # instrSeq end.
      ), # f:f3() end. 

    "f:f1":
      obj.Func(
        name = "f:f1",
        paramNames = ["v:f1:fp", "v:f1:i"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:f1:t.1", Loc(24,11)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:f1:fp", Loc(24,12)), Loc(24,11)), Loc(24,11)),
            instr.AssignI(expr.VarE("v:f1:t.2", Loc(24,10)), expr.CallE(expr.VarE("v:f1:t.1", Loc(24,11)), [expr.VarE("v:f1:i", Loc(24,16))], Loc(24,10)), Loc(24,10)),
            instr.ReturnI(expr.VarE("v:f1:t.2", Loc(24,10))),
        ], # instrSeq end.
      ), # f:f1() end. 

    "f:f5":
      obj.Func(
        name = "f:f5",
        paramNames = ["v:f5:fp", "v:f5:i"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:f5:t.1", Loc(40,10)), expr.CallE(expr.VarE("v:f5:fp", Loc(40,10)), [expr.VarE("v:f5:i", Loc(40,13))], Loc(40,10)), Loc(40,10)),
            instr.ReturnI(expr.VarE("v:f5:t.1", Loc(40,10))),
        ], # instrSeq end.
      ), # f:f5() end. 

    "f:f2":
      obj.Func(
        name = "f:f2",
        paramNames = ["v:f2:fp", "v:f2:i"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:f2:t.1", Loc(28,11)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:f2:fp", Loc(28,12)), Loc(28,11)), Loc(28,11)),
            instr.AssignI(expr.VarE("v:f2:t.2", Loc(28,10)), expr.CallE(expr.VarE("v:f2:t.1", Loc(28,11)), [expr.VarE("v:f2:i", Loc(28,16))], Loc(28,10)), Loc(28,10)),
            instr.ReturnI(expr.VarE("v:f2:t.2", Loc(28,10))),
        ], # instrSeq end.
      ), # f:f2() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
