
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "000410.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.6": types.Int32,
    "v:main:t.5": types.Int32,
    "v:main:t.4": types.Int32,
    "v:main:t.3": types.Int32,
    "v:main:t.2": types.Int32,
    "v:main:t": types.Int32,
    "v:main:c": types.Int32,
    "v:main:t.1": types.Int32,
    "v:main:n": types.Int32,
    "v:main:p": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          14: [
            instr.AssignI(expr.VarE("v:main:c", Loc(8,2)), expr.LitE(0, Loc(8,6)), Loc(8,2)),
            instr.AssignI(expr.VarE("v:main:n", Loc(9,2)), expr.LitE(2, Loc(9,6)), Loc(9,2)),
          ],

          13: [
            instr.AssignI(expr.VarE("v:main:t.6", Loc(10,9)), expr.BinaryE(expr.VarE("v:main:n", Loc(10,9)), op.BO_LT, expr.LitE(5000, Loc(10,13))), Loc(10,9)),
            instr.CondI(expr.VarE("v:main:t.6", Loc(10,9)), Loc(10,2)),
          ],

          12: [
            instr.AssignI(expr.VarE("v:main:t", Loc(11,3)), expr.LitE(2, Loc(11,7)), Loc(11,3)),
            instr.AssignI(expr.VarE("v:main:p", Loc(12,3)), expr.LitE(1, Loc(12,7)), Loc(12,3)),
          ],

          11: [
            instr.AssignI(expr.VarE("v:main:t.4", Loc(13,10)), expr.BinaryE(expr.VarE("v:main:t", Loc(13,10)), op.BO_MUL, expr.VarE("v:main:t", Loc(13,12))), Loc(13,10)),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(13,10)), expr.BinaryE(expr.VarE("v:main:t.4", Loc(13,10)), op.BO_LE, expr.VarE("v:main:n", Loc(13,17))), Loc(13,10)),
            instr.CondI(expr.VarE("v:main:t.5", Loc(13,10)), Loc(13,3)),
          ],

          10: [
            instr.AssignI(expr.VarE("v:main:t.2", Loc(14,8)), expr.BinaryE(expr.VarE("v:main:n", Loc(14,8)), op.BO_MOD, expr.VarE("v:main:t", Loc(14,12))), Loc(14,8)),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(14,8)), expr.BinaryE(expr.VarE("v:main:t.2", Loc(14,8)), op.BO_EQ, expr.LitE(0, Loc(14,17))), Loc(14,8)),
            instr.CondI(expr.VarE("v:main:t.3", Loc(14,8)), Loc(14,4)),
          ],

          3: [
            instr.AssignI(expr.VarE("v:main:t.1", Loc(22,6)), expr.BinaryE(expr.VarE("v:main:c", Loc(22,6)), op.BO_NE, expr.LitE(669, Loc(22,11))), Loc(22,6)),
            instr.CondI(expr.VarE("v:main:t.1", Loc(22,6)), Loc(22,2)),
          ],

          2: [
            instr.ReturnI(expr.LitE(1, Loc(23,10)), Loc(23,3)),
          ],

          1: [
            instr.ReturnI(expr.LitE(0, Loc(24,9)), Loc(24,2)),
          ],

          0: [
            instr.NopI(),
          ],

          4: [
            instr.NopI(),
          ],

          -1: [
            instr.NopI(),
          ],

          5: [
            instr.AssignI(expr.VarE("v:main:c", Loc(20,4)), expr.BinaryE(expr.VarE("v:main:c", Loc(20,4)), op.BO_ADD, expr.LitE(1, Loc(20,4)), Loc(20,4)), Loc(20,4)),
          ],

          6: [
            instr.AssignI(expr.VarE("v:main:n", Loc(18,3)), expr.BinaryE(expr.VarE("v:main:n", Loc(18,3)), op.BO_ADD, expr.LitE(1, Loc(18,3)), Loc(18,3)), Loc(18,3)),
            instr.CondI(expr.VarE("v:main:p", Loc(19,7)), Loc(19,3)),
          ],

          7: [
            instr.NopI(),
          ],

          8: [
            instr.AssignI(expr.VarE("v:main:t", Loc(16,4)), expr.BinaryE(expr.VarE("v:main:t", Loc(16,4)), op.BO_ADD, expr.LitE(1, Loc(16,4)), Loc(16,4)), Loc(16,4)),
          ],

          9: [
            instr.AssignI(expr.VarE("v:main:p", Loc(15,5)), expr.LitE(0, Loc(15,9)), Loc(15,5)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 0, types.UnCondEdge),
          (3, 2, types.TrueEdge),
          (3, 1, types.FalseEdge),
          (4, 13, types.UnCondEdge),
          (5, 4, types.UnCondEdge),
          (6, 5, types.TrueEdge),
          (6, 4, types.FalseEdge),
          (7, 11, types.UnCondEdge),
          (8, 7, types.UnCondEdge),
          (9, 8, types.UnCondEdge),
          (10, 9, types.TrueEdge),
          (10, 8, types.FalseEdge),
          (11, 10, types.TrueEdge),
          (11, 6, types.FalseEdge),
          (12, 11, types.UnCondEdge),
          (13, 12, types.TrueEdge),
          (13, 3, types.FalseEdge),
          (14, 13, types.UnCondEdge),
          (-1, 14, types.UnCondEdge),
        }, # bbEdges end
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
