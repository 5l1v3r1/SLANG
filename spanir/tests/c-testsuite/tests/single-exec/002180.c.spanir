
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "002180.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:convs": types.Union("u:tree_node"),
    "v:convert_like_real:t.4": types.Int32,
    "v:convert_like_real:t.3": types.Int32,
    "v:convert_like_real:t.2": types.Int32,
    "v:convert_like_real:convs": types.Ptr(to=types.Union("u:tree_node")),
    "v:main:t.1": types.Ptr(to=types.Union("u:tree_node")),
  }, # end allVars dict

  allObjs = {
    "s:tree_common":
      types.Struct(
        name = "s:tree_common",
        fields = [
          ("chain", types.Ptr(to=types.Union("u:tree_node"))),
          ("type", types.Ptr(to=types.Union("u:tree_node"))),
          ("code", types.Int32),
          ("side_effects_flag", types.UInt32),
        ],
        loc = Loc(11,1),
      ),

    "u:tree_node":
      types.Union(
        name = "u:tree_node",
        fields = [
          ("common", types.Struct("s:tree_common")),
        ],
        loc = Loc(18,1),
      ),


    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.MemberE("code", expr.MemberE("common", expr.VarE("v:main:convs", Loc(54,3)), Loc(54,3)), Loc(54,3)), expr.LitE(152, Loc(54,23)), Loc(54,3)),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(55,22)), expr.UnaryE(op.UO_ADDROF, expr.VarE("v:main:convs", Loc(55,23)), Loc(55,22)), Loc(55,22)),
            instr.CallI(expr.CallE(expr.FuncE("f:convert_like_real", Loc(55,3)), [expr.VarE("v:main:t.1", Loc(55,22))], Loc(55,3)), Loc(55,3)),
            instr.ReturnI(expr.LitE(0, Loc(56,10))),
        ], # instrSeq end.
      ), # f:main() end. 

    "f:blah":
      obj.Func(
        name = "f:blah",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.ReturnI(expr.LitE(0, Loc(34,19))),
        ], # instrSeq end.
      ), # f:blah() end. 

    "f:convert_like_real":
      obj.Func(
        name = "f:convert_like_real",
        paramNames = ["v:convert_like_real:convs"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:convert_like_real:t.1", Loc(38,29)), expr.MemberE("code", expr.MemberE("common", expr.VarE("v:convert_like_real:convs", Loc(38,30)), Loc(38,29)), Loc(38,29)), Loc(38,29)),
            instr.AssignI(expr.VarE("v:convert_like_real:t.2", ), expr.CastE(expr.VarE("v:convert_like_real:t.1", Loc(38,29)), types.Int32, Loc(38,12)), ),
            instr.LabelI("CaseCond1-0"),
            instr.AssignI(expr.VarE("v:convert_like_real:t.3", Loc(40,5)), expr.BinaryE(expr.VarE("v:convert_like_real:t.2", ), op.BO_EQ, expr.LitE(152, Loc(40,10)), Loc(40,5)), Loc(40,5)),
            instr.CondI(expr.VarE("v:convert_like_real:t.3", Loc(40,5)), "CaseBody1-0", "Default1", Loc(40,5)),
            instr.LabelI("CaseBody1-0"),
            instr.AssignI(expr.VarE("v:convert_like_real:t.4", Loc(43,14)), expr.CallE(expr.FuncE("f:blah", Loc(43,14)), Loc(43,14)), Loc(43,14)),
            instr.ReturnI(expr.VarE("v:convert_like_real:t.4", Loc(43,14))),
            instr.LabelI("CaseCond1-1"),
            instr.LabelI("Default1"),
            instr.GotoI("SwitchExit1"),
            instr.LabelI("SwitchExit1"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(47,4)), [expr.LitE("""unsigned enum bit-fields broken
""", Loc(47,11))], Loc(47,4)), Loc(47,4)),
        ], # instrSeq end.
      ), # f:convert_like_real() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
