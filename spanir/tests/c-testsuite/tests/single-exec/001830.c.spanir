
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "001830.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.1": types.Int32,
    "v:main:Count": types.Int32,
    "v:printf:__format": types.Ptr(to=types.Int8),
  }, # end allVars dict

  allObjs = {

    "f:printf":
      obj.Func(
        name = "f:printf",
        paramNames = ["v:printf:__format"],
        variadic = True,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
        }, # basicBlocks end.

        bbEdges= {
        }, # bbEdges end
      ), # f:printf() end. 

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          8: [
            instr.AssignI(expr.VarE("v:main:Count", Loc(7,9)), expr.LitE(0, Loc(7,17)), Loc(7,9)),
          ],

          7: [
            instr.AssignI(expr.VarE("v:main:t.1", Loc(7,20)), expr.BinaryE(expr.VarE("v:main:Count", Loc(7,20)), op.BO_LT, expr.LitE(10, Loc(7,28))), Loc(7,20)),
            instr.CondI(expr.VarE("v:main:t.1", Loc(7,20)), Loc(7,4)),
          ],

          6: [
            instr.NopI(),
          ],

          1: [
            instr.ReturnI(expr.LitE(0, Loc(12,11)), Loc(12,4)),
          ],

          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

          2: [
            instr.AssignI(expr.VarE("v:main:Count", Loc(7,32)), expr.BinaryE(expr.VarE("v:main:Count", Loc(7,32)), op.BO_ADD, expr.LitE(1, Loc(7,32)), Loc(7,32)), Loc(7,32)),
          ],

          3: [
            instr.CallI(expr.CallE(NullStmt, [NullStmt, ERROR:convertExpr], Loc(9,7))),
          ],

          4: [
            instr.NopI(),
          ],

          5: [
            instr.NopI(),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 7, types.UnCondEdge),
          (3, 2, types.UnCondEdge),
          (4, 3, types.UnCondEdge),
          (5, 3, types.UnCondEdge),
          (6, 4, types.UnCondEdge),
          (6, 5, types.UnCondEdge),
          (7, 6, types.TrueEdge),
          (7, 1, types.FalseEdge),
          (8, 7, types.UnCondEdge),
          (-1, 8, types.UnCondEdge),
        }, # bbEdges end
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
