
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "002050.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.14": types.Int32,
    "v:main:t.4": types.Int32,
    "v:main:t.3": types.Int32,
    "v:main:t.8": types.Struct("s:1"),
    "v:main:j": types.Int32,
    "v:main:t.1": types.Int32,
    "v:main:t.2": types.Int32,
    "": ,
    "v:main:t.5": types.Struct("s:1"),
    "v:main:t.6": types.Int32,
    "v:main:t.7": types.Int32,
    "v:main:t.9": types.Int32,
    "v:main:t.10": types.Struct("s:1"),
    "v:main:t.11": types.Int32,
    "v:main:t.12": types.Struct("s:1"),
    "v:main:i": types.Int32,
    "v:main:t.13": types.Int32,
  }, # end allVars dict

  allObjs = {
    "s:1":
      types.Struct(
        name = "s:1",
        fields = [
          ("c", types.ConstSizeArray(of=types.Int32, size=4)),
          ("b", types.Int32),
          ("e", types.Int32),
          ("k", types.Int32),
        ],
        loc = Loc(6,9),
      ),


    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:main:j", Loc(23,9)), expr.LitE(0, Loc(23,11)), Loc(23,9)),
            instr.LabelI("ForCond1"),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(23,18)), expr.BinaryE(, op.BO_DIV, , Loc(23,18)), Loc(23,18)),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(23,14)), expr.BinaryE(expr.VarE("v:main:j", Loc(23,14)), op.BO_LT, expr.VarE("v:main:t.1", Loc(23,18)), Loc(23,14)), Loc(23,14)),
            instr.CondI(expr.VarE("v:main:t.2", Loc(23,14)), "ForBody1", "ForExit1", Loc(23,14)),
            instr.LabelI("ForBody1"),
            instr.AssignI(expr.VarE("v:main:i", Loc(24,6)), expr.LitE(0, Loc(24,8)), Loc(24,6)),
            instr.LabelI("ForCond2"),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(24,15)), expr.BinaryE(, op.BO_DIV, , Loc(24,15)), Loc(24,15)),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(24,11)), expr.BinaryE(expr.VarE("v:main:i", Loc(24,11)), op.BO_LT, expr.VarE("v:main:t.3", Loc(24,15)), Loc(24,11)), Loc(24,11)),
            instr.CondI(expr.VarE("v:main:t.4", Loc(24,11)), "ForBody2", "ForExit2", Loc(24,11)),
            instr.LabelI("ForBody2"),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(25,44)), expr.ArrayE(expr.VarE("v:main:j", Loc(25,50)), expr.VarE("", Loc(25,44)), Loc(25,44)), Loc(25,44)),
            instr.AssignI(expr.VarE("v:main:t.6", Loc(25,44)), expr.ArrayE(expr.VarE("v:main:i", Loc(25,55)), expr.MemberE("c", expr.VarE("v:main:t.5", Loc(25,44)), Loc(25,44)), Loc(25,44)), Loc(25,44)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(25,6)), [expr.LitE("""cases[%d].c[%d]=%ld
""", Loc(25,13)), expr.VarE("v:main:j", Loc(25,38)), expr.VarE("v:main:i", Loc(25,41)), expr.VarE("v:main:t.6", Loc(25,44))], Loc(25,6)), Loc(25,6)),
            instr.AssignI(expr.VarE("v:main:t.7", Loc(24,53)), expr.VarE("v:main:i", Loc(24,53)), Loc(24,53)),
            instr.AssignI(expr.VarE("v:main:i", Loc(24,53)), expr.BinaryE(expr.VarE("v:main:i", Loc(24,53)), op.BO_ADD, expr.LitE(1, Loc(24,53)), Loc(24,53)), Loc(24,53)),
            instr.GotoI("ForCond2"),
            instr.LabelI("ForExit2"),
            instr.AssignI(expr.VarE("v:main:t.8", Loc(27,33)), expr.ArrayE(expr.VarE("v:main:j", Loc(27,39)), expr.VarE("", Loc(27,33)), Loc(27,33)), Loc(27,33)),
            instr.AssignI(expr.VarE("v:main:t.9", Loc(27,33)), expr.MemberE("b", expr.VarE("v:main:t.8", Loc(27,33)), Loc(27,33)), Loc(27,33)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(27,2)), [expr.LitE("""cases[%d].b=%ld
""", Loc(27,9)), expr.VarE("v:main:j", Loc(27,30)), expr.VarE("v:main:t.9", Loc(27,33))], Loc(27,2)), Loc(27,2)),
            instr.AssignI(expr.VarE("v:main:t.10", Loc(28,33)), expr.ArrayE(expr.VarE("v:main:j", Loc(28,39)), expr.VarE("", Loc(28,33)), Loc(28,33)), Loc(28,33)),
            instr.AssignI(expr.VarE("v:main:t.11", Loc(28,33)), expr.MemberE("e", expr.VarE("v:main:t.10", Loc(28,33)), Loc(28,33)), Loc(28,33)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(28,2)), [expr.LitE("""cases[%d].e=%ld
""", Loc(28,9)), expr.VarE("v:main:j", Loc(28,30)), expr.VarE("v:main:t.11", Loc(28,33))], Loc(28,2)), Loc(28,2)),
            instr.AssignI(expr.VarE("v:main:t.12", Loc(29,33)), expr.ArrayE(expr.VarE("v:main:j", Loc(29,39)), expr.VarE("", Loc(29,33)), Loc(29,33)), Loc(29,33)),
            instr.AssignI(expr.VarE("v:main:t.13", Loc(29,33)), expr.MemberE("k", expr.VarE("v:main:t.12", Loc(29,33)), Loc(29,33)), Loc(29,33)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(29,2)), [expr.LitE("""cases[%d].k=%ld
""", Loc(29,9)), expr.VarE("v:main:j", Loc(29,30)), expr.VarE("v:main:t.13", Loc(29,33))], Loc(29,2)), Loc(29,2)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(30,2)), [expr.LitE("""
""", Loc(30,9))], Loc(30,2)), Loc(30,2)),
            instr.AssignI(expr.VarE("v:main:t.14", Loc(23,50)), expr.VarE("v:main:j", Loc(23,50)), Loc(23,50)),
            instr.AssignI(expr.VarE("v:main:j", Loc(23,50)), expr.BinaryE(expr.VarE("v:main:j", Loc(23,50)), op.BO_ADD, expr.LitE(1, Loc(23,50)), Loc(23,50)), Loc(23,50)),
            instr.GotoI("ForCond1"),
            instr.LabelI("ForExit1"),
            instr.ReturnI(expr.LitE(0, Loc(32,12))),
        ], # instrSeq end.
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
