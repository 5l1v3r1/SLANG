
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "001700.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.2": types.UInt32,
    "v:printf:__format": types.Ptr(to=types.Int8),
    "v:main:epos": types.Int32,
    "v:should_compile:s": types.Ptr(to=types.Struct("s:S2")),
    "v:deref_uintptr:p": types.Ptr(to=types.UInt32),
    "v:main:t.1": types.Ptr(to=types.Int32),
    "v:main:frod": types.Int32,
  }, # end allVars dict

  allObjs = {
    "s:S2":
      types.Struct(
        name = "s:S2",
        fields = [
          ("f2", types.Ptr(to=types.FuncSig(returnType=types.Int32, paramTypes=[]))),
        ],
        loc = Loc(32,1),
      ),


    "f:printf":
      obj.Func(
        name = "f:printf",
        paramNames = ["v:printf:__format"],
        variadic = True,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
        }, # basicBlocks end.

        bbEdges= {
        }, # bbEdges end
      ), # f:printf() end. 

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          1: [
            instr.AssignI(expr.VarE("v:main:epos", Loc(57,4)), expr.LitE(1, Loc(57,26)), Loc(57,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(59,4)), [expr.LitE("""%d %d %d %d %d %d %d %d
""", Loc(59,11)), expr.LitE(0, Loc(59,40)), expr.LitE(1, Loc(59,43)), expr.LitE(2, Loc(59,46)), expr.LitE(3, Loc(59,49)), expr.LitE(54, Loc(59,52)), expr.LitE(73, Loc(59,55)), expr.LitE(74, Loc(59,58)), expr.LitE(75, Loc(59,61))], Loc(59,4))),
            instr.AssignI(expr.VarE("v:main:frod", Loc(61,4)), expr.LitE(12, Loc(61,11)), Loc(61,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(62,4)), [expr.LitE("""%d
""", Loc(62,11)), expr.VarE("v:main:frod", Loc(62,19))], Loc(62,4))),
            instr.AssignI(expr.VarE("v:main:frod", Loc(63,4)), expr.LitE(54, Loc(63,11)), Loc(63,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(64,4)), [expr.LitE("""%d
""", Loc(64,11)), expr.VarE("v:main:frod", Loc(64,19))], Loc(64,4))),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(67,47)), expr.UnaryE(op.UO_ADDROF, expr.VarE("v:main:epos", Loc(67,48)), Loc(67,47)), Loc(67,47)),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(67,33)), expr.CallE(expr.FuncE("f:deref_uintptr", Loc(67,33)), [expr.VarE("v:main:t.1", Loc(67,47))], Loc(67,33)), Loc(67,33)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(67,4)), [expr.LitE("""enum to int: %u
""", Loc(67,12)), expr.VarE("v:main:t.2", Loc(67,33))], Loc(67,4))),
            instr.ReturnI(expr.LitE(0, Loc(69,11)), Loc(69,4)),
          ],

          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (-1, 1, types.UnCondEdge),
        }, # bbEdges end
      ), # f:main() end. 

    "f:should_compile":
      obj.Func(
        name = "f:should_compile",
        paramNames = ["v:should_compile:s"],
        variadic = False,
        returnType = types.Void,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          1: [
            instr.AssignI(expr.MemberE(expr.VarE("v:should_compile:s", Loc(37,3)), ["f2"], Loc(37,3)), expr.FuncE("f:it_real_fn", Loc(37,11)), Loc(37,3)),
          ],

          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (-1, 1, types.UnCondEdge),
        }, # bbEdges end
      ), # f:should_compile() end. 

    "f:it_real_fn":
      obj.Func(
        name = "f:it_real_fn",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
        }, # basicBlocks end.

        bbEdges= {
        }, # bbEdges end
      ), # f:it_real_fn() end. 

    "f:deref_uintptr":
      obj.Func(
        name = "f:deref_uintptr",
        paramNames = ["v:deref_uintptr:p"],
        variadic = False,
        returnType = types.UInt32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          1: [
            instr.AssignI(expr.VarE("v:deref_uintptr:t.1", Loc(47,10)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:deref_uintptr:p", Loc(47,11)), Loc(47,10)), Loc(47,10)),
            instr.ReturnI(expr.VarE("v:deref_uintptr:t.1", Loc(47,10)), Loc(47,3)),
          ],

          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (-1, 1, types.UnCondEdge),
        }, # bbEdges end
      ), # f:deref_uintptr() end. 

    "f:it_real_fn":
      obj.Func(
        name = "f:it_real_fn",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          1: [
            instr.ReturnI(expr.LitE(1, Loc(42,10)), Loc(42,3)),
          ],

          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (-1, 1, types.UnCondEdge),
        }, # bbEdges end
      ), # f:it_real_fn() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
