
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "000430.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.6": types.Int32,
    "v:main:t.1": types.Int32,
    "v:main:v": types.Struct("s:s"),
    "v:main:t.2": types.Int32,
    "v:main:t.3": types.Int32,
    "v:main:t.4": types.Int32,
    "v:main:t.5": types.Int32,
  }, # end allVars dict

  allObjs = {
    "s:1":
      types.Struct(
        name = "s:1",
        fields = [
          ("y", types.Int32),
          ("z", types.Int32),
        ],
        loc = Loc(3,5),
      ),

    "s:s":
      types.Struct(
        name = "s:s",
        fields = [
          ("x", types.Int32),
          ("nest", types.Struct("s:1")),
        ],
        loc = Loc(1,1),
      ),


    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          3: [
            instr.AssignI(expr.MemberE(expr.VarE("v:main:v", Loc(12,5)), ["x"], Loc(12,5)), expr.LitE(1, Loc(12,11)), Loc(12,5)),
            instr.AssignI(expr.MemberE(expr.VarE("v:main:v", Loc(13,5)), ["nest", "y"], Loc(13,5)), expr.LitE(2, Loc(13,16)), Loc(13,5)),
            instr.AssignI(expr.MemberE(expr.VarE("v:main:v", Loc(14,5)), ["nest", "z"], Loc(14,5)), expr.LitE(3, Loc(14,16)), Loc(14,5)),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(15,9)), expr.MemberE(expr.VarE("v:main:v", Loc(15,9)), ["x"], Loc(15,9)), Loc(15,9)),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(15,15)), expr.MemberE(expr.VarE("v:main:v", Loc(15,15)), ["nest", "y"], Loc(15,15)), Loc(15,15)),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(15,9)), expr.BinaryE(expr.VarE("v:main:t.3", Loc(15,9)), op.BO_ADD, expr.VarE("v:main:t.2", Loc(15,15))), Loc(15,9)),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(15,26)), expr.MemberE(expr.VarE("v:main:v", Loc(15,26)), ["nest", "z"], Loc(15,26)), Loc(15,26)),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(15,9)), expr.BinaryE(expr.VarE("v:main:t.4", Loc(15,9)), op.BO_ADD, expr.VarE("v:main:t.1", Loc(15,26))), Loc(15,9)),
            instr.AssignI(expr.VarE("v:main:t.6", Loc(15,9)), expr.BinaryE(expr.VarE("v:main:t.5", Loc(15,9)), op.BO_NE, expr.LitE(6, Loc(15,38))), Loc(15,9)),
            instr.CondI(expr.VarE("v:main:t.6", Loc(15,9)), Loc(15,5)),
          ],

          2: [
            instr.ReturnI(expr.LitE(1, Loc(16,16)), Loc(16,9)),
          ],

          0: [
            instr.NopI(),
          ],

          -1: [
            instr.NopI(),
          ],

          1: [
            instr.ReturnI(expr.LitE(0, Loc(17,12)), Loc(17,5)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 0, types.UnCondEdge),
          (3, 2, types.TrueEdge),
          (3, 1, types.FalseEdge),
          (-1, 3, types.UnCondEdge),
        }, # bbEdges end
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
