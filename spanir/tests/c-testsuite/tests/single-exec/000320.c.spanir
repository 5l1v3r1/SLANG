
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "000320.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.18": types.Int32,
    "v:main:t.17": types.Int32,
    "v:main:t.16": types.Ptr(to=types.Int32),
    "v:main:t.15": types.Int32,
    "v:main:t.2": types.Int32,
    "v:main:t.3": types.Int32,
    "v:main:p": types.Ptr(to=types.Int32),
    "v:main:t.1": types.Ptr(to=types.Int32),
    "v:main:arr": types.ConstSizeArray(of=types.Int32, dim=2),
    "v:main:t.14": types.Int32,
    "v:main:t.4": types.Ptr(to=types.Int32),
    "v:main:t.5": types.Int32,
    "v:main:t.6": types.Int32,
    "v:main:t.7": types.Ptr(to=types.Int32),
    "v:main:t.8": types.Int32,
    "v:main:t.9": types.Int32,
    "v:main:t.10": types.Ptr(to=types.Int32),
    "v:main:t.11": types.Int32,
    "v:main:t.12": types.Int32,
    "v:main:t.13": types.Ptr(to=types.Int32),
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          13: [
            instr.AssignI(expr.ArrayE(expr.VarE("v:main:arr", Loc(7,2)), [expr.LitE(0, Loc(7,6))], Loc(7,2)), expr.LitE(2, Loc(7,11)), Loc(7,2)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:main:arr", Loc(8,2)), [expr.LitE(1, Loc(8,6))], Loc(8,2)), expr.LitE(3, Loc(8,11)), Loc(8,2)),
            instr.AssignI(expr.VarE("v:main:p", Loc(9,2)), expr.UnaryE(op.UO_ADDROF, expr.ArrayE(expr.VarE("v:main:arr", Loc(9,7)), [expr.LitE(0, Loc(9,11))], Loc(9,7)), Loc(9,6)), Loc(9,2)),
            instr.AssignI(expr.VarE("v:main:t.16", Loc(10,7)), expr.VarE("v:main:p", Loc(10,7)), Loc(10,7)),
            instr.AssignI(expr.VarE("v:main:p", Loc(10,7)), expr.BinaryE(expr.VarE("v:main:p", Loc(10,7)), op.BO_ADD, expr.LitE(1, Loc(10,7)), Loc(10,7)), Loc(10,7)),
            instr.AssignI(expr.VarE("v:main:t.17", Loc(10,5)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.16", Loc(10,7)), Loc(10,5)), Loc(10,5)),
            instr.AssignI(expr.VarE("v:main:t.18", Loc(10,5)), expr.BinaryE(expr.VarE("v:main:t.17", Loc(10,5)), op.BO_NE, expr.LitE(2, Loc(10,15))), Loc(10,5)),
            instr.CondI(expr.VarE("v:main:t.18", Loc(10,5)), Loc(10,2)),
          ],

          12: [
            instr.ReturnI(expr.LitE(1, Loc(11,10)), Loc(11,3)),
          ],

          11: [
            instr.AssignI(expr.VarE("v:main:t.13", Loc(12,7)), expr.VarE("v:main:p", Loc(12,7)), Loc(12,7)),
            instr.AssignI(expr.VarE("v:main:p", Loc(12,7)), expr.BinaryE(expr.VarE("v:main:p", Loc(12,7)), op.BO_ADD, expr.LitE(1, Loc(12,7)), Loc(12,7)), Loc(12,7)),
            instr.AssignI(expr.VarE("v:main:t.14", Loc(12,5)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.13", Loc(12,7)), Loc(12,5)), Loc(12,5)),
            instr.AssignI(expr.VarE("v:main:t.15", Loc(12,5)), expr.BinaryE(expr.VarE("v:main:t.14", Loc(12,5)), op.BO_NE, expr.LitE(3, Loc(12,15))), Loc(12,5)),
            instr.CondI(expr.VarE("v:main:t.15", Loc(12,5)), Loc(12,2)),
          ],

          10: [
            instr.ReturnI(expr.LitE(2, Loc(13,10)), Loc(13,3)),
          ],

          9: [
            instr.AssignI(expr.VarE("v:main:p", Loc(15,2)), expr.UnaryE(op.UO_ADDROF, expr.ArrayE(expr.VarE("v:main:arr", Loc(15,7)), [expr.LitE(1, Loc(15,11))], Loc(15,7)), Loc(15,6)), Loc(15,2)),
            instr.AssignI(expr.VarE("v:main:t.10", Loc(16,7)), expr.VarE("v:main:p", Loc(16,7)), Loc(16,7)),
            instr.AssignI(expr.VarE("v:main:p", Loc(16,7)), expr.BinaryE(expr.VarE("v:main:p", Loc(16,7)), op.BO_SUB, expr.LitE(1, Loc(16,7)), Loc(16,7)), Loc(16,7)),
            instr.AssignI(expr.VarE("v:main:t.11", Loc(16,5)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.10", Loc(16,7)), Loc(16,5)), Loc(16,5)),
            instr.AssignI(expr.VarE("v:main:t.12", Loc(16,5)), expr.BinaryE(expr.VarE("v:main:t.11", Loc(16,5)), op.BO_NE, expr.LitE(3, Loc(16,15))), Loc(16,5)),
            instr.CondI(expr.VarE("v:main:t.12", Loc(16,5)), Loc(16,2)),
          ],

          8: [
            instr.ReturnI(expr.LitE(1, Loc(17,10)), Loc(17,3)),
          ],

          7: [
            instr.AssignI(expr.VarE("v:main:t.7", Loc(18,7)), expr.VarE("v:main:p", Loc(18,7)), Loc(18,7)),
            instr.AssignI(expr.VarE("v:main:p", Loc(18,7)), expr.BinaryE(expr.VarE("v:main:p", Loc(18,7)), op.BO_SUB, expr.LitE(1, Loc(18,7)), Loc(18,7)), Loc(18,7)),
            instr.AssignI(expr.VarE("v:main:t.8", Loc(18,5)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.7", Loc(18,7)), Loc(18,5)), Loc(18,5)),
            instr.AssignI(expr.VarE("v:main:t.9", Loc(18,5)), expr.BinaryE(expr.VarE("v:main:t.8", Loc(18,5)), op.BO_NE, expr.LitE(2, Loc(18,15))), Loc(18,5)),
            instr.CondI(expr.VarE("v:main:t.9", Loc(18,5)), Loc(18,2)),
          ],

          6: [
            instr.ReturnI(expr.LitE(2, Loc(19,10)), Loc(19,3)),
          ],

          1: [
            instr.ReturnI(expr.LitE(0, Loc(29,9)), Loc(29,2)),
          ],

          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

          2: [
            instr.ReturnI(expr.LitE(1, Loc(27,10)), Loc(27,3)),
          ],

          3: [
            instr.AssignI(expr.VarE("v:main:p", Loc(25,2)), expr.UnaryE(op.UO_ADDROF, expr.ArrayE(expr.VarE("v:main:arr", Loc(25,7)), [expr.LitE(1, Loc(25,11))], Loc(25,7)), Loc(25,6)), Loc(25,2)),
            instr.AssignI(expr.VarE("v:main:p", Loc(26,9)), expr.BinaryE(expr.VarE("v:main:p", Loc(26,9)), op.BO_SUB, expr.LitE(1), Loc(26,7)), Loc(26,7)),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(26,5)), expr.VarE("v:main:p", Loc(26,9)), Loc(26,5)),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(26,5)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.1", Loc(26,5)), Loc(26,5)), Loc(26,5)),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(26,5)), expr.BinaryE(expr.VarE("v:main:t.2", Loc(26,5)), op.BO_NE, expr.LitE(2, Loc(26,15))), Loc(26,5)),
            instr.CondI(expr.VarE("v:main:t.3", Loc(26,5)), Loc(26,2)),
          ],

          4: [
            instr.ReturnI(expr.LitE(1, Loc(23,10)), Loc(23,3)),
          ],

          5: [
            instr.AssignI(expr.VarE("v:main:p", Loc(21,2)), expr.UnaryE(op.UO_ADDROF, expr.ArrayE(expr.VarE("v:main:arr", Loc(21,7)), [expr.LitE(0, Loc(21,11))], Loc(21,7)), Loc(21,6)), Loc(21,2)),
            instr.AssignI(expr.VarE("v:main:p", Loc(22,9)), expr.BinaryE(expr.VarE("v:main:p", Loc(22,9)), op.BO_ADD, expr.LitE(1), Loc(22,7)), Loc(22,7)),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(22,5)), expr.VarE("v:main:p", Loc(22,9)), Loc(22,5)),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(22,5)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.4", Loc(22,5)), Loc(22,5)), Loc(22,5)),
            instr.AssignI(expr.VarE("v:main:t.6", Loc(22,5)), expr.BinaryE(expr.VarE("v:main:t.5", Loc(22,5)), op.BO_NE, expr.LitE(3, Loc(22,15))), Loc(22,5)),
            instr.CondI(expr.VarE("v:main:t.6", Loc(22,5)), Loc(22,2)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 0, types.UnCondEdge),
          (3, 2, types.TrueEdge),
          (3, 1, types.FalseEdge),
          (4, 0, types.UnCondEdge),
          (5, 4, types.TrueEdge),
          (5, 3, types.FalseEdge),
          (6, 0, types.UnCondEdge),
          (7, 6, types.TrueEdge),
          (7, 5, types.FalseEdge),
          (8, 0, types.UnCondEdge),
          (9, 8, types.TrueEdge),
          (9, 7, types.FalseEdge),
          (10, 0, types.UnCondEdge),
          (11, 10, types.TrueEdge),
          (11, 9, types.FalseEdge),
          (12, 0, types.UnCondEdge),
          (13, 12, types.TrueEdge),
          (13, 11, types.FalseEdge),
          (-1, 13, types.UnCondEdge),
        }, # bbEdges end
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
