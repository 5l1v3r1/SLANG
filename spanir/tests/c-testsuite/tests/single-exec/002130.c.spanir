
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "002130.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.10": types.Int32,
    "v:main:t.9": types.Int32,
    "v:main:t.6": types.Int32,
    "v:main:t.5": types.Int32,
    "v:main:t.4": types.Int32,
    "v:main:t.1": types.Int32,
    "v:main:t.8": types.Int32,
    "v:foo:i": types.Int32,
    "v:kb_wait_1:timeout": types.UInt32,
    "v:main:t.2": types.Int32,
    "v:main:t.7": types.Int32,
    "": ,
    "v:main:t.3": types.Int32,
    "v:main:i": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:check":
      obj.Func(
        name = "f:check",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(40,3)), [expr.LitE("""check %d
""", Loc(40,11)), expr.VarE("", Loc(40,25))], Loc(40,3)), Loc(40,3)),
            instr.ReturnI(expr.LitE(1, Loc(41,10))),
        ], # instrSeq end.
      ), # f:check() end. 

    "f:dowhile":
      obj.Func(
        name = "f:dowhile",
        paramNames = [],
        variadic = False,
        returnType = types.Void,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.LabelI("DoEntry2"),
            instr.CallI(expr.CallE(expr.FuncE("f:foo", Loc(47,7)), [expr.LitE(1, Loc(47,11))], Loc(47,7)), Loc(47,7)),
            instr.AssignI(expr.VarE("v:dowhile:t.1", Loc(48,11)), expr.BinaryE(expr.VarE("", Loc(48,11)), op.BO_EQ, expr.LitE(1, Loc(48,21)), Loc(48,11)), Loc(48,11)),
            instr.CondI(expr.VarE("v:dowhile:t.1", Loc(48,11)), "IfTrue3", "IfFalse3", Loc(48,11)),
            instr.LabelI("IfTrue3"),
            instr.GotoI("DoCond2"),
            instr.GotoI("IfExit3"),
            instr.LabelI("IfFalse3"),
            instr.AssignI(expr.VarE("v:dowhile:t.2", Loc(50,18)), expr.BinaryE(expr.VarE("", Loc(50,18)), op.BO_EQ, expr.LitE(2, Loc(50,28)), Loc(50,18)), Loc(50,18)),
            instr.CondI(expr.VarE("v:dowhile:t.2", Loc(50,18)), "IfTrue4", "IfFalse4", Loc(50,18)),
            instr.LabelI("IfTrue4"),
            instr.GotoI("DoCond2"),
            instr.GotoI("IfExit4"),
            instr.LabelI("IfFalse4"),
            instr.LabelI("IfExit4"),
            instr.LabelI("IfExit3"),
            instr.GotoI("DoExit2"),
            instr.LabelI("DoCond2"),
            instr.CallI(expr.CallE(expr.FuncE("f:check", Loc(56,12)), Loc(56,12)), Loc(56,12)),
            instr.CondI(, "DoEntry2", "DoExit2", Loc(56,12)),
            instr.LabelI("DoExit2"),
        ], # instrSeq end.
      ), # f:dowhile() end. 

    "f:kb_wait_1":
      obj.Func(
        name = "f:kb_wait_1",
        paramNames = [],
        variadic = False,
        returnType = types.Void,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:kb_wait_1:timeout", Loc(7,3)), expr.LitE(2, Loc(7,27)), Loc(7,3)),
            instr.LabelI("DoEntry1"),
            instr.AssignI(expr.VarE("v:kb_wait_1:t.1", Loc(16,8)), expr.CallE(expr.FuncE("f:printf", Loc(16,8)), [expr.LitE("""timeout=%ld
""", Loc(16,15)), expr.VarE("v:kb_wait_1:timeout", Loc(16,32))], Loc(16,8)), Loc(16,8)),
            instr.AssignI(expr.VarE("v:kb_wait_1:t.2", Loc(26,7)), expr.VarE("v:kb_wait_1:timeout", Loc(26,7)), Loc(26,7)),
            instr.AssignI(expr.VarE("v:kb_wait_1:timeout", Loc(26,7)), expr.BinaryE(expr.VarE("v:kb_wait_1:timeout", Loc(26,7)), op.BO_SUB, expr.LitE(1, Loc(26,7)), Loc(26,7)), Loc(26,7)),
            instr.LabelI("DoCond1"),
            instr.CondI(expr.VarE("v:kb_wait_1:timeout", Loc(27,12)), "DoEntry1", "DoExit1", Loc(27,12)),
            instr.LabelI("DoExit1"),
        ], # instrSeq end.
      ), # f:kb_wait_1() end. 

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:main:i", Loc(61,3)), expr.LitE(1, Loc(61,11)), Loc(61,3)),
            instr.CallI(expr.CallE(expr.FuncE("f:kb_wait_1", Loc(62,3)), Loc(62,3)), Loc(62,3)),
            instr.CondI(expr.LitE(0, Loc(65,7)), "IfTrue5", "IfFalse5", Loc(65,7)),
            instr.LabelI("IfTrue5"),
            instr.LabelI("yeah", Loc(66,1)),
            instr.GotoI("IfExit5"),
            instr.LabelI("IfFalse5"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(69,7)), [expr.LitE("""boo
""", Loc(69,15))], Loc(69,7)), Loc(69,7)),
            instr.LabelI("IfExit5"),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(71,7)), expr.VarE("v:main:i", Loc(71,7)), Loc(71,7)),
            instr.AssignI(expr.VarE("v:main:i", Loc(71,7)), expr.BinaryE(expr.VarE("v:main:i", Loc(71,7)), op.BO_SUB, expr.LitE(1, Loc(71,7)), Loc(71,7)), Loc(71,7)),
            instr.CondI(expr.VarE("v:main:t.1", Loc(71,7)), "IfTrue6", "IfFalse6", Loc(71,7)),
            instr.LabelI("IfTrue6"),
            instr.GotoI("yeah"),
            instr.GotoI("IfExit6"),
            instr.LabelI("IfFalse6"),
            instr.LabelI("IfExit6"),
            instr.AssignI(expr.VarE("v:main:i", Loc(76,3)), expr.LitE(1, Loc(76,7)), Loc(76,3)),
            instr.CondI(expr.LitE(0, Loc(77,7)), "IfTrue7", "IfFalse7", Loc(77,7)),
            instr.LabelI("IfTrue7"),
            instr.LabelI("WhileCond8"),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(78,14)), expr.VarE("v:main:i", Loc(78,14)), Loc(78,14)),
            instr.AssignI(expr.VarE("v:main:i", Loc(78,14)), expr.BinaryE(expr.VarE("v:main:i", Loc(78,14)), op.BO_SUB, expr.LitE(1, Loc(78,14)), Loc(78,14)), Loc(78,14)),
            instr.CondI(expr.VarE("v:main:t.2", Loc(78,14)), "WhileBody8", "WhileExit8", Loc(78,14)),
            instr.LabelI("WhileBody8"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(79,4)), [expr.LitE("""once
""", Loc(79,12))], Loc(79,4)), Loc(79,4)),
            instr.LabelI("enterloop", Loc(80,1)),
            instr.GotoI("WhileCond8"),
            instr.LabelI("WhileExit8"),
            instr.GotoI("IfExit7"),
            instr.LabelI("IfFalse7"),
            instr.LabelI("IfExit7"),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(84,7)), expr.BinaryE(expr.VarE("v:main:i", Loc(84,7)), op.BO_GE, expr.LitE(0, Loc(84,12)), Loc(84,7)), Loc(84,7)),
            instr.CondI(expr.VarE("v:main:t.3", Loc(84,7)), "IfTrue9", "IfFalse9", Loc(84,7)),
            instr.LabelI("IfTrue9"),
            instr.GotoI("enterloop"),
            instr.GotoI("IfExit9"),
            instr.LabelI("IfFalse9"),
            instr.LabelI("IfExit9"),
            instr.AssignI(expr.VarE("v:main:i", Loc(91,3)), , Loc(91,3)),
            instr.AssignI(expr.VarE("v:main:i", Loc(105,3)), expr.LitE(1, Loc(105,7)), Loc(105,3)),
            instr.CondI(expr.LitE(0, Loc(106,7)), "IfTrue10", "IfFalse10", Loc(106,7)),
            instr.LabelI("IfTrue10"),
            instr.AssignI(expr.VarE("v:main:i", Loc(107,12)), expr.LitE(1, Loc(107,16)), Loc(107,12)),
            instr.LabelI("ForCond11"),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(107,19)), expr.VarE("v:main:i", Loc(107,19)), Loc(107,19)),
            instr.AssignI(expr.VarE("v:main:i", Loc(107,19)), expr.BinaryE(expr.VarE("v:main:i", Loc(107,19)), op.BO_SUB, expr.LitE(1, Loc(107,19)), Loc(107,19)), Loc(107,19)),
            instr.CondI(expr.VarE("v:main:t.4", Loc(107,19)), "ForBody11", "ForExit11", Loc(107,19)),
            instr.LabelI("ForBody11"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(108,4)), [expr.LitE("""once2
""", Loc(108,12))], Loc(108,4)), Loc(108,4)),
            instr.LabelI("enterloop2", Loc(109,1)),
            instr.GotoI("ForCond11"),
            instr.LabelI("ForExit11"),
            instr.GotoI("IfExit10"),
            instr.LabelI("IfFalse10"),
            instr.LabelI("IfExit10"),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(113,7)), expr.BinaryE(expr.VarE("v:main:i", Loc(113,7)), op.BO_GT, expr.LitE(0, Loc(113,11)), Loc(113,7)), Loc(113,7)),
            instr.CondI(expr.VarE("v:main:t.5", Loc(113,7)), "IfTrue12", "IfFalse12", Loc(113,7)),
            instr.LabelI("IfTrue12"),
            instr.GotoI("enterloop2"),
            instr.GotoI("IfExit12"),
            instr.LabelI("IfFalse12"),
            instr.LabelI("IfExit12"),
            instr.AssignI(expr.VarE("v:main:i", Loc(116,3)), expr.LitE(1, Loc(116,7)), Loc(116,3)),
            instr.CondI(expr.LitE(0, Loc(117,7)), "IfTrue13", "IfFalse13", Loc(117,7)),
            instr.LabelI("IfTrue13"),
            instr.LabelI("DoEntry14"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(119,4)), [expr.LitE("""once3
""", Loc(119,12))], Loc(119,4)), Loc(119,4)),
            instr.LabelI("enterloop3", Loc(120,1)),
            instr.LabelI("DoCond14"),
            instr.AssignI(expr.VarE("v:main:t.6", Loc(122,16)), expr.VarE("v:main:i", Loc(122,16)), Loc(122,16)),
            instr.AssignI(expr.VarE("v:main:i", Loc(122,16)), expr.BinaryE(expr.VarE("v:main:i", Loc(122,16)), op.BO_SUB, expr.LitE(1, Loc(122,16)), Loc(122,16)), Loc(122,16)),
            instr.CondI(expr.VarE("v:main:t.6", Loc(122,16)), "DoEntry14", "DoExit14", Loc(122,16)),
            instr.LabelI("DoExit14"),
            instr.GotoI("IfExit13"),
            instr.LabelI("IfFalse13"),
            instr.LabelI("IfExit13"),
            instr.AssignI(expr.VarE("v:main:t.7", Loc(124,7)), expr.BinaryE(expr.VarE("v:main:i", Loc(124,7)), op.BO_GT, expr.LitE(0, Loc(124,11)), Loc(124,7)), Loc(124,7)),
            instr.CondI(expr.VarE("v:main:t.7", Loc(124,7)), "IfTrue15", "IfFalse15", Loc(124,7)),
            instr.LabelI("IfTrue15"),
            instr.GotoI("enterloop3"),
            instr.GotoI("IfExit15"),
            instr.LabelI("IfFalse15"),
            instr.LabelI("IfExit15"),
            instr.AssignI(expr.VarE("v:main:i", Loc(129,3)), expr.LitE(41, Loc(129,7)), Loc(129,3)),
            instr.LabelI("CaseCond16-0"),
            instr.AssignI(expr.VarE("v:main:t.8", Loc(133,7)), expr.BinaryE(expr.VarE("v:main:i", Loc(130,11)), op.BO_EQ, expr.LitE(42, Loc(133,12)), Loc(133,7)), Loc(133,7)),
            instr.CondI(expr.VarE("v:main:t.8", Loc(133,7)), "CaseBody16-0", "CaseCond16-1", Loc(133,7)),
            instr.LabelI("CaseBody16-0"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(134,4)), [expr.LitE("""error2
""", Loc(134,12))], Loc(134,4)), Loc(134,4)),
            instr.LabelI("CaseCond16-1"),
            instr.AssignI(expr.VarE("v:main:t.9", Loc(135,7)), expr.BinaryE(expr.VarE("v:main:i", Loc(130,11)), op.BO_EQ, expr.LitE(41, Loc(135,12)), Loc(135,7)), Loc(135,7)),
            instr.CondI(expr.VarE("v:main:t.9", Loc(135,7)), "CaseBody16-1", "Default16", Loc(135,7)),
            instr.LabelI("CaseBody16-1"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(136,4)), [expr.LitE("""caseok
""", Loc(136,12))], Loc(136,4)), Loc(136,4)),
            instr.LabelI("CaseCond16-2"),
            instr.LabelI("Default16"),
            instr.LabelI("SwitchExit16"),
            instr.AssignI(expr.VarE("v:main:i", Loc(140,3)), expr.LitE(41, Loc(140,7)), Loc(140,3)),
            instr.LabelI("CaseCond17-0"),
            instr.AssignI(expr.VarE("v:main:t.10", Loc(147,7)), expr.BinaryE(expr.VarE("v:main:i", Loc(141,11)), op.BO_EQ, expr.LitE(42, Loc(147,12)), Loc(147,7)), Loc(147,7)),
            instr.CondI(expr.VarE("v:main:t.10", Loc(147,7)), "CaseBody17-0", "Default17", Loc(147,7)),
            instr.LabelI("CaseBody17-0"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(148,4)), [expr.LitE("""error4
""", Loc(148,12))], Loc(148,4)), Loc(148,4)),
            instr.LabelI("CaseCond17-1"),
            instr.LabelI("Default17"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(145,4)), [expr.LitE("""caseok2
""", Loc(145,12))], Loc(145,4)), Loc(145,4)),
            instr.LabelI("SwitchExit17"),
            instr.CallI(expr.CallE(expr.FuncE("f:dowhile", Loc(152,3)), Loc(152,3)), Loc(152,3)),
            instr.ReturnI(expr.LitE(0, Loc(154,10))),
        ], # instrSeq end.
      ), # f:main() end. 

    "f:foo":
      obj.Func(
        name = "f:foo",
        paramNames = ["v:foo:i"],
        variadic = False,
        returnType = types.Void,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(35,3)), [expr.LitE("""g=%d
""", Loc(35,11)), expr.VarE("", Loc(35,21))], Loc(35,3)), Loc(35,3)),
        ], # instrSeq end.
      ), # f:foo() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
