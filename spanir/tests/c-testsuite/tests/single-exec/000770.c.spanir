
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "000770.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:x": types.ConstSizeArray(of=types.Int32, dim=100),
    "v:foo:t.8": types.Int32,
    "v:foo:t.7": types.Int32,
    "v:foo:t.6": types.Int32,
    "v:foo:t.5": types.Int32,
    "v:foo:t.4": types.Int32,
    "v:foo:x": types.Ptr(to=types.Int32),
    "v:main:t.1": types.Int32,
    "v:foo:y": types.ConstSizeArray(of=types.Int32, dim=100),
    "v:foo:t.2": types.Ptr(to=types.Int32),
    "v:foo:p": types.Ptr(to=types.Int32),
    "v:foo:t.3": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          0: [
            instr.NopI(),
          ],

          -1: [
            instr.NopI(),
          ],

          1: [
            instr.AssignI(expr.ArrayE(expr.VarE("v:main:x", Loc(45,2)), [expr.LitE(0, Loc(45,4))], Loc(45,2)), expr.LitE(1000, Loc(45,9)), Loc(45,2)),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(47,9)), expr.CallE(expr.FuncE("f:foo", Loc(47,9)), [expr.VarE("v:main:x", Loc(47,13))], Loc(47,9)), Loc(47,9)),
            instr.ReturnI(expr.VarE("v:main:t.1", Loc(47,9)), Loc(47,2)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (-1, 1, types.UnCondEdge),
        }, # bbEdges end
      ), # f:main() end. 

    "f:foo":
      obj.Func(
        name = "f:foo",
        paramNames = ["v:foo:x"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          11: [
            instr.AssignI(expr.ArrayE(expr.VarE("v:foo:y", Loc(7,2)), [expr.LitE(0, Loc(7,4))], Loc(7,2)), expr.LitE(2000, Loc(7,9)), Loc(7,2)),
            instr.AssignI(expr.VarE("v:foo:t.7", Loc(9,5)), expr.ArrayE(expr.VarE("v:foo:x", Loc(9,5)), [expr.LitE(0, Loc(9,7))], Loc(9,5)), Loc(9,5)),
            instr.AssignI(expr.VarE("v:foo:t.8", Loc(9,5)), expr.BinaryE(expr.VarE("v:foo:t.7", Loc(9,5)), op.BO_NE, expr.LitE(1000, Loc(9,13))), Loc(9,5)),
            instr.CondI(expr.VarE("v:foo:t.8", Loc(9,5)), Loc(9,2)),
          ],

          10: [
            instr.ReturnI(expr.LitE(1, Loc(11,10)), Loc(11,3)),
          ],

          9: [
            instr.AssignI(expr.VarE("v:foo:p", Loc(14,2)), expr.VarE("v:foo:x", Loc(14,6)), Loc(14,2)),
            instr.AssignI(expr.VarE("v:foo:t.5", Loc(16,5)), expr.ArrayE(expr.VarE("v:foo:p", Loc(16,5)), [expr.LitE(0, Loc(16,7))], Loc(16,5)), Loc(16,5)),
            instr.AssignI(expr.VarE("v:foo:t.6", Loc(16,5)), expr.BinaryE(expr.VarE("v:foo:t.5", Loc(16,5)), op.BO_NE, expr.LitE(1000, Loc(16,13))), Loc(16,5)),
            instr.CondI(expr.VarE("v:foo:t.6", Loc(16,5)), Loc(16,2)),
          ],

          8: [
            instr.ReturnI(expr.LitE(2, Loc(18,10)), Loc(18,3)),
          ],

          7: [
            instr.AssignI(expr.VarE("v:foo:p", Loc(21,2)), expr.VarE("v:foo:y", Loc(21,6)), Loc(21,2)),
            instr.AssignI(expr.VarE("v:foo:t.3", Loc(23,5)), expr.ArrayE(expr.VarE("v:foo:p", Loc(23,5)), [expr.LitE(0, Loc(23,7))], Loc(23,5)), Loc(23,5)),
            instr.AssignI(expr.VarE("v:foo:t.4", Loc(23,5)), expr.BinaryE(expr.VarE("v:foo:t.3", Loc(23,5)), op.BO_NE, expr.LitE(2000, Loc(23,13))), Loc(23,5)),
            instr.CondI(expr.VarE("v:foo:t.4", Loc(23,5)), Loc(23,2)),
          ],

          6: [
            instr.ReturnI(expr.LitE(3, Loc(25,10)), Loc(25,3)),
          ],

          1: [
            instr.ReturnI(expr.LitE(0, Loc(38,9)), Loc(38,2)),
          ],

          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

          2: [
            instr.ReturnI(expr.LitE(5, Loc(35,10)), Loc(35,3)),
          ],

          3: [
            instr.AssignI(expr.VarE("v:foo:t.1", Loc(33,5)), expr.BinaryE(expr.LitE(400, Loc(33,5)), op.BO_LE, expr.LitE(8, Loc(33,18))), Loc(33,5)),
            instr.CondI(expr.VarE("v:foo:t.1", Loc(33,5)), Loc(33,2)),
          ],

          4: [
            instr.ReturnI(expr.LitE(4, Loc(30,10)), Loc(30,3)),
          ],

          5: [
            instr.AssignI(expr.VarE("v:foo:t.2", Loc(28,5)), expr.BinaryE(expr.LitE(8, Loc(28,5)), op.BO_NE, expr.LitE(8, Loc(28,18))), Loc(28,5)),
            instr.CondI(expr.VarE("v:foo:t.2", Loc(28,5)), Loc(28,2)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 0, types.UnCondEdge),
          (3, 0, types.TrueEdge),
          (3, 1, types.FalseEdge),
          (4, 0, types.UnCondEdge),
          (5, 0, types.TrueEdge),
          (5, 3, types.FalseEdge),
          (6, 0, types.UnCondEdge),
          (7, 6, types.TrueEdge),
          (7, 5, types.FalseEdge),
          (8, 0, types.UnCondEdge),
          (9, 8, types.TrueEdge),
          (9, 7, types.FalseEdge),
          (10, 0, types.UnCondEdge),
          (11, 10, types.TrueEdge),
          (11, 9, types.FalseEdge),
          (-1, 11, types.UnCondEdge),
        }, # bbEdges end
      ), # f:foo() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
