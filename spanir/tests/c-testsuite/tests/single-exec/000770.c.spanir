
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "000770.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:foo:t.8": types.Int32,
    "v:foo:t.7": types.Int32,
    "v:foo:t.6": types.Int32,
    "v:main:x": types.ConstSizeArray(of=types.Int32, size=100),
    "v:foo:t.5": types.Int32,
    "v:foo:t.4": types.Int32,
    "v:foo:y": types.ConstSizeArray(of=types.Int32, size=100),
    "v:foo:t.3": types.Int32,
    "v:foo:x": types.Ptr(to=types.Int32),
    "v:foo:t.2": types.Int32,
    "v:foo:p": types.Ptr(to=types.Int32),
    "v:main:t.1": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.ArrayE(expr.LitE(0, Loc(45,4)), expr.VarE("v:main:x", Loc(45,2)), Loc(45,2)), expr.LitE(1000, Loc(45,9)), Loc(45,2)),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(47,9)), expr.CallE(expr.FuncE("f:foo", Loc(47,9)), [expr.VarE("v:main:x", Loc(47,13))], Loc(47,9)), Loc(47,9)),
            instr.ReturnI(expr.VarE("v:main:t.1", Loc(47,9))),
        ], # instrSeq end.
      ), # f:main() end. 

    "f:foo":
      obj.Func(
        name = "f:foo",
        paramNames = ["v:foo:x"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.ArrayE(expr.LitE(0, Loc(7,4)), expr.VarE("v:foo:y", Loc(7,2)), Loc(7,2)), expr.LitE(2000, Loc(7,9)), Loc(7,2)),
            instr.AssignI(expr.VarE("v:foo:t.1", Loc(9,5)), expr.ArrayE(expr.LitE(0, Loc(9,7)), expr.VarE("v:foo:x", Loc(9,5)), Loc(9,5)), Loc(9,5)),
            instr.AssignI(expr.VarE("v:foo:t.2", Loc(9,5)), expr.BinaryE(expr.VarE("v:foo:t.1", Loc(9,5)), op.BO_NE, expr.LitE(1000, Loc(9,13)), Loc(9,5)), Loc(9,5)),
            instr.CondI(expr.VarE("v:foo:t.2", Loc(9,5)), "IfTrue1", "IfFalse1", Loc(9,5)),
            instr.LabelI("IfTrue1"),
            instr.ReturnI(expr.LitE(1, Loc(11,10))),
            instr.GotoI("IfExit1"),
            instr.LabelI("IfFalse1"),
            instr.LabelI("IfExit1"),
            instr.AssignI(expr.VarE("v:foo:p", Loc(14,2)), expr.VarE("v:foo:x", Loc(14,6)), Loc(14,2)),
            instr.AssignI(expr.VarE("v:foo:t.3", Loc(16,5)), expr.ArrayE(expr.LitE(0, Loc(16,7)), expr.VarE("v:foo:p", Loc(16,5)), Loc(16,5)), Loc(16,5)),
            instr.AssignI(expr.VarE("v:foo:t.4", Loc(16,5)), expr.BinaryE(expr.VarE("v:foo:t.3", Loc(16,5)), op.BO_NE, expr.LitE(1000, Loc(16,13)), Loc(16,5)), Loc(16,5)),
            instr.CondI(expr.VarE("v:foo:t.4", Loc(16,5)), "IfTrue2", "IfFalse2", Loc(16,5)),
            instr.LabelI("IfTrue2"),
            instr.ReturnI(expr.LitE(2, Loc(18,10))),
            instr.GotoI("IfExit2"),
            instr.LabelI("IfFalse2"),
            instr.LabelI("IfExit2"),
            instr.AssignI(expr.VarE("v:foo:p", Loc(21,2)), expr.VarE("v:foo:y", Loc(21,6)), Loc(21,2)),
            instr.AssignI(expr.VarE("v:foo:t.5", Loc(23,5)), expr.ArrayE(expr.LitE(0, Loc(23,7)), expr.VarE("v:foo:p", Loc(23,5)), Loc(23,5)), Loc(23,5)),
            instr.AssignI(expr.VarE("v:foo:t.6", Loc(23,5)), expr.BinaryE(expr.VarE("v:foo:t.5", Loc(23,5)), op.BO_NE, expr.LitE(2000, Loc(23,13)), Loc(23,5)), Loc(23,5)),
            instr.CondI(expr.VarE("v:foo:t.6", Loc(23,5)), "IfTrue3", "IfFalse3", Loc(23,5)),
            instr.LabelI("IfTrue3"),
            instr.ReturnI(expr.LitE(3, Loc(25,10))),
            instr.GotoI("IfExit3"),
            instr.LabelI("IfFalse3"),
            instr.LabelI("IfExit3"),
            instr.AssignI(expr.VarE("v:foo:t.7", Loc(28,5)), expr.BinaryE(, op.BO_NE, , Loc(28,5)), Loc(28,5)),
            instr.CondI(expr.VarE("v:foo:t.7", Loc(28,5)), "IfTrue4", "IfFalse4", Loc(28,5)),
            instr.LabelI("IfTrue4"),
            instr.ReturnI(expr.LitE(4, Loc(30,10))),
            instr.GotoI("IfExit4"),
            instr.LabelI("IfFalse4"),
            instr.LabelI("IfExit4"),
            instr.AssignI(expr.VarE("v:foo:t.8", Loc(33,5)), expr.BinaryE(, op.BO_LE, , Loc(33,5)), Loc(33,5)),
            instr.CondI(expr.VarE("v:foo:t.8", Loc(33,5)), "IfTrue5", "IfFalse5", Loc(33,5)),
            instr.LabelI("IfTrue5"),
            instr.ReturnI(expr.LitE(5, Loc(35,10))),
            instr.GotoI("IfExit5"),
            instr.LabelI("IfFalse5"),
            instr.LabelI("IfExit5"),
            instr.ReturnI(expr.LitE(0, Loc(38,9))),
        ], # instrSeq end.
      ), # f:foo() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
