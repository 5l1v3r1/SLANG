
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "000510.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.7": types.Int,
    "v:main:t.6": types.Int,
    "v:main:t.1": types.Int,
    "v:main:t.2": types.Int,
    "v:main:t.3": types.Int,
    "v:main:t.4": types.Int,
    "v:x": types.Int32,
    "v:main:t.5": types.Int,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          17: [
            instr.NopI(),
          ],

          16: [
            instr.AssignI(expr.VarE("v:main:t.7", Loc(7,3)), expr.BinaryE(expr.VarE("v:x", Loc(6,9)), op.BO_EQ, expr.LitE(111, Loc(7,8)), ), ),
            instr.CondI(expr.VarE("v:main:t.7", Loc(7,3)), ),
          ],

          15: [
            instr.NopI(),
          ],

          4: [
            instr.ReturnI(expr.VarE("v:x", Loc(32,11)), Loc(32,4)),
          ],

          3: [
            instr.ReturnI(expr.LitE(55, Loc(34,11)), Loc(34,4)),
          ],

          2: [
            instr.ReturnI(expr.LitE(66, Loc(36,11)), Loc(36,4)),
          ],

          19: [
            instr.AssignI(expr.VarE("v:main:t.2", Loc(33,3)), expr.BinaryE(expr.VarE("v:x", Loc(30,9)), op.BO_EQ, expr.LitE(333, Loc(31,8)), ), ),
            instr.CondI(expr.VarE("v:main:t.2", Loc(33,3)), ),
          ],

          0: [
            instr.NopI(),
          ],

          1: [
            instr.AssignI(expr.VarE("v:main:t.1", Loc(31,3)), expr.BinaryE(expr.VarE("v:x", Loc(30,9)), op.BO_EQ, expr.LitE(444, Loc(33,8)), ), ),
            instr.CondI(expr.VarE("v:main:t.1", Loc(31,3)), ),
          ],

          5: [
            instr.AssignI(expr.VarE("v:main:t.3", Loc(26,4)), expr.BinaryE(expr.VarE("v:x", Loc(22,9)), op.BO_EQ, expr.LitE(222, Loc(26,9)), ), ),
            instr.CondI(expr.VarE("v:main:t.3", Loc(26,4)), ),
          ],

          6: [
            instr.ReturnI(expr.LitE(44, Loc(27,12)), Loc(27,5)),
          ],

          7: [
            instr.NopI(),
          ],

          8: [
            instr.AssignI(expr.VarE("v:x", Loc(24,4)), expr.BinaryE(expr.LitE(1, Loc(24,8)), op.BO_ADD, expr.LitE(1, Loc(24,12))), Loc(24,4)),
          ],

          9: [
            instr.AssignI(expr.VarE("v:main:t.4", Loc(20,3)), expr.BinaryE(expr.VarE("v:x", Loc(19,9)), op.BO_EQ, expr.LitE(111, Loc(20,8)), ), ),
            instr.CondI(expr.VarE("v:main:t.4", Loc(20,3)), ),
          ],

          10: [
            instr.ReturnI(expr.LitE(33, Loc(21,11)), Loc(21,4)),
          ],

          -1: [
            instr.NopI(),
          ],

          11: [
            instr.ReturnI(expr.LitE(22, Loc(17,9)), Loc(17,2)),
          ],

          12: [
            instr.AssignI(expr.VarE("v:main:t.5", Loc(10,3)), expr.BinaryE(expr.VarE("v:x", Loc(9,9)), op.BO_EQ, expr.LitE(112, Loc(10,8)), ), ),
            instr.CondI(expr.VarE("v:main:t.5", Loc(10,3)), ),
          ],

          13: [
            instr.AssignI(expr.VarE("v:main:t.6", Loc(12,5)), expr.BinaryE(expr.VarE("v:x", Loc(11,11)), op.BO_EQ, expr.LitE(113, Loc(12,10)), ), ),
            instr.CondI(expr.VarE("v:main:t.6", Loc(12,5)), ),
          ],

          14: [
            instr.ReturnI(expr.LitE(11, Loc(15,13)), Loc(15,6)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 3, types.TrueEdge),
          (19, 4, types.TrueEdge),
          (1, 19, types.FalseEdge),
          (19, 2, types.FalseEdge),
          (2, 0, types.UnCondEdge),
          (3, 0, types.UnCondEdge),
          (4, 0, types.UnCondEdge),
          (5, 6, types.TrueEdge),
          (5, 1, types.FalseEdge),
          (6, 0, types.UnCondEdge),
          (7, 6, types.UnCondEdge),
          (8, 7, types.UnCondEdge),
          (9, 10, types.TrueEdge),
          (9, 5, types.FalseEdge),
          (10, 0, types.UnCondEdge),
          (11, 0, types.UnCondEdge),
          (12, 13, types.TrueEdge),
          (12, 11, types.FalseEdge),
          (13, 15, types.TrueEdge),
          (13, 14, types.FalseEdge),
          (14, 0, types.UnCondEdge),
          (15, 9, types.UnCondEdge),
          (16, 17, types.TrueEdge),
          (16, 12, types.FalseEdge),
          (17, 12, types.UnCondEdge),
          (-1, 16, types.UnCondEdge),
        }, # bbEdges end
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
