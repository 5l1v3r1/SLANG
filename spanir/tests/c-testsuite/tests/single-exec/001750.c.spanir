
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "001750.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:f": types.Float32,
    "v:main:e": types.Int32,
    "v:intfunc:a": types.Int32,
    "v:main:g": types.Float32,
    "v:main:d": types.Int32,
    "v:floatfunc:a": types.Float32,
    "v:charfunc:a": types.Int8,
    "v:main:b": types.Int8,
    "v:main:c": types.Int8,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.CallI(expr.CallE(expr.FuncE("f:charfunc", Loc(20,4)), [], Loc(20,4)), Loc(20,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:charfunc", Loc(21,4)), [expr.LitE(98, Loc(21,13))], Loc(21,4)), Loc(21,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:charfunc", Loc(22,4)), [expr.LitE(99, Loc(22,13))], Loc(22,4)), Loc(22,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:intfunc", Loc(24,4)), [], Loc(24,4)), Loc(24,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:intfunc", Loc(25,4)), [expr.LitE(98, Loc(25,12))], Loc(25,4)), Loc(25,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:intfunc", Loc(26,4)), [expr.LitE(99, Loc(26,12))], Loc(26,4)), Loc(26,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:floatfunc", Loc(28,4)), [], Loc(28,4)), Loc(28,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:floatfunc", Loc(29,4)), [expr.LitE(98.0, Loc(29,14))], Loc(29,4)), Loc(29,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:floatfunc", Loc(30,4)), [expr.LitE(99.000000, Loc(30,14))], Loc(30,4)), Loc(30,4)),
            instr.AssignI(expr.VarE("v:main:b", Loc(36,4)), expr.LitE(97, Loc(36,13)), Loc(36,4)),
            instr.AssignI(expr.VarE("v:main:c", Loc(37,4)), expr.LitE(97, Loc(37,13)), Loc(37,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(39,4)), [expr.LitE("""%d %d
""", Loc(39,11)), expr.VarE("v:main:b", Loc(39,22)), expr.VarE("v:main:c", Loc(39,25))], Loc(39,4)), Loc(39,4)),
            instr.AssignI(expr.VarE("v:main:d", Loc(41,4)), , Loc(41,4)),
            instr.AssignI(expr.VarE("v:main:e", Loc(42,4)), expr.LitE(97, Loc(42,12)), Loc(42,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(44,4)), [expr.LitE("""%d %d
""", Loc(44,11)), expr.VarE("v:main:d", Loc(44,22)), expr.VarE("v:main:e", Loc(44,25))], Loc(44,4)), Loc(44,4)),
            instr.AssignI(expr.VarE("v:main:f", Loc(46,4)), , Loc(46,4)),
            instr.AssignI(expr.VarE("v:main:g", Loc(47,4)), expr.LitE(97.0, Loc(47,14)), Loc(47,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(49,4)), [expr.LitE("""%f %f
""", Loc(49,11)), expr.VarE("v:main:f", Loc(49,22)), expr.VarE("v:main:g", Loc(49,25))], Loc(49,4)), Loc(49,4)),
            instr.ReturnI(expr.LitE(0, Loc(51,11))),
        ], # instrSeq end.
      ), # f:main() end. 

    "f:floatfunc":
      obj.Func(
        name = "f:floatfunc",
        paramNames = ["v:floatfunc:a"],
        variadic = False,
        returnType = types.Void,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(15,4)), [expr.LitE("""float: %f
""", Loc(15,11)), expr.VarE("v:floatfunc:a", Loc(15,26))], Loc(15,4)), Loc(15,4)),
        ], # instrSeq end.
      ), # f:floatfunc() end. 

    "f:charfunc":
      obj.Func(
        name = "f:charfunc",
        paramNames = ["v:charfunc:a"],
        variadic = False,
        returnType = types.Void,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(5,4)), [expr.LitE("""char: %c
""", Loc(5,11)), expr.VarE("v:charfunc:a", Loc(5,25))], Loc(5,4)), Loc(5,4)),
        ], # instrSeq end.
      ), # f:charfunc() end. 

    "f:intfunc":
      obj.Func(
        name = "f:intfunc",
        paramNames = ["v:intfunc:a"],
        variadic = False,
        returnType = types.Void,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(10,4)), [expr.LitE("""int: %d
""", Loc(10,11)), expr.VarE("v:intfunc:a", Loc(10,24))], Loc(10,4)), Loc(10,4)),
        ], # instrSeq end.
      ), # f:intfunc() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
