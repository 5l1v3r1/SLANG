
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "001430.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.34": types.Int32,
    "v:main:t.33": types.Int32,
    "v:main:t.32": types.Ptr(to=types.Int32),
    "v:main:t.31": types.Ptr(to=types.Int32),
    "v:main:t.10": types.Ptr(to=types.Int32),
    "v:main:t.9": types.Int32,
    "v:main:t.8": types.Int32,
    "v:main:t.6": types.Int32,
    "v:main:count": types.Int32,
    "v:main:t.29": types.Ptr(to=types.Int32),
    "v:main:t.5": types.Int32,
    "v:main:to": types.Ptr(to=types.Int32),
    "v:main:t.7": types.Int,
    "v:main:from": types.Ptr(to=types.Int32),
    "v:main:t.24": types.Int32,
    "v:main:t.4": types.Int32,
    "v:main:t.17": types.Ptr(to=types.Int32),
    "v:main:t.3": types.Int32,
    "v:main:n": types.Int32,
    "v:main:t.1": types.Int32,
    "v:main:t.2": types.Int32,
    "v:main:t.11": types.Ptr(to=types.Int32),
    "v:main:a": types.ConstSizeArray(of=types.Int32, dim=39),
    "v:main:t.12": types.Int32,
    "v:main:t.13": types.Ptr(to=types.Int32),
    "v:main:t.14": types.Ptr(to=types.Int32),
    "v:main:t.15": types.Int32,
    "v:main:t.16": types.Ptr(to=types.Int32),
    "v:main:t.18": types.Int32,
    "v:main:t.19": types.Ptr(to=types.Int32),
    "v:main:t.20": types.Ptr(to=types.Int32),
    "v:main:t.21": types.Int32,
    "v:main:b": types.ConstSizeArray(of=types.Int32, dim=39),
    "v:main:t.22": types.Ptr(to=types.Int32),
    "v:main:t.23": types.Ptr(to=types.Int32),
    "v:main:t.25": types.Ptr(to=types.Int32),
    "v:main:t.26": types.Ptr(to=types.Int32),
    "v:main:t.27": types.Int32,
    "v:main:t.28": types.Ptr(to=types.Int32),
    "v:main:t.30": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          22: [
            instr.AssignI(expr.VarE("v:main:n", Loc(14,9)), expr.LitE(0, Loc(14,13)), Loc(14,9)),
          ],

          21: [
            instr.AssignI(expr.VarE("v:main:t.34", Loc(14,16)), expr.BinaryE(expr.VarE("v:main:n", Loc(14,16)), op.BO_LT, expr.LitE(39, Loc(14,20))), Loc(14,16)),
            instr.CondI(expr.VarE("v:main:t.34", Loc(14,16)), Loc(14,5)),
          ],

          20: [
            instr.AssignI(expr.ArrayE(expr.VarE("v:main:a", Loc(15,9)), [expr.VarE("v:main:n", Loc(15,11))], Loc(15,9)), expr.VarE("v:main:n", Loc(15,16)), Loc(15,9)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:main:b", Loc(16,9)), [expr.VarE("v:main:n", Loc(16,11))], Loc(16,9)), expr.LitE(0, Loc(16,16)), Loc(16,9)),
          ],

          19: [
            instr.AssignI(expr.VarE("v:main:n", Loc(14,24)), expr.BinaryE(expr.VarE("v:main:n", Loc(14,24)), op.BO_ADD, expr.LitE(1, Loc(14,24)), Loc(14,24)), Loc(14,24)),
          ],

          18: [
            instr.NopI(),
          ],

          17: [
            instr.NopI(),
          ],

          16: [
            instr.AssignI(expr.VarE("v:main:t.32", Loc(23,27)), expr.VarE("v:main:from", Loc(23,27)), Loc(23,27)),
            instr.AssignI(expr.VarE("v:main:from", Loc(23,27)), expr.BinaryE(expr.VarE("v:main:from", Loc(23,27)), op.BO_ADD, expr.LitE(1, Loc(23,27)), Loc(23,27)), Loc(23,27)),
            instr.AssignI(expr.VarE("v:main:t.33", Loc(23,26)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.32", Loc(23,27)), Loc(23,26)), Loc(23,26)),
            instr.AssignI(expr.VarE("v:main:t.31", Loc(23,19)), expr.VarE("v:main:to", Loc(23,19)), Loc(23,19)),
            instr.AssignI(expr.VarE("v:main:to", Loc(23,19)), expr.BinaryE(expr.VarE("v:main:to", Loc(23,19)), op.BO_ADD, expr.LitE(1, Loc(23,19)), Loc(23,19)), Loc(23,19)),
            instr.AssignI(expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.31", Loc(23,19)), Loc(23,18)), expr.VarE("v:main:t.33", Loc(23,26)), Loc(23,18)),
          ],

          5: [
            instr.AssignI(expr.VarE("v:main:t.4", Loc(33,16)), expr.BinaryE(expr.VarE("v:main:n", Loc(33,16)), op.BO_LT, expr.LitE(39, Loc(33,20))), Loc(33,16)),
            instr.CondI(expr.VarE("v:main:t.4", Loc(33,16)), Loc(33,5)),
          ],

          4: [
            instr.AssignI(expr.VarE("v:main:t.2", Loc(34,12)), expr.ArrayE(expr.VarE("v:main:a", Loc(34,12)), [expr.VarE("v:main:n", Loc(34,14))], Loc(34,12)), Loc(34,12)),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(34,20)), expr.ArrayE(expr.VarE("v:main:b", Loc(34,20)), [expr.VarE("v:main:n", Loc(34,22))], Loc(34,20)), Loc(34,20)),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(34,12)), expr.BinaryE(expr.VarE("v:main:t.2", Loc(34,12)), op.BO_NE, expr.VarE("v:main:t.1", Loc(34,20))), Loc(34,12)),
            instr.CondI(expr.VarE("v:main:t.3", Loc(34,12)), Loc(34,9)),
          ],

          3: [
            instr.ReturnI(expr.LitE(1, Loc(35,20)), Loc(35,13)),
          ],

          2: [
            instr.AssignI(expr.VarE("v:main:n", Loc(33,24)), expr.BinaryE(expr.VarE("v:main:n", Loc(33,24)), op.BO_ADD, expr.LitE(1, Loc(33,24)), Loc(33,24)), Loc(33,24)),
          ],

          0: [
            instr.NopI(),
          ],

          1: [
            instr.ReturnI(expr.LitE(0, Loc(36,12)), Loc(36,5)),
          ],

          6: [
            instr.AssignI(expr.VarE("v:main:n", Loc(33,9)), expr.LitE(0, Loc(33,13)), Loc(33,9)),
          ],

          7: [
            instr.AssignI(expr.VarE("v:main:from", Loc(18,5)), expr.VarE("v:main:a", Loc(18,12)), Loc(18,5)),
            instr.AssignI(expr.VarE("v:main:to", Loc(19,5)), expr.VarE("v:main:b", Loc(19,10)), Loc(19,5)),
            instr.AssignI(expr.VarE("v:main:count", Loc(20,5)), expr.LitE(39, Loc(20,13)), Loc(20,5)),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(21,10)), expr.BinaryE(expr.VarE("v:main:count", Loc(21,10)), op.BO_ADD, expr.LitE(7, Loc(21,18))), Loc(21,10)),
            instr.AssignI(expr.VarE("v:main:n", Loc(21,5)), expr.BinaryE(expr.VarE("v:main:t.5", Loc(21,10)), op.BO_DIV, expr.LitE(8, Loc(21,23))), Loc(21,5)),
            instr.AssignI(expr.VarE("v:main:t.6", Loc(22,13)), expr.BinaryE(expr.VarE("v:main:count", Loc(22,13)), op.BO_MOD, expr.LitE(8, Loc(22,21))), Loc(22,13)),
            instr.AssignI(expr.VarE("v:main:t.7", Loc(23,5)), expr.BinaryE(expr.VarE("v:main:t.6", Loc(22,13)), op.BO_EQ, expr.LitE(0, Loc(23,10)), ), ),
            instr.CondI(expr.VarE("v:main:t.7", Loc(23,5)), ),
          ],

          8: [
            instr.AssignI(expr.VarE("v:main:n", Loc(31,24)), expr.BinaryE(expr.VarE("v:main:n", Loc(31,24)), op.BO_SUB, expr.LitE(1), Loc(31,22)), Loc(31,22)),
            instr.AssignI(expr.VarE("v:main:t.8", Loc(31,22)), expr.VarE("v:main:n", Loc(31,24)), Loc(31,22)),
            instr.AssignI(expr.VarE("v:main:t.9", Loc(31,22)), expr.BinaryE(expr.VarE("v:main:t.8", Loc(31,22)), op.BO_GT, expr.LitE(0, Loc(31,28))), Loc(31,22)),
            instr.CondI(expr.VarE("v:main:t.9", Loc(31,22)), Loc(23,13)),
          ],

          9: [
            instr.AssignI(expr.VarE("v:main:t.11", Loc(30,27)), expr.VarE("v:main:from", Loc(30,27)), Loc(30,27)),
            instr.AssignI(expr.VarE("v:main:from", Loc(30,27)), expr.BinaryE(expr.VarE("v:main:from", Loc(30,27)), op.BO_ADD, expr.LitE(1, Loc(30,27)), Loc(30,27)), Loc(30,27)),
            instr.AssignI(expr.VarE("v:main:t.12", Loc(30,26)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.11", Loc(30,27)), Loc(30,26)), Loc(30,26)),
            instr.AssignI(expr.VarE("v:main:t.10", Loc(30,19)), expr.VarE("v:main:to", Loc(30,19)), Loc(30,19)),
            instr.AssignI(expr.VarE("v:main:to", Loc(30,19)), expr.BinaryE(expr.VarE("v:main:to", Loc(30,19)), op.BO_ADD, expr.LitE(1, Loc(30,19)), Loc(30,19)), Loc(30,19)),
            instr.AssignI(expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.10", Loc(30,19)), Loc(30,18)), expr.VarE("v:main:t.12", Loc(30,26)), Loc(30,18)),
          ],

          10: [
            instr.AssignI(expr.VarE("v:main:t.14", Loc(29,27)), expr.VarE("v:main:from", Loc(29,27)), Loc(29,27)),
            instr.AssignI(expr.VarE("v:main:from", Loc(29,27)), expr.BinaryE(expr.VarE("v:main:from", Loc(29,27)), op.BO_ADD, expr.LitE(1, Loc(29,27)), Loc(29,27)), Loc(29,27)),
            instr.AssignI(expr.VarE("v:main:t.15", Loc(29,26)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.14", Loc(29,27)), Loc(29,26)), Loc(29,26)),
            instr.AssignI(expr.VarE("v:main:t.13", Loc(29,19)), expr.VarE("v:main:to", Loc(29,19)), Loc(29,19)),
            instr.AssignI(expr.VarE("v:main:to", Loc(29,19)), expr.BinaryE(expr.VarE("v:main:to", Loc(29,19)), op.BO_ADD, expr.LitE(1, Loc(29,19)), Loc(29,19)), Loc(29,19)),
            instr.AssignI(expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.13", Loc(29,19)), Loc(29,18)), expr.VarE("v:main:t.15", Loc(29,26)), Loc(29,18)),
          ],

          -1: [
            instr.NopI(),
          ],

          11: [
            instr.AssignI(expr.VarE("v:main:t.17", Loc(28,27)), expr.VarE("v:main:from", Loc(28,27)), Loc(28,27)),
            instr.AssignI(expr.VarE("v:main:from", Loc(28,27)), expr.BinaryE(expr.VarE("v:main:from", Loc(28,27)), op.BO_ADD, expr.LitE(1, Loc(28,27)), Loc(28,27)), Loc(28,27)),
            instr.AssignI(expr.VarE("v:main:t.18", Loc(28,26)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.17", Loc(28,27)), Loc(28,26)), Loc(28,26)),
            instr.AssignI(expr.VarE("v:main:t.16", Loc(28,19)), expr.VarE("v:main:to", Loc(28,19)), Loc(28,19)),
            instr.AssignI(expr.VarE("v:main:to", Loc(28,19)), expr.BinaryE(expr.VarE("v:main:to", Loc(28,19)), op.BO_ADD, expr.LitE(1, Loc(28,19)), Loc(28,19)), Loc(28,19)),
            instr.AssignI(expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.16", Loc(28,19)), Loc(28,18)), expr.VarE("v:main:t.18", Loc(28,26)), Loc(28,18)),
          ],

          12: [
            instr.AssignI(expr.VarE("v:main:t.20", Loc(27,27)), expr.VarE("v:main:from", Loc(27,27)), Loc(27,27)),
            instr.AssignI(expr.VarE("v:main:from", Loc(27,27)), expr.BinaryE(expr.VarE("v:main:from", Loc(27,27)), op.BO_ADD, expr.LitE(1, Loc(27,27)), Loc(27,27)), Loc(27,27)),
            instr.AssignI(expr.VarE("v:main:t.21", Loc(27,26)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.20", Loc(27,27)), Loc(27,26)), Loc(27,26)),
            instr.AssignI(expr.VarE("v:main:t.19", Loc(27,19)), expr.VarE("v:main:to", Loc(27,19)), Loc(27,19)),
            instr.AssignI(expr.VarE("v:main:to", Loc(27,19)), expr.BinaryE(expr.VarE("v:main:to", Loc(27,19)), op.BO_ADD, expr.LitE(1, Loc(27,19)), Loc(27,19)), Loc(27,19)),
            instr.AssignI(expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.19", Loc(27,19)), Loc(27,18)), expr.VarE("v:main:t.21", Loc(27,26)), Loc(27,18)),
          ],

          13: [
            instr.AssignI(expr.VarE("v:main:t.23", Loc(26,27)), expr.VarE("v:main:from", Loc(26,27)), Loc(26,27)),
            instr.AssignI(expr.VarE("v:main:from", Loc(26,27)), expr.BinaryE(expr.VarE("v:main:from", Loc(26,27)), op.BO_ADD, expr.LitE(1, Loc(26,27)), Loc(26,27)), Loc(26,27)),
            instr.AssignI(expr.VarE("v:main:t.24", Loc(26,26)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.23", Loc(26,27)), Loc(26,26)), Loc(26,26)),
            instr.AssignI(expr.VarE("v:main:t.22", Loc(26,19)), expr.VarE("v:main:to", Loc(26,19)), Loc(26,19)),
            instr.AssignI(expr.VarE("v:main:to", Loc(26,19)), expr.BinaryE(expr.VarE("v:main:to", Loc(26,19)), op.BO_ADD, expr.LitE(1, Loc(26,19)), Loc(26,19)), Loc(26,19)),
            instr.AssignI(expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.22", Loc(26,19)), Loc(26,18)), expr.VarE("v:main:t.24", Loc(26,26)), Loc(26,18)),
          ],

          14: [
            instr.AssignI(expr.VarE("v:main:t.26", Loc(25,27)), expr.VarE("v:main:from", Loc(25,27)), Loc(25,27)),
            instr.AssignI(expr.VarE("v:main:from", Loc(25,27)), expr.BinaryE(expr.VarE("v:main:from", Loc(25,27)), op.BO_ADD, expr.LitE(1, Loc(25,27)), Loc(25,27)), Loc(25,27)),
            instr.AssignI(expr.VarE("v:main:t.27", Loc(25,26)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.26", Loc(25,27)), Loc(25,26)), Loc(25,26)),
            instr.AssignI(expr.VarE("v:main:t.25", Loc(25,19)), expr.VarE("v:main:to", Loc(25,19)), Loc(25,19)),
            instr.AssignI(expr.VarE("v:main:to", Loc(25,19)), expr.BinaryE(expr.VarE("v:main:to", Loc(25,19)), op.BO_ADD, expr.LitE(1, Loc(25,19)), Loc(25,19)), Loc(25,19)),
            instr.AssignI(expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.25", Loc(25,19)), Loc(25,18)), expr.VarE("v:main:t.27", Loc(25,26)), Loc(25,18)),
          ],

          15: [
            instr.AssignI(expr.VarE("v:main:t.29", Loc(24,27)), expr.VarE("v:main:from", Loc(24,27)), Loc(24,27)),
            instr.AssignI(expr.VarE("v:main:from", Loc(24,27)), expr.BinaryE(expr.VarE("v:main:from", Loc(24,27)), op.BO_ADD, expr.LitE(1, Loc(24,27)), Loc(24,27)), Loc(24,27)),
            instr.AssignI(expr.VarE("v:main:t.30", Loc(24,26)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.29", Loc(24,27)), Loc(24,26)), Loc(24,26)),
            instr.AssignI(expr.VarE("v:main:t.28", Loc(24,19)), expr.VarE("v:main:to", Loc(24,19)), Loc(24,19)),
            instr.AssignI(expr.VarE("v:main:to", Loc(24,19)), expr.BinaryE(expr.VarE("v:main:to", Loc(24,19)), op.BO_ADD, expr.LitE(1, Loc(24,19)), Loc(24,19)), Loc(24,19)),
            instr.AssignI(expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.28", Loc(24,19)), Loc(24,18)), expr.VarE("v:main:t.30", Loc(24,26)), Loc(24,18)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 5, types.UnCondEdge),
          (3, 0, types.UnCondEdge),
          (4, 3, types.TrueEdge),
          (4, 2, types.FalseEdge),
          (5, 4, types.TrueEdge),
          (5, 1, types.FalseEdge),
          (6, 5, types.UnCondEdge),
          (7, 9, types.TrueEdge),
          (7, 6, types.FalseEdge),
          (8, 17, types.TrueEdge),
          (8, 6, types.FalseEdge),
          (9, 8, types.UnCondEdge),
          (10, 9, types.UnCondEdge),
          (11, 10, types.UnCondEdge),
          (12, 11, types.UnCondEdge),
          (13, 12, types.UnCondEdge),
          (14, 13, types.UnCondEdge),
          (15, 14, types.UnCondEdge),
          (16, 15, types.UnCondEdge),
          (17, 16, types.UnCondEdge),
          (18, 16, types.UnCondEdge),
          (19, 21, types.UnCondEdge),
          (20, 19, types.UnCondEdge),
          (21, 20, types.TrueEdge),
          (21, 7, types.FalseEdge),
          (22, 21, types.UnCondEdge),
          (-1, 22, types.UnCondEdge),
        }, # bbEdges end
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
