
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "001430.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.15": types.Int32,
    "v:main:t.14": types.Int32,
    "v:main:t.13": types.Int32,
    "v:main:t.12": types.Int32,
    "v:main:t.11": types.Int32,
    "v:main:from": types.Ptr(to=types.Int32),
    "v:main:t.4": types.Int32,
    "v:main:a": types.ConstSizeArray(of=types.Int32, size=39),
    "v:main:t.6": types.Ptr(to=types.Int32),
    "v:main:count": types.Int32,
    "v:main:t.9": types.Int32,
    "v:main:t.10": types.Int32,
    "v:main:t.1": types.Int32,
    "v:main:t.2": types.Int32,
    "v:main:to": types.Ptr(to=types.Int32),
    "v:main:t.3": types.Int32,
    "v:main:t.5": types.Int32,
    "v:main:b": types.ConstSizeArray(of=types.Int32, size=39),
    "v:main:t.7": types.Ptr(to=types.Int32),
    "v:main:n": types.Int32,
    "v:main:t.8": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:main:n", Loc(14,9)), expr.LitE(0, Loc(14,13)), Loc(14,9)),
            instr.LabelI("ForCond1"),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(14,16)), expr.BinaryE(expr.VarE("v:main:n", Loc(14,16)), op.BO_LT, expr.LitE(39, Loc(14,20)), Loc(14,16)), Loc(14,16)),
            instr.CondI(expr.VarE("v:main:t.1", Loc(14,16)), "ForBody1", "ForExit1", Loc(14,16)),
            instr.LabelI("ForBody1"),
            instr.AssignI(expr.ArrayE(expr.VarE("v:main:n", Loc(15,11)), expr.VarE("v:main:a", Loc(15,9)), Loc(15,9)), expr.VarE("v:main:n", Loc(15,16)), Loc(15,9)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:main:n", Loc(16,11)), expr.VarE("v:main:b", Loc(16,9)), Loc(16,9)), expr.LitE(0, Loc(16,16)), Loc(16,9)),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(14,24)), expr.VarE("v:main:n", Loc(14,24)), Loc(14,24)),
            instr.AssignI(expr.VarE("v:main:n", Loc(14,24)), expr.BinaryE(expr.VarE("v:main:n", Loc(14,24)), op.BO_ADD, expr.LitE(1, Loc(14,24)), Loc(14,24)), Loc(14,24)),
            instr.GotoI("ForCond1"),
            instr.LabelI("ForExit1"),
            instr.AssignI(expr.VarE("v:main:from", Loc(18,5)), expr.VarE("v:main:a", Loc(18,12)), Loc(18,5)),
            instr.AssignI(expr.VarE("v:main:to", Loc(19,5)), expr.VarE("v:main:b", Loc(19,10)), Loc(19,5)),
            instr.AssignI(expr.VarE("v:main:count", Loc(20,5)), expr.LitE(39, Loc(20,13)), Loc(20,5)),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(21,10)), expr.BinaryE(expr.VarE("v:main:count", Loc(21,10)), op.BO_ADD, expr.LitE(7, Loc(21,18)), Loc(21,10)), Loc(21,10)),
            instr.AssignI(expr.VarE("v:main:n", Loc(21,5)), expr.BinaryE(expr.VarE("v:main:t.3", Loc(21,10)), op.BO_DIV, expr.LitE(8, Loc(21,23)), Loc(21,9)), Loc(21,5)),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(22,13)), expr.BinaryE(expr.VarE("v:main:count", Loc(22,13)), op.BO_MOD, expr.LitE(8, Loc(22,21)), Loc(22,13)), Loc(22,13)),
            instr.LabelI("CaseCond2-0"),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(23,5)), expr.BinaryE(expr.VarE("v:main:t.4", Loc(22,13)), op.BO_EQ, expr.LitE(0, Loc(23,10)), Loc(23,5)), Loc(23,5)),
            instr.CondI(expr.VarE("v:main:t.5", Loc(23,5)), "CaseBody2-0", "Default2", Loc(23,5)),
            instr.LabelI("CaseBody2-0"),
            instr.LabelI("DoEntry3"),
            instr.AssignI(expr.VarE("v:main:t.6", Loc(23,27)), expr.VarE("v:main:from", Loc(23,27)), Loc(23,27)),
            instr.AssignI(expr.VarE("v:main:from", Loc(23,27)), expr.BinaryE(expr.VarE("v:main:from", Loc(23,27)), op.BO_ADD, expr.LitE(1, Loc(23,27)), Loc(23,27)), Loc(23,27)),
            instr.AssignI(expr.VarE("v:main:t.7", Loc(23,19)), expr.VarE("v:main:to", Loc(23,19)), Loc(23,19)),
            instr.AssignI(expr.VarE("v:main:to", Loc(23,19)), expr.BinaryE(expr.VarE("v:main:to", Loc(23,19)), op.BO_ADD, expr.LitE(1, Loc(23,19)), Loc(23,19)), Loc(23,19)),
            instr.AssignI(expr.VarE("v:main:t.8", Loc(23,26)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.6", Loc(23,27)), Loc(23,26)), Loc(23,26)),
            instr.AssignI(expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:t.7", Loc(23,19)), Loc(23,18)), expr.VarE("v:main:t.8", Loc(23,26)), Loc(23,18)),
            instr.LabelI("DoCond3"),
            instr.AssignI(expr.VarE("v:main:n", Loc(31,24)), expr.BinaryE(expr.VarE("v:main:n", Loc(31,24)), op.BO_SUB, expr.LitE(1, Loc(31,22)), Loc(31,22)), Loc(31,22)),
            instr.AssignI(expr.VarE("v:main:t.9", Loc(31,24)), expr.VarE("v:main:n", Loc(31,24)), Loc(31,24)),
            instr.AssignI(expr.VarE("v:main:t.10", Loc(31,22)), expr.BinaryE(expr.VarE("v:main:t.9", Loc(31,24)), op.BO_GT, expr.LitE(0, Loc(31,28)), Loc(31,22)), Loc(31,22)),
            instr.CondI(expr.VarE("v:main:t.10", Loc(31,22)), "DoEntry3", "DoExit3", Loc(31,22)),
            instr.LabelI("DoExit3"),
            instr.LabelI("CaseCond2-1"),
            instr.LabelI("Default2"),
            instr.LabelI("SwitchExit2"),
            instr.AssignI(expr.VarE("v:main:n", Loc(33,9)), expr.LitE(0, Loc(33,13)), Loc(33,9)),
            instr.LabelI("ForCond4"),
            instr.AssignI(expr.VarE("v:main:t.11", Loc(33,16)), expr.BinaryE(expr.VarE("v:main:n", Loc(33,16)), op.BO_LT, expr.LitE(39, Loc(33,20)), Loc(33,16)), Loc(33,16)),
            instr.CondI(expr.VarE("v:main:t.11", Loc(33,16)), "ForBody4", "ForExit4", Loc(33,16)),
            instr.LabelI("ForBody4"),
            instr.AssignI(expr.VarE("v:main:t.12", Loc(34,12)), expr.ArrayE(expr.VarE("v:main:n", Loc(34,14)), expr.VarE("v:main:a", Loc(34,12)), Loc(34,12)), Loc(34,12)),
            instr.AssignI(expr.VarE("v:main:t.13", Loc(34,20)), expr.ArrayE(expr.VarE("v:main:n", Loc(34,22)), expr.VarE("v:main:b", Loc(34,20)), Loc(34,20)), Loc(34,20)),
            instr.AssignI(expr.VarE("v:main:t.14", Loc(34,12)), expr.BinaryE(expr.VarE("v:main:t.12", Loc(34,12)), op.BO_NE, expr.VarE("v:main:t.13", Loc(34,20)), Loc(34,12)), Loc(34,12)),
            instr.CondI(expr.VarE("v:main:t.14", Loc(34,12)), "IfTrue5", "IfFalse5", Loc(34,12)),
            instr.LabelI("IfTrue5"),
            instr.ReturnI(expr.LitE(1, Loc(35,20))),
            instr.GotoI("IfExit5"),
            instr.LabelI("IfFalse5"),
            instr.LabelI("IfExit5"),
            instr.AssignI(expr.VarE("v:main:t.15", Loc(33,24)), expr.VarE("v:main:n", Loc(33,24)), Loc(33,24)),
            instr.AssignI(expr.VarE("v:main:n", Loc(33,24)), expr.BinaryE(expr.VarE("v:main:n", Loc(33,24)), op.BO_ADD, expr.LitE(1, Loc(33,24)), Loc(33,24)), Loc(33,24)),
            instr.GotoI("ForCond4"),
            instr.LabelI("ForExit4"),
            instr.ReturnI(expr.LitE(0, Loc(36,12))),
        ], # instrSeq end.
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
