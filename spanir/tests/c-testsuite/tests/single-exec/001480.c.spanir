
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "001480.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.12": types.Int32,
    "v:main:t.11": types.Int32,
    "v:main:t.10": types.Struct("s:S"),
    "v:main:t.9": types.Int32,
    "v:main:t.8": types.Int32,
    "v:main:t.7": types.Struct("s:S"),
    "v:main:t.6": types.Int32,
    "v:main:t.1": types.Struct("s:S"),
    "": ,
    "v:main:t.2": types.Int32,
    "v:main:t.3": types.Int32,
    "v:main:t.4": types.Struct("s:S"),
    "v:main:t.5": types.Int32,
  }, # end allVars dict

  allObjs = {
    "s:S":
      types.Struct(
        name = "s:S",
        fields = [
          ("a", types.Int32),
          ("b", types.Int32),
        ],
        loc = Loc(1,1),
      ),


    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:main:t.1", Loc(7,5)), expr.ArrayE(expr.LitE(0, Loc(7,9)), expr.VarE("", Loc(7,5)), Loc(7,5)), Loc(7,5)),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(7,5)), expr.MemberE("a", expr.VarE("v:main:t.1", Loc(7,5)), Loc(7,5)), Loc(7,5)),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(7,5)), expr.BinaryE(expr.VarE("v:main:t.2", Loc(7,5)), op.BO_NE, expr.LitE(1, Loc(7,17)), Loc(7,5)), Loc(7,5)),
            instr.CondI(expr.VarE("v:main:t.3", Loc(7,5)), "IfTrue1", "IfFalse1", Loc(7,5)),
            instr.LabelI("IfTrue1"),
            instr.ReturnI(expr.LitE(1, Loc(8,10))),
            instr.GotoI("IfExit1"),
            instr.LabelI("IfFalse1"),
            instr.LabelI("IfExit1"),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(9,5)), expr.ArrayE(expr.LitE(0, Loc(9,9)), expr.VarE("", Loc(9,5)), Loc(9,5)), Loc(9,5)),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(9,5)), expr.MemberE("b", expr.VarE("v:main:t.4", Loc(9,5)), Loc(9,5)), Loc(9,5)),
            instr.AssignI(expr.VarE("v:main:t.6", Loc(9,5)), expr.BinaryE(expr.VarE("v:main:t.5", Loc(9,5)), op.BO_NE, expr.LitE(2, Loc(9,17)), Loc(9,5)), Loc(9,5)),
            instr.CondI(expr.VarE("v:main:t.6", Loc(9,5)), "IfTrue2", "IfFalse2", Loc(9,5)),
            instr.LabelI("IfTrue2"),
            instr.ReturnI(expr.LitE(2, Loc(10,10))),
            instr.GotoI("IfExit2"),
            instr.LabelI("IfFalse2"),
            instr.LabelI("IfExit2"),
            instr.AssignI(expr.VarE("v:main:t.7", Loc(11,5)), expr.ArrayE(expr.LitE(1, Loc(11,9)), expr.VarE("", Loc(11,5)), Loc(11,5)), Loc(11,5)),
            instr.AssignI(expr.VarE("v:main:t.8", Loc(11,5)), expr.MemberE("a", expr.VarE("v:main:t.7", Loc(11,5)), Loc(11,5)), Loc(11,5)),
            instr.AssignI(expr.VarE("v:main:t.9", Loc(11,5)), expr.BinaryE(expr.VarE("v:main:t.8", Loc(11,5)), op.BO_NE, expr.LitE(3, Loc(11,17)), Loc(11,5)), Loc(11,5)),
            instr.CondI(expr.VarE("v:main:t.9", Loc(11,5)), "IfTrue3", "IfFalse3", Loc(11,5)),
            instr.LabelI("IfTrue3"),
            instr.ReturnI(expr.LitE(3, Loc(12,10))),
            instr.GotoI("IfExit3"),
            instr.LabelI("IfFalse3"),
            instr.LabelI("IfExit3"),
            instr.AssignI(expr.VarE("v:main:t.10", Loc(13,5)), expr.ArrayE(expr.LitE(1, Loc(13,9)), expr.VarE("", Loc(13,5)), Loc(13,5)), Loc(13,5)),
            instr.AssignI(expr.VarE("v:main:t.11", Loc(13,5)), expr.MemberE("b", expr.VarE("v:main:t.10", Loc(13,5)), Loc(13,5)), Loc(13,5)),
            instr.AssignI(expr.VarE("v:main:t.12", Loc(13,5)), expr.BinaryE(expr.VarE("v:main:t.11", Loc(13,5)), op.BO_NE, expr.LitE(4, Loc(13,17)), Loc(13,5)), Loc(13,5)),
            instr.CondI(expr.VarE("v:main:t.12", Loc(13,5)), "IfTrue4", "IfFalse4", Loc(13,5)),
            instr.LabelI("IfTrue4"),
            instr.ReturnI(expr.LitE(4, Loc(14,10))),
            instr.GotoI("IfExit4"),
            instr.LabelI("IfFalse4"),
            instr.LabelI("IfExit4"),
            instr.ReturnI(expr.LitE(0, Loc(15,9))),
        ], # instrSeq end.
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
