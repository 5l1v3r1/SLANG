
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "001930.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:fred:t.2": types.Int32,
    "v:fred:t.3": types.Int32,
    "v:fred:x": types.Int32,
    "v:fred:t.1": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.CallI(expr.CallE(expr.FuncE("f:fred", Loc(17,4)), [expr.LitE(1, Loc(17,9))], Loc(17,4)), Loc(17,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:fred", Loc(18,4)), [expr.LitE(2, Loc(18,9))], Loc(18,4)), Loc(18,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:fred", Loc(19,4)), [expr.LitE(3, Loc(19,9))], Loc(19,4)), Loc(19,4)),
            instr.ReturnI(expr.LitE(0, Loc(21,11))),
        ], # instrSeq end.
      ), # f:main() end. 

    "f:fred":
      obj.Func(
        name = "f:fred",
        paramNames = ["v:fred:x"],
        variadic = False,
        returnType = types.Void,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.LabelI("CaseCond1-0"),
            instr.AssignI(expr.VarE("v:fred:t.1", Loc(7,7)), expr.BinaryE(expr.VarE("v:fred:x", Loc(5,12)), op.BO_EQ, expr.LitE(1, Loc(7,12)), Loc(7,7)), Loc(7,7)),
            instr.CondI(expr.VarE("v:fred:t.1", Loc(7,7)), "CaseBody1-0", "CaseCond1-1", Loc(7,7)),
            instr.LabelI("CaseBody1-0"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(7,15)), [expr.LitE("""1
""", Loc(7,22))], Loc(7,15)), Loc(7,15)),
            instr.LabelI("CaseCond1-1"),
            instr.AssignI(expr.VarE("v:fred:t.2", Loc(8,7)), expr.BinaryE(expr.VarE("v:fred:x", Loc(5,12)), op.BO_EQ, expr.LitE(2, Loc(8,12)), Loc(8,7)), Loc(8,7)),
            instr.CondI(expr.VarE("v:fred:t.2", Loc(8,7)), "CaseBody1-1", "CaseCond1-2", Loc(8,7)),
            instr.LabelI("CaseBody1-1"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(8,15)), [expr.LitE("""2
""", Loc(8,22))], Loc(8,15)), Loc(8,15)),
            instr.GotoI("SwitchExit1"),
            instr.LabelI("CaseCond1-2"),
            instr.AssignI(expr.VarE("v:fred:t.3", Loc(9,7)), expr.BinaryE(expr.VarE("v:fred:x", Loc(5,12)), op.BO_EQ, expr.LitE(3, Loc(9,12)), Loc(9,7)), Loc(9,7)),
            instr.CondI(expr.VarE("v:fred:t.3", Loc(9,7)), "CaseBody1-2", "Default1", Loc(9,7)),
            instr.LabelI("CaseBody1-2"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(9,15)), [expr.LitE("""3
""", Loc(9,22))], Loc(9,15)), Loc(9,15)),
            instr.LabelI("CaseCond1-3"),
            instr.LabelI("Default1"),
            instr.LabelI("SwitchExit1"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(12,4)), [expr.LitE("""out
""", Loc(12,11))], Loc(12,4)), Loc(12,4)),
        ], # instrSeq end.
      ), # f:fred() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
