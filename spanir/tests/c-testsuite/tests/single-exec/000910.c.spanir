
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "000910.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.9": types.Int32,
    "v:main:t.8": types.Int32,
    "v:main:t.7": types.Struct("s:1"),
    "v:main:t.6": types.Int32,
    "v:main:t.1": types.Struct("s:1"),
    "v:main:t.2": types.Int32,
    "v:main:t.3": types.Int32,
    "v:main:t.4": types.Struct("s:1"),
    "": ,
    "v:main:t.5": types.Int32,
  }, # end allVars dict

  allObjs = {
    "s:1":
      types.Struct(
        name = "s:1",
        fields = [
          ("v", types.Int32),
          ("sub", types.ConstSizeArray(of=types.Int32, size=2)),
        ],
        loc = Loc(1,9),
      ),


    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:main:t.1", Loc(11,6)), expr.ArrayE(expr.LitE(0, Loc(11,8)), expr.VarE("", Loc(11,6)), Loc(11,6)), Loc(11,6)),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(11,6)), expr.MemberE("v", expr.VarE("v:main:t.1", Loc(11,6)), Loc(11,6)), Loc(11,6)),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(11,6)), expr.BinaryE(expr.VarE("v:main:t.2", Loc(11,6)), op.BO_NE, expr.LitE(1, Loc(11,16)), Loc(11,6)), Loc(11,6)),
            instr.CondI(expr.VarE("v:main:t.3", Loc(11,6)), "IfTrue1", "IfFalse1", Loc(11,6)),
            instr.LabelI("IfTrue1"),
            instr.ReturnI(expr.LitE(1, Loc(12,10))),
            instr.GotoI("IfExit1"),
            instr.LabelI("IfFalse1"),
            instr.LabelI("IfExit1"),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(13,6)), expr.ArrayE(expr.LitE(0, Loc(13,8)), expr.VarE("", Loc(13,6)), Loc(13,6)), Loc(13,6)),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(13,6)), expr.ArrayE(expr.LitE(0, Loc(13,15)), expr.MemberE("sub", expr.VarE("v:main:t.4", Loc(13,6)), Loc(13,6)), Loc(13,6)), Loc(13,6)),
            instr.AssignI(expr.VarE("v:main:t.6", Loc(13,6)), expr.BinaryE(expr.VarE("v:main:t.5", Loc(13,6)), op.BO_NE, expr.LitE(2, Loc(13,21)), Loc(13,6)), Loc(13,6)),
            instr.CondI(expr.VarE("v:main:t.6", Loc(13,6)), "IfTrue2", "IfFalse2", Loc(13,6)),
            instr.LabelI("IfTrue2"),
            instr.ReturnI(expr.LitE(2, Loc(14,10))),
            instr.GotoI("IfExit2"),
            instr.LabelI("IfFalse2"),
            instr.LabelI("IfExit2"),
            instr.AssignI(expr.VarE("v:main:t.7", Loc(15,6)), expr.ArrayE(expr.LitE(0, Loc(15,8)), expr.VarE("", Loc(15,6)), Loc(15,6)), Loc(15,6)),
            instr.AssignI(expr.VarE("v:main:t.8", Loc(15,6)), expr.ArrayE(expr.LitE(1, Loc(15,15)), expr.MemberE("sub", expr.VarE("v:main:t.7", Loc(15,6)), Loc(15,6)), Loc(15,6)), Loc(15,6)),
            instr.AssignI(expr.VarE("v:main:t.9", Loc(15,6)), expr.BinaryE(expr.VarE("v:main:t.8", Loc(15,6)), op.BO_NE, expr.LitE(3, Loc(15,21)), Loc(15,6)), Loc(15,6)),
            instr.CondI(expr.VarE("v:main:t.9", Loc(15,6)), "IfTrue3", "IfFalse3", Loc(15,6)),
            instr.LabelI("IfTrue3"),
            instr.ReturnI(expr.LitE(3, Loc(16,10))),
            instr.GotoI("IfExit3"),
            instr.LabelI("IfFalse3"),
            instr.LabelI("IfExit3"),
            instr.ReturnI(expr.LitE(0, Loc(18,9))),
        ], # instrSeq end.
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
