
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "delit.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:z": types.Int32,
    "v:sum:b": types.Int32,
    "v:main:y": types.Int32,
    "v:main:x": types.Int32,
    "v:main:t.1": types.Int32,
    "v:sum:a": types.Int32,
    "v:main:t.2": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:main:y", Loc(13,4)), expr.LitE(10, Loc(13,12)), Loc(13,4)),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(14,12)), expr.LitE(1, Loc(14,12)), Loc(14,12)),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(14,12)), expr.LitE(1, Loc(14,12)), Loc(14,12)),
            instr.CondI(expr.VarE("v:main:y", Loc(14,12)), "NextCheckLand2", "TmpAssignLand2", Loc(14,12)),
            instr.LabelI("NextCheckLand2"),
            instr.CondI(expr.VarE("v:main:y", Loc(14,17)), "ExitLand2", "TmpAssignLand2", Loc(14,12)),
            instr.LabelI("TmpAssignLand2"),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(14,12)), expr.LitE(0, Loc(14,12)), Loc(14,12)),
            instr.LabelI("ExitLand2"),
            instr.CondI(expr.VarE("v:main:t.2", Loc(14,12)), "ExitLor1", "NextCheckLor1", Loc(14,12)),
            instr.LabelI("NextCheckLor1"),
            instr.CondI(expr.VarE("v:main:y", Loc(14,22)), "ExitLor1", "TmpAssignLor1", Loc(14,12)),
            instr.LabelI("TmpAssignLor1"),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(14,12)), expr.LitE(0, Loc(14,12)), Loc(14,12)),
            instr.LabelI("ExitLor1"),
            instr.AssignI(expr.VarE("v:main:x", Loc(14,4)), expr.VarE("v:main:t.1", Loc(14,12)), Loc(14,4)),
            instr.AssignI(expr.VarE("v:main:z", Loc(15,4)), expr.SelectE(expr.VarE("v:main:y", Loc(15,12)), expr.VarE("v:main:x", Loc(15,16)), expr.VarE("v:main:y", Loc(15,20)), Loc(15,12)), Loc(15,4)),
        ], # instrSeq end.
      ), # f:main() end. 

    "f:sum":
      obj.Func(
        name = "f:sum",
        paramNames = ["v:sum:a", "v:sum:b"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:sum:t.1", Loc(9,10)), expr.BinaryE(expr.VarE("v:sum:a", Loc(9,10)), op.BO_ADD, expr.VarE("v:sum:b", Loc(9,14)), Loc(9,10)), Loc(9,10)),
            instr.ReturnI(expr.VarE("v:sum:t.1", Loc(9,10))),
        ], # instrSeq end.
      ), # f:sum() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
