
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "001810.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:Hanoi:spare": types.Ptr(to=types.Int32),
    "v:Hanoi:dest": types.Ptr(to=types.Int32),
    "v:Hanoi:source": types.Ptr(to=types.Int32),
    "v:Move:t.10": types.Int32,
    "v:Move:t.9": types.Int32,
    "v:main:t.2": types.Int32,
    "v:Hanoi:i": types.Int32,
    "v:B": types.ConstSizeArray(of=types.Int32, dim=4),
    "v:main:t.1": types.Int32,
    "v:C": types.ConstSizeArray(of=types.Int32, dim=4),
    "v:printf:__format": types.Ptr(to=types.Int8),
    "v:Move:t.8": types.Int32,
    "v:PrintAll:i": types.Int32,
    "v:main:t.3": types.Int32,
    "v:main:t.4": types.Int32,
    "v:A": types.ConstSizeArray(of=types.Int32, dim=4),
    "v:Hanoi:n": types.Int32,
    "v:Move:t.5": types.Int32,
    "v:Move:j": types.Int32,
    "v:Move:source": types.Ptr(to=types.Int32),
    "v:Move:t.6": types.Int32,
    "v:Move:dest": types.Ptr(to=types.Int32),
    "v:main:i": types.Int32,
    "v:Move:i": types.Int32,
    "v:Move:t.7": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          13: [
            instr.AssignI(expr.VarE("v:main:i", Loc(105,8)), expr.LitE(0, Loc(105,10)), Loc(105,8)),
          ],

          12: [
            instr.AssignI(expr.VarE("v:main:t.4", Loc(105,12)), expr.BinaryE(expr.VarE("v:main:i", Loc(105,12)), op.BO_LT, expr.LitE(4, Loc(105,14))), Loc(105,12)),
            instr.CondI(expr.VarE("v:main:t.4", Loc(105,12)), Loc(105,4)),
          ],

          11: [
            instr.AssignI(expr.VarE("v:main:t.3", Loc(105,25)), expr.BinaryE(expr.VarE("v:main:i", Loc(105,25)), op.BO_ADD, expr.LitE(1, Loc(105,27))), Loc(105,25)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:A", Loc(105,20)), [expr.VarE("v:main:i", Loc(105,22))], Loc(105,20)), expr.VarE("v:main:t.3", Loc(105,25)), Loc(105,20)),
          ],

          10: [
            instr.AssignI(expr.VarE("v:main:i", Loc(105,16)), expr.BinaryE(expr.VarE("v:main:i", Loc(105,16)), op.BO_ADD, expr.LitE(1, Loc(105,16)), Loc(105,16)), Loc(105,16)),
          ],

          9: [
            instr.AssignI(expr.VarE("v:main:i", Loc(106,8)), expr.LitE(0, Loc(106,10)), Loc(106,8)),
          ],

          8: [
            instr.AssignI(expr.VarE("v:main:t.2", Loc(106,12)), expr.BinaryE(expr.VarE("v:main:i", Loc(106,12)), op.BO_LT, expr.LitE(4, Loc(106,14))), Loc(106,12)),
            instr.CondI(expr.VarE("v:main:t.2", Loc(106,12)), Loc(106,4)),
          ],

          7: [
            instr.AssignI(expr.ArrayE(expr.VarE("v:B", Loc(106,20)), [expr.VarE("v:main:i", Loc(106,22))], Loc(106,20)), expr.LitE(0, Loc(106,25)), Loc(106,20)),
          ],

          6: [
            instr.AssignI(expr.VarE("v:main:i", Loc(106,16)), expr.BinaryE(expr.VarE("v:main:i", Loc(106,16)), op.BO_ADD, expr.LitE(1, Loc(106,16)), Loc(106,16)), Loc(106,16)),
          ],

          1: [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(109,4)), [expr.LitE("""Solution of Tower of Hanoi Problem with %d Disks

""", Loc(109,11)), expr.LitE(4, Loc(109,66))], Loc(109,4))),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(112,4)), [expr.LitE("""Starting state:
""", Loc(112,11))], Loc(112,4))),
            instr.CallI(expr.CallE(expr.FuncE("f:PrintAll", Loc(113,4)), [], Loc(113,4))),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(114,4)), [expr.LitE("""

Subsequent states:

""", Loc(114,11))], Loc(114,4))),
            instr.CallI(expr.CallE(expr.FuncE("f:Hanoi", Loc(117,4)), [expr.LitE(4, Loc(117,10)), expr.VarE("v:A", Loc(117,12)), expr.VarE("v:B", Loc(117,14)), expr.VarE("v:C", Loc(117,16))], Loc(117,4))),
            instr.ReturnI(expr.LitE(0, Loc(119,11)), Loc(119,4)),
          ],

          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

          2: [
            instr.AssignI(expr.VarE("v:main:i", Loc(107,16)), expr.BinaryE(expr.VarE("v:main:i", Loc(107,16)), op.BO_ADD, expr.LitE(1, Loc(107,16)), Loc(107,16)), Loc(107,16)),
          ],

          3: [
            instr.AssignI(expr.ArrayE(expr.VarE("v:C", Loc(107,20)), [expr.VarE("v:main:i", Loc(107,22))], Loc(107,20)), expr.LitE(0, Loc(107,25)), Loc(107,20)),
          ],

          4: [
            instr.AssignI(expr.VarE("v:main:t.1", Loc(107,12)), expr.BinaryE(expr.VarE("v:main:i", Loc(107,12)), op.BO_LT, expr.LitE(4, Loc(107,14))), Loc(107,12)),
            instr.CondI(expr.VarE("v:main:t.1", Loc(107,12)), Loc(107,4)),
          ],

          5: [
            instr.AssignI(expr.VarE("v:main:i", Loc(107,8)), expr.LitE(0, Loc(107,10)), Loc(107,8)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 4, types.UnCondEdge),
          (3, 2, types.UnCondEdge),
          (4, 3, types.TrueEdge),
          (4, 1, types.FalseEdge),
          (5, 4, types.UnCondEdge),
          (6, 8, types.UnCondEdge),
          (7, 6, types.UnCondEdge),
          (8, 7, types.TrueEdge),
          (8, 5, types.FalseEdge),
          (9, 8, types.UnCondEdge),
          (10, 12, types.UnCondEdge),
          (11, 10, types.UnCondEdge),
          (12, 11, types.TrueEdge),
          (12, 9, types.FalseEdge),
          (13, 12, types.UnCondEdge),
          (-1, 13, types.UnCondEdge),
        }, # bbEdges end
      ), # f:main() end. 

    "f:Hanoi":
      obj.Func(
        name = "f:Hanoi",
        paramNames = ["v:Hanoi:n", "v:Hanoi:source", "v:Hanoi:dest", "v:Hanoi:spare"],
        variadic = False,
        returnType = types.Void,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          3: [
            instr.AssignI(expr.VarE("v:Hanoi:t.3", Loc(89,7)), expr.BinaryE(expr.VarE("v:Hanoi:n", Loc(89,7)), op.BO_EQ, expr.LitE(1, Loc(89,10))), Loc(89,7)),
            instr.CondI(expr.VarE("v:Hanoi:t.3", Loc(89,7)), Loc(89,4)),
          ],

          2: [
            instr.CallI(expr.CallE(expr.FuncE("f:Move", Loc(90,7)), [expr.VarE("v:Hanoi:source", Loc(90,12)), expr.VarE("v:Hanoi:dest", Loc(90,19))], Loc(90,7))),
            instr.ReturnI(Loc(91,7)),
          ],

          0: [
            instr.NopI(),
          ],

          -1: [
            instr.NopI(),
          ],

          1: [
            instr.AssignI(expr.VarE("v:Hanoi:t.1", Loc(94,10)), expr.BinaryE(expr.VarE("v:Hanoi:n", Loc(94,10)), op.BO_SUB, expr.LitE(1, Loc(94,12))), Loc(94,10)),
            instr.CallI(expr.CallE(expr.FuncE("f:Hanoi", Loc(94,4)), [expr.VarE("v:Hanoi:t.1", Loc(94,10)), expr.VarE("v:Hanoi:source", Loc(94,14)), expr.VarE("v:Hanoi:spare", Loc(94,21)), expr.VarE("v:Hanoi:dest", Loc(94,27))], Loc(94,4))),
            instr.CallI(expr.CallE(expr.FuncE("f:Move", Loc(95,4)), [expr.VarE("v:Hanoi:source", Loc(95,9)), expr.VarE("v:Hanoi:dest", Loc(95,16))], Loc(95,4))),
            instr.AssignI(expr.VarE("v:Hanoi:t.2", Loc(96,10)), expr.BinaryE(expr.VarE("v:Hanoi:n", Loc(96,10)), op.BO_SUB, expr.LitE(1, Loc(96,12))), Loc(96,10)),
            instr.CallI(expr.CallE(expr.FuncE("f:Hanoi", Loc(96,4)), [expr.VarE("v:Hanoi:t.2", Loc(96,10)), expr.VarE("v:Hanoi:spare", Loc(96,14)), expr.VarE("v:Hanoi:dest", Loc(96,20)), expr.VarE("v:Hanoi:source", Loc(96,25))], Loc(96,4))),
            instr.ReturnI(Loc(97,4)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 0, types.UnCondEdge),
          (3, 2, types.TrueEdge),
          (3, 1, types.FalseEdge),
          (-1, 3, types.UnCondEdge),
        }, # bbEdges end
      ), # f:Hanoi() end. 

    "f:Move":
      obj.Func(
        name = "f:Move",
        paramNames = ["v:Move:source", "v:Move:dest"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          10: [
            instr.AssignI(expr.VarE("v:Move:i", Loc(71,8)), expr.LitE(0, Loc(71,12)), Loc(71,8)),
            instr.AssignI(expr.VarE("v:Move:j", Loc(71,15)), expr.LitE(0, Loc(71,19)), Loc(71,15)),
          ],

          9: [
            instr.AssignI(expr.VarE("v:Move:t.10", Loc(73,11)), expr.BinaryE(expr.VarE("v:Move:i", Loc(73,11)), op.BO_LT, expr.LitE(4, Loc(73,13))), Loc(73,11)),
            instr.CondI(expr.VarE("v:Move:t.10", Loc(73,11)), Loc(73,11)),
          ],

          8: [
            instr.AssignI(expr.VarE("v:Move:t.8", Loc(73,19)), expr.ArrayE(expr.VarE("v:Move:source", Loc(73,19)), [expr.VarE("v:Move:i", Loc(73,26))], Loc(73,19)), Loc(73,19)),
            instr.AssignI(expr.VarE("v:Move:t.9", Loc(73,18)), expr.BinaryE(expr.VarE("v:Move:t.8", Loc(73,19)), op.BO_EQ, expr.LitE(0, Loc(73,31))), Loc(73,18)),
            instr.CondI(expr.VarE("v:Move:t.9", Loc(73,18)), Loc(73,4)),
          ],

          7: [
            instr.AssignI(expr.VarE("v:Move:i", Loc(73,34)), expr.BinaryE(expr.VarE("v:Move:i", Loc(73,34)), op.BO_ADD, expr.LitE(1, Loc(73,34)), Loc(73,34)), Loc(73,34)),
          ],

          6: [
            instr.NopI(),
          ],

          1: [
            instr.AssignI(expr.VarE("v:Move:t.2", Loc(76,16)), expr.ArrayE(expr.VarE("v:Move:source", Loc(76,16)), [expr.VarE("v:Move:i", Loc(76,23))], Loc(76,16)), Loc(76,16)),
            instr.AssignI(expr.VarE("v:Move:t.1", Loc(76,9)), expr.BinaryE(expr.VarE("v:Move:j", Loc(76,9)), op.BO_SUB, expr.LitE(1, Loc(76,11))), Loc(76,9)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:Move:dest", Loc(76,4)), [expr.VarE("v:Move:t.1", Loc(76,9))], Loc(76,4)), expr.VarE("v:Move:t.2", Loc(76,16)), Loc(76,4)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:Move:source", Loc(77,4)), [expr.VarE("v:Move:i", Loc(77,11))], Loc(77,4)), expr.LitE(0, Loc(77,16)), Loc(77,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:PrintAll", Loc(78,4)), [], Loc(78,4))),
            instr.AssignI(expr.VarE("v:Move:t.3", Loc(79,16)), expr.BinaryE(expr.VarE("v:Move:j", Loc(79,16)), op.BO_SUB, expr.LitE(1, Loc(79,18))), Loc(79,16)),
            instr.AssignI(expr.VarE("v:Move:t.4", Loc(79,11)), expr.ArrayE(expr.VarE("v:Move:dest", Loc(79,11)), [expr.VarE("v:Move:t.3", Loc(79,16))], Loc(79,11)), Loc(79,11)),
            instr.ReturnI(expr.VarE("v:Move:t.4", Loc(79,11)), Loc(79,4)),
          ],

          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

          2: [
            instr.NopI(),
          ],

          3: [
            instr.AssignI(expr.VarE("v:Move:j", Loc(74,32)), expr.BinaryE(expr.VarE("v:Move:j", Loc(74,32)), op.BO_ADD, expr.LitE(1, Loc(74,32)), Loc(74,32)), Loc(74,32)),
          ],

          4: [
            instr.AssignI(expr.VarE("v:Move:t.5", Loc(74,19)), expr.ArrayE(expr.VarE("v:Move:dest", Loc(74,19)), [expr.VarE("v:Move:j", Loc(74,24))], Loc(74,19)), Loc(74,19)),
            instr.AssignI(expr.VarE("v:Move:t.6", Loc(74,18)), expr.BinaryE(expr.VarE("v:Move:t.5", Loc(74,19)), op.BO_EQ, expr.LitE(0, Loc(74,29))), Loc(74,18)),
            instr.CondI(expr.VarE("v:Move:t.6", Loc(74,18)), Loc(74,4)),
          ],

          5: [
            instr.AssignI(expr.VarE("v:Move:t.7", Loc(74,11)), expr.BinaryE(expr.VarE("v:Move:j", Loc(74,11)), op.BO_LT, expr.LitE(4, Loc(74,13))), Loc(74,11)),
            instr.CondI(expr.VarE("v:Move:t.7", Loc(74,11)), Loc(74,11)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 5, types.UnCondEdge),
          (3, 2, types.UnCondEdge),
          (4, 3, types.TrueEdge),
          (4, 1, types.FalseEdge),
          (5, 4, types.TrueEdge),
          (5, 1, types.FalseEdge),
          (6, 9, types.UnCondEdge),
          (7, 6, types.UnCondEdge),
          (8, 7, types.TrueEdge),
          (8, 5, types.FalseEdge),
          (9, 8, types.TrueEdge),
          (9, 5, types.FalseEdge),
          (10, 9, types.UnCondEdge),
          (-1, 10, types.UnCondEdge),
        }, # bbEdges end
      ), # f:Move() end. 

    "f:PrintAll":
      obj.Func(
        name = "f:PrintAll",
        paramNames = [],
        variadic = False,
        returnType = types.Void,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          13: [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(52,4)), [expr.LitE("""A: """, Loc(52,11))], Loc(52,4))),
            instr.AssignI(expr.VarE("v:PrintAll:i", Loc(53,8)), expr.LitE(0, Loc(53,10)), Loc(53,8)),
          ],

          12: [
            instr.AssignI(expr.VarE("v:PrintAll:t.6", Loc(53,12)), expr.BinaryE(expr.VarE("v:PrintAll:i", Loc(53,12)), op.BO_LT, expr.LitE(4, Loc(53,14))), Loc(53,12)),
            instr.CondI(expr.VarE("v:PrintAll:t.6", Loc(53,12)), Loc(53,4)),
          ],

          11: [
            instr.AssignI(expr.VarE("v:PrintAll:t.5", Loc(53,34)), expr.ArrayE(expr.VarE("v:A", Loc(53,34)), [expr.VarE("v:PrintAll:i", Loc(53,36))], Loc(53,34)), Loc(53,34)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(53,20)), [expr.LitE(""" %d """, Loc(53,27)), expr.VarE("v:PrintAll:t.5", Loc(53,34))], Loc(53,20))),
          ],

          10: [
            instr.AssignI(expr.VarE("v:PrintAll:i", Loc(53,16)), expr.BinaryE(expr.VarE("v:PrintAll:i", Loc(53,16)), op.BO_ADD, expr.LitE(1, Loc(53,16)), Loc(53,16)), Loc(53,16)),
          ],

          9: [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(54,4)), [expr.LitE("""
""", Loc(54,11))], Loc(54,4))),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(56,4)), [expr.LitE("""B: """, Loc(56,11))], Loc(56,4))),
            instr.AssignI(expr.VarE("v:PrintAll:i", Loc(57,8)), expr.LitE(0, Loc(57,10)), Loc(57,8)),
          ],

          8: [
            instr.AssignI(expr.VarE("v:PrintAll:t.4", Loc(57,12)), expr.BinaryE(expr.VarE("v:PrintAll:i", Loc(57,12)), op.BO_LT, expr.LitE(4, Loc(57,14))), Loc(57,12)),
            instr.CondI(expr.VarE("v:PrintAll:t.4", Loc(57,12)), Loc(57,4)),
          ],

          7: [
            instr.AssignI(expr.VarE("v:PrintAll:t.3", Loc(57,34)), expr.ArrayE(expr.VarE("v:B", Loc(57,34)), [expr.VarE("v:PrintAll:i", Loc(57,36))], Loc(57,34)), Loc(57,34)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(57,20)), [expr.LitE(""" %d """, Loc(57,27)), expr.VarE("v:PrintAll:t.3", Loc(57,34))], Loc(57,20))),
          ],

          6: [
            instr.AssignI(expr.VarE("v:PrintAll:i", Loc(57,16)), expr.BinaryE(expr.VarE("v:PrintAll:i", Loc(57,16)), op.BO_ADD, expr.LitE(1, Loc(57,16)), Loc(57,16)), Loc(57,16)),
          ],

          1: [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(62,4)), [expr.LitE("""
""", Loc(62,11))], Loc(62,4))),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(63,4)), [expr.LitE("""------------------------------------------
""", Loc(63,11))], Loc(63,4))),
            instr.ReturnI(Loc(64,4)),
          ],

          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

          2: [
            instr.AssignI(expr.VarE("v:PrintAll:i", Loc(61,16)), expr.BinaryE(expr.VarE("v:PrintAll:i", Loc(61,16)), op.BO_ADD, expr.LitE(1, Loc(61,16)), Loc(61,16)), Loc(61,16)),
          ],

          3: [
            instr.AssignI(expr.VarE("v:PrintAll:t.1", Loc(61,34)), expr.ArrayE(expr.VarE("v:C", Loc(61,34)), [expr.VarE("v:PrintAll:i", Loc(61,36))], Loc(61,34)), Loc(61,34)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(61,20)), [expr.LitE(""" %d """, Loc(61,27)), expr.VarE("v:PrintAll:t.1", Loc(61,34))], Loc(61,20))),
          ],

          4: [
            instr.AssignI(expr.VarE("v:PrintAll:t.2", Loc(61,12)), expr.BinaryE(expr.VarE("v:PrintAll:i", Loc(61,12)), op.BO_LT, expr.LitE(4, Loc(61,14))), Loc(61,12)),
            instr.CondI(expr.VarE("v:PrintAll:t.2", Loc(61,12)), Loc(61,4)),
          ],

          5: [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(58,4)), [expr.LitE("""
""", Loc(58,11))], Loc(58,4))),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(60,4)), [expr.LitE("""C: """, Loc(60,11))], Loc(60,4))),
            instr.AssignI(expr.VarE("v:PrintAll:i", Loc(61,8)), expr.LitE(0, Loc(61,10)), Loc(61,8)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 4, types.UnCondEdge),
          (3, 2, types.UnCondEdge),
          (4, 3, types.TrueEdge),
          (4, 1, types.FalseEdge),
          (5, 4, types.UnCondEdge),
          (6, 8, types.UnCondEdge),
          (7, 6, types.UnCondEdge),
          (8, 7, types.TrueEdge),
          (8, 5, types.FalseEdge),
          (9, 8, types.UnCondEdge),
          (10, 12, types.UnCondEdge),
          (11, 10, types.UnCondEdge),
          (12, 11, types.TrueEdge),
          (12, 9, types.FalseEdge),
          (13, 12, types.UnCondEdge),
          (-1, 13, types.UnCondEdge),
        }, # bbEdges end
      ), # f:PrintAll() end. 

    "f:printf":
      obj.Func(
        name = "f:printf",
        paramNames = ["v:printf:__format"],
        variadic = True,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
        }, # basicBlocks end.

        bbEdges= {
        }, # bbEdges end
      ), # f:printf() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
