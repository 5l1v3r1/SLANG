
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "001810.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:Hanoi:dest": types.Ptr(to=types.Int32),
    "v:Hanoi:source": types.Ptr(to=types.Int32),
    "v:Hanoi:n": types.Int32,
    "v:Move:t.10": types.Int32,
    "v:Move:j": types.Int32,
    "v:main:t.4": types.Int32,
    "": ,
    "v:main:i": types.Int32,
    "v:Move:i": types.Int32,
    "v:main:t.2": types.Int32,
    "": ,
    "v:Move:t.8": types.Int32,
    "v:PrintAll:i": types.Int32,
    "v:main:t.5": types.Int32,
    "v:Hanoi:spare": types.Ptr(to=types.Int32),
    "v:main:t.1": types.Int32,
    "v:Hanoi:i": types.Int32,
    "": ,
    "v:main:t.6": types.Int32,
    "v:main:t.7": types.Int32,
    "v:Move:t.9": types.Int32,
    "v:main:t.3": types.Int32,
    "v:Move:source": types.Ptr(to=types.Int32),
    "v:Move:dest": types.Ptr(to=types.Int32),
  }, # end allVars dict

  allObjs = {

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:main:i", Loc(105,8)), expr.LitE(0, Loc(105,10)), Loc(105,8)),
            instr.LabelI("ForCond9"),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(105,12)), expr.BinaryE(expr.VarE("v:main:i", Loc(105,12)), op.BO_LT, expr.LitE(4, Loc(105,14)), Loc(105,12)), Loc(105,12)),
            instr.CondI(expr.VarE("v:main:t.1", Loc(105,12)), "ForBody9", "ForExit9", Loc(105,12)),
            instr.LabelI("ForBody9"),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(105,25)), expr.BinaryE(expr.VarE("v:main:i", Loc(105,25)), op.BO_ADD, expr.LitE(1, Loc(105,27)), Loc(105,25)), Loc(105,25)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:main:i", Loc(105,22)), expr.VarE("", Loc(105,20)), Loc(105,20)), expr.VarE("v:main:t.2", Loc(105,25)), Loc(105,20)),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(105,16)), expr.VarE("v:main:i", Loc(105,16)), Loc(105,16)),
            instr.AssignI(expr.VarE("v:main:i", Loc(105,16)), expr.BinaryE(expr.VarE("v:main:i", Loc(105,16)), op.BO_ADD, expr.LitE(1, Loc(105,16)), Loc(105,16)), Loc(105,16)),
            instr.GotoI("ForCond9"),
            instr.LabelI("ForExit9"),
            instr.AssignI(expr.VarE("v:main:i", Loc(106,8)), expr.LitE(0, Loc(106,10)), Loc(106,8)),
            instr.LabelI("ForCond10"),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(106,12)), expr.BinaryE(expr.VarE("v:main:i", Loc(106,12)), op.BO_LT, expr.LitE(4, Loc(106,14)), Loc(106,12)), Loc(106,12)),
            instr.CondI(expr.VarE("v:main:t.4", Loc(106,12)), "ForBody10", "ForExit10", Loc(106,12)),
            instr.LabelI("ForBody10"),
            instr.AssignI(expr.ArrayE(expr.VarE("v:main:i", Loc(106,22)), expr.VarE("", Loc(106,20)), Loc(106,20)), expr.LitE(0, Loc(106,25)), Loc(106,20)),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(106,16)), expr.VarE("v:main:i", Loc(106,16)), Loc(106,16)),
            instr.AssignI(expr.VarE("v:main:i", Loc(106,16)), expr.BinaryE(expr.VarE("v:main:i", Loc(106,16)), op.BO_ADD, expr.LitE(1, Loc(106,16)), Loc(106,16)), Loc(106,16)),
            instr.GotoI("ForCond10"),
            instr.LabelI("ForExit10"),
            instr.AssignI(expr.VarE("v:main:i", Loc(107,8)), expr.LitE(0, Loc(107,10)), Loc(107,8)),
            instr.LabelI("ForCond11"),
            instr.AssignI(expr.VarE("v:main:t.6", Loc(107,12)), expr.BinaryE(expr.VarE("v:main:i", Loc(107,12)), op.BO_LT, expr.LitE(4, Loc(107,14)), Loc(107,12)), Loc(107,12)),
            instr.CondI(expr.VarE("v:main:t.6", Loc(107,12)), "ForBody11", "ForExit11", Loc(107,12)),
            instr.LabelI("ForBody11"),
            instr.AssignI(expr.ArrayE(expr.VarE("v:main:i", Loc(107,22)), expr.VarE("", Loc(107,20)), Loc(107,20)), expr.LitE(0, Loc(107,25)), Loc(107,20)),
            instr.AssignI(expr.VarE("v:main:t.7", Loc(107,16)), expr.VarE("v:main:i", Loc(107,16)), Loc(107,16)),
            instr.AssignI(expr.VarE("v:main:i", Loc(107,16)), expr.BinaryE(expr.VarE("v:main:i", Loc(107,16)), op.BO_ADD, expr.LitE(1, Loc(107,16)), Loc(107,16)), Loc(107,16)),
            instr.GotoI("ForCond11"),
            instr.LabelI("ForExit11"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(109,4)), [expr.LitE("""Solution of Tower of Hanoi Problem with %d Disks

""", Loc(109,11)), expr.LitE(4, Loc(109,66))], Loc(109,4)), Loc(109,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(112,4)), [expr.LitE("""Starting state:
""", Loc(112,11))], Loc(112,4)), Loc(112,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:PrintAll", Loc(113,4)), Loc(113,4)), Loc(113,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(114,4)), [expr.LitE("""

Subsequent states:

""", Loc(114,11))], Loc(114,4)), Loc(114,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:Hanoi", Loc(117,4)), [expr.LitE(4, Loc(117,10)), expr.VarE("", Loc(117,12)), expr.VarE("", Loc(117,14)), expr.VarE("", Loc(117,16))], Loc(117,4)), Loc(117,4)),
            instr.ReturnI(expr.LitE(0, Loc(119,11))),
        ], # instrSeq end.
      ), # f:main() end. 

    "f:Hanoi":
      obj.Func(
        name = "f:Hanoi",
        paramNames = ["v:Hanoi:n", "v:Hanoi:source", "v:Hanoi:dest", "v:Hanoi:spare"],
        variadic = False,
        returnType = types.Void,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:Hanoi:t.1", Loc(89,7)), expr.BinaryE(expr.VarE("v:Hanoi:n", Loc(89,7)), op.BO_EQ, expr.LitE(1, Loc(89,10)), Loc(89,7)), Loc(89,7)),
            instr.CondI(expr.VarE("v:Hanoi:t.1", Loc(89,7)), "IfTrue8", "IfFalse8", Loc(89,7)),
            instr.LabelI("IfTrue8"),
            instr.CallI(expr.CallE(expr.FuncE("f:Move", Loc(90,7)), [expr.VarE("v:Hanoi:source", Loc(90,12)), expr.VarE("v:Hanoi:dest", Loc(90,19))], Loc(90,7)), Loc(90,7)),
            instr.ReturnI(),
            instr.GotoI("IfExit8"),
            instr.LabelI("IfFalse8"),
            instr.LabelI("IfExit8"),
            instr.AssignI(expr.VarE("v:Hanoi:t.2", Loc(94,10)), expr.BinaryE(expr.VarE("v:Hanoi:n", Loc(94,10)), op.BO_SUB, expr.LitE(1, Loc(94,12)), Loc(94,10)), Loc(94,10)),
            instr.CallI(expr.CallE(expr.FuncE("f:Hanoi", Loc(94,4)), [expr.VarE("v:Hanoi:t.2", Loc(94,10)), expr.VarE("v:Hanoi:source", Loc(94,14)), expr.VarE("v:Hanoi:spare", Loc(94,21)), expr.VarE("v:Hanoi:dest", Loc(94,27))], Loc(94,4)), Loc(94,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:Move", Loc(95,4)), [expr.VarE("v:Hanoi:source", Loc(95,9)), expr.VarE("v:Hanoi:dest", Loc(95,16))], Loc(95,4)), Loc(95,4)),
            instr.AssignI(expr.VarE("v:Hanoi:t.3", Loc(96,10)), expr.BinaryE(expr.VarE("v:Hanoi:n", Loc(96,10)), op.BO_SUB, expr.LitE(1, Loc(96,12)), Loc(96,10)), Loc(96,10)),
            instr.CallI(expr.CallE(expr.FuncE("f:Hanoi", Loc(96,4)), [expr.VarE("v:Hanoi:t.3", Loc(96,10)), expr.VarE("v:Hanoi:spare", Loc(96,14)), expr.VarE("v:Hanoi:dest", Loc(96,20)), expr.VarE("v:Hanoi:source", Loc(96,25))], Loc(96,4)), Loc(96,4)),
            instr.ReturnI(),
        ], # instrSeq end.
      ), # f:Hanoi() end. 

    "f:PrintAll":
      obj.Func(
        name = "f:PrintAll",
        paramNames = [],
        variadic = False,
        returnType = types.Void,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(52,4)), [expr.LitE("""A: """, Loc(52,11))], Loc(52,4)), Loc(52,4)),
            instr.AssignI(expr.VarE("v:PrintAll:i", Loc(53,8)), expr.LitE(0, Loc(53,10)), Loc(53,8)),
            instr.LabelI("ForCond1"),
            instr.AssignI(expr.VarE("v:PrintAll:t.1", Loc(53,12)), expr.BinaryE(expr.VarE("v:PrintAll:i", Loc(53,12)), op.BO_LT, expr.LitE(4, Loc(53,14)), Loc(53,12)), Loc(53,12)),
            instr.CondI(expr.VarE("v:PrintAll:t.1", Loc(53,12)), "ForBody1", "ForExit1", Loc(53,12)),
            instr.LabelI("ForBody1"),
            instr.AssignI(expr.VarE("v:PrintAll:t.2", Loc(53,34)), expr.ArrayE(expr.VarE("v:PrintAll:i", Loc(53,36)), expr.VarE("", Loc(53,34)), Loc(53,34)), Loc(53,34)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(53,20)), [expr.LitE(""" %d """, Loc(53,27)), expr.VarE("v:PrintAll:t.2", Loc(53,34))], Loc(53,20)), Loc(53,20)),
            instr.AssignI(expr.VarE("v:PrintAll:t.3", Loc(53,16)), expr.VarE("v:PrintAll:i", Loc(53,16)), Loc(53,16)),
            instr.AssignI(expr.VarE("v:PrintAll:i", Loc(53,16)), expr.BinaryE(expr.VarE("v:PrintAll:i", Loc(53,16)), op.BO_ADD, expr.LitE(1, Loc(53,16)), Loc(53,16)), Loc(53,16)),
            instr.GotoI("ForCond1"),
            instr.LabelI("ForExit1"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(54,4)), [expr.LitE("""
""", Loc(54,11))], Loc(54,4)), Loc(54,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(56,4)), [expr.LitE("""B: """, Loc(56,11))], Loc(56,4)), Loc(56,4)),
            instr.AssignI(expr.VarE("v:PrintAll:i", Loc(57,8)), expr.LitE(0, Loc(57,10)), Loc(57,8)),
            instr.LabelI("ForCond2"),
            instr.AssignI(expr.VarE("v:PrintAll:t.4", Loc(57,12)), expr.BinaryE(expr.VarE("v:PrintAll:i", Loc(57,12)), op.BO_LT, expr.LitE(4, Loc(57,14)), Loc(57,12)), Loc(57,12)),
            instr.CondI(expr.VarE("v:PrintAll:t.4", Loc(57,12)), "ForBody2", "ForExit2", Loc(57,12)),
            instr.LabelI("ForBody2"),
            instr.AssignI(expr.VarE("v:PrintAll:t.5", Loc(57,34)), expr.ArrayE(expr.VarE("v:PrintAll:i", Loc(57,36)), expr.VarE("", Loc(57,34)), Loc(57,34)), Loc(57,34)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(57,20)), [expr.LitE(""" %d """, Loc(57,27)), expr.VarE("v:PrintAll:t.5", Loc(57,34))], Loc(57,20)), Loc(57,20)),
            instr.AssignI(expr.VarE("v:PrintAll:t.6", Loc(57,16)), expr.VarE("v:PrintAll:i", Loc(57,16)), Loc(57,16)),
            instr.AssignI(expr.VarE("v:PrintAll:i", Loc(57,16)), expr.BinaryE(expr.VarE("v:PrintAll:i", Loc(57,16)), op.BO_ADD, expr.LitE(1, Loc(57,16)), Loc(57,16)), Loc(57,16)),
            instr.GotoI("ForCond2"),
            instr.LabelI("ForExit2"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(58,4)), [expr.LitE("""
""", Loc(58,11))], Loc(58,4)), Loc(58,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(60,4)), [expr.LitE("""C: """, Loc(60,11))], Loc(60,4)), Loc(60,4)),
            instr.AssignI(expr.VarE("v:PrintAll:i", Loc(61,8)), expr.LitE(0, Loc(61,10)), Loc(61,8)),
            instr.LabelI("ForCond3"),
            instr.AssignI(expr.VarE("v:PrintAll:t.7", Loc(61,12)), expr.BinaryE(expr.VarE("v:PrintAll:i", Loc(61,12)), op.BO_LT, expr.LitE(4, Loc(61,14)), Loc(61,12)), Loc(61,12)),
            instr.CondI(expr.VarE("v:PrintAll:t.7", Loc(61,12)), "ForBody3", "ForExit3", Loc(61,12)),
            instr.LabelI("ForBody3"),
            instr.AssignI(expr.VarE("v:PrintAll:t.8", Loc(61,34)), expr.ArrayE(expr.VarE("v:PrintAll:i", Loc(61,36)), expr.VarE("", Loc(61,34)), Loc(61,34)), Loc(61,34)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(61,20)), [expr.LitE(""" %d """, Loc(61,27)), expr.VarE("v:PrintAll:t.8", Loc(61,34))], Loc(61,20)), Loc(61,20)),
            instr.AssignI(expr.VarE("v:PrintAll:t.9", Loc(61,16)), expr.VarE("v:PrintAll:i", Loc(61,16)), Loc(61,16)),
            instr.AssignI(expr.VarE("v:PrintAll:i", Loc(61,16)), expr.BinaryE(expr.VarE("v:PrintAll:i", Loc(61,16)), op.BO_ADD, expr.LitE(1, Loc(61,16)), Loc(61,16)), Loc(61,16)),
            instr.GotoI("ForCond3"),
            instr.LabelI("ForExit3"),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(62,4)), [expr.LitE("""
""", Loc(62,11))], Loc(62,4)), Loc(62,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(63,4)), [expr.LitE("""------------------------------------------
""", Loc(63,11))], Loc(63,4)), Loc(63,4)),
            instr.ReturnI(),
        ], # instrSeq end.
      ), # f:PrintAll() end. 

    "f:Move":
      obj.Func(
        name = "f:Move",
        paramNames = ["v:Move:source", "v:Move:dest"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:Move:i", Loc(71,4)), expr.LitE(0, Loc(71,12)), Loc(71,4)),
            instr.AssignI(expr.VarE("v:Move:j", Loc(71,4)), expr.LitE(0, Loc(71,19)), Loc(71,4)),
            instr.LabelI("WhileCond4"),
            instr.AssignI(expr.VarE("v:Move:t.1", Loc(73,11)), expr.LitE(1, Loc(73,11)), Loc(73,11)),
            instr.CondI(expr.BinaryE(expr.VarE("v:Move:i", Loc(73,11)), op.BO_LT, expr.LitE(4, Loc(73,13)), Loc(73,11)), "NextCheckLand5", "TmpAssignLand5", Loc(73,11)),
            instr.LabelI("NextCheckLand5"),
            instr.AssignI(expr.VarE("v:Move:t.2", Loc(73,19)), expr.ArrayE(expr.VarE("v:Move:i", Loc(73,26)), expr.VarE("v:Move:source", Loc(73,19)), Loc(73,19)), Loc(73,19)),
            instr.CondI(expr.BinaryE(expr.VarE("v:Move:t.2", Loc(73,19)), op.BO_EQ, expr.LitE(0, Loc(73,31)), Loc(73,18)), "ExitLand5", "TmpAssignLand5", Loc(73,11)),
            instr.LabelI("TmpAssignLand5"),
            instr.AssignI(expr.VarE("v:Move:t.1", Loc(73,11)), expr.LitE(0, Loc(73,11)), Loc(73,11)),
            instr.LabelI("ExitLand5"),
            instr.CondI(expr.VarE("v:Move:t.1", Loc(73,11)), "WhileBody4", "WhileExit4", Loc(73,11)),
            instr.LabelI("WhileBody4"),
            instr.AssignI(expr.VarE("v:Move:t.3", Loc(73,34)), expr.VarE("v:Move:i", Loc(73,34)), Loc(73,34)),
            instr.AssignI(expr.VarE("v:Move:i", Loc(73,34)), expr.BinaryE(expr.VarE("v:Move:i", Loc(73,34)), op.BO_ADD, expr.LitE(1, Loc(73,34)), Loc(73,34)), Loc(73,34)),
            instr.GotoI("WhileCond4"),
            instr.LabelI("WhileExit4"),
            instr.LabelI("WhileCond6"),
            instr.AssignI(expr.VarE("v:Move:t.4", Loc(74,11)), expr.LitE(1, Loc(74,11)), Loc(74,11)),
            instr.CondI(expr.BinaryE(expr.VarE("v:Move:j", Loc(74,11)), op.BO_LT, expr.LitE(4, Loc(74,13)), Loc(74,11)), "NextCheckLand7", "TmpAssignLand7", Loc(74,11)),
            instr.LabelI("NextCheckLand7"),
            instr.AssignI(expr.VarE("v:Move:t.5", Loc(74,19)), expr.ArrayE(expr.VarE("v:Move:j", Loc(74,24)), expr.VarE("v:Move:dest", Loc(74,19)), Loc(74,19)), Loc(74,19)),
            instr.CondI(expr.BinaryE(expr.VarE("v:Move:t.5", Loc(74,19)), op.BO_EQ, expr.LitE(0, Loc(74,29)), Loc(74,18)), "ExitLand7", "TmpAssignLand7", Loc(74,11)),
            instr.LabelI("TmpAssignLand7"),
            instr.AssignI(expr.VarE("v:Move:t.4", Loc(74,11)), expr.LitE(0, Loc(74,11)), Loc(74,11)),
            instr.LabelI("ExitLand7"),
            instr.CondI(expr.VarE("v:Move:t.4", Loc(74,11)), "WhileBody6", "WhileExit6", Loc(74,11)),
            instr.LabelI("WhileBody6"),
            instr.AssignI(expr.VarE("v:Move:t.6", Loc(74,32)), expr.VarE("v:Move:j", Loc(74,32)), Loc(74,32)),
            instr.AssignI(expr.VarE("v:Move:j", Loc(74,32)), expr.BinaryE(expr.VarE("v:Move:j", Loc(74,32)), op.BO_ADD, expr.LitE(1, Loc(74,32)), Loc(74,32)), Loc(74,32)),
            instr.GotoI("WhileCond6"),
            instr.LabelI("WhileExit6"),
            instr.AssignI(expr.VarE("v:Move:t.7", Loc(76,9)), expr.BinaryE(expr.VarE("v:Move:j", Loc(76,9)), op.BO_SUB, expr.LitE(1, Loc(76,11)), Loc(76,9)), Loc(76,9)),
            instr.AssignI(expr.VarE("v:Move:t.8", Loc(76,16)), expr.ArrayE(expr.VarE("v:Move:i", Loc(76,23)), expr.VarE("v:Move:source", Loc(76,16)), Loc(76,16)), Loc(76,16)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:Move:t.7", Loc(76,9)), expr.VarE("v:Move:dest", Loc(76,4)), Loc(76,4)), expr.VarE("v:Move:t.8", Loc(76,16)), Loc(76,4)),
            instr.AssignI(expr.ArrayE(expr.VarE("v:Move:i", Loc(77,11)), expr.VarE("v:Move:source", Loc(77,4)), Loc(77,4)), expr.LitE(0, Loc(77,16)), Loc(77,4)),
            instr.CallI(expr.CallE(expr.FuncE("f:PrintAll", Loc(78,4)), Loc(78,4)), Loc(78,4)),
            instr.AssignI(expr.VarE("v:Move:t.9", Loc(79,16)), expr.BinaryE(expr.VarE("v:Move:j", Loc(79,16)), op.BO_SUB, expr.LitE(1, Loc(79,18)), Loc(79,16)), Loc(79,16)),
            instr.AssignI(expr.VarE("v:Move:t.10", Loc(79,11)), expr.ArrayE(expr.VarE("v:Move:t.9", Loc(79,16)), expr.VarE("v:Move:dest", Loc(79,11)), Loc(79,11)), Loc(79,11)),
            instr.ReturnI(expr.VarE("v:Move:t.10", Loc(79,11))),
        ], # instrSeq end.
      ), # f:Move() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
