
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "000460.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:main:t.7": types.Int32,
    "v:main:t.5": types.Int32,
    "v:main:t.4": types.Int32,
    "v:main:t.3": types.Int32,
    "v:main:t.2": types.Int32,
    "v:main:t.1": types.Int32,
    "v:main:t.9": types.Int32,
    "v:main:t.6": types.Int32,
    "v:main:t.8": types.Int32,
    "v:main:v": types.Struct("s:1"),
  }, # end allVars dict

  allObjs = {
    "s:6":
      types.Struct(
        name = "s:6",
        fields = [
          ("d", types.Int32),
        ],
        loc = Loc(8,2),
      ),

    "s:5":
      types.Struct(
        name = "s:5",
        fields = [
          ("c", types.Int32),
        ],
        loc = Loc(7,19),
      ),

    "u:4":
      types.Union(
        name = "u:4",
        fields = [
          ("1a", types.Struct("s:5")),
        ],
        loc = Loc(7,11),
      ),

    "s:3":
      types.Struct(
        name = "s:3",
        fields = [
          ("1a", types.Union("u:4")),
        ],
        loc = Loc(7,2),
      ),

    "s:1":
      types.Struct(
        name = "s:1",
        fields = [
          ("a", types.Int32),
          ("1a", types.Union("u:2")),
          ("2a", types.Struct("s:3")),
          ("3a", types.Struct("s:6")),
        ],
        loc = Loc(1,9),
      ),

    "u:2":
      types.Union(
        name = "u:2",
        fields = [
          ("b1", types.Int32),
          ("b2", types.Int32),
        ],
        loc = Loc(3,2),
      ),


    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.MemberE("a", expr.VarE("v:main:v", Loc(18,2)), Loc(18,2)), expr.LitE(1, Loc(18,8)), Loc(18,2)),
            instr.AssignI(expr.MemberE("b1", expr.MemberE("1a", expr.VarE("v:main:v", Loc(19,2)), Loc(19,2)), Loc(19,2)), expr.LitE(2, Loc(19,9)), Loc(19,2)),
            instr.AssignI(expr.MemberE("c", expr.MemberE("1a", expr.MemberE("1a", expr.MemberE("2a", expr.VarE("v:main:v", Loc(20,2)), Loc(20,2)), Loc(20,2)), Loc(20,2)), Loc(20,2)), expr.LitE(3, Loc(20,8)), Loc(20,2)),
            instr.AssignI(expr.MemberE("d", expr.MemberE("3a", expr.VarE("v:main:v", Loc(21,2)), Loc(21,2)), Loc(21,2)), expr.LitE(4, Loc(21,8)), Loc(21,2)),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(23,6)), expr.MemberE("a", expr.VarE("v:main:v", Loc(23,6)), Loc(23,6)), Loc(23,6)),
            instr.AssignI(expr.VarE("v:main:t.2", Loc(23,6)), expr.BinaryE(expr.VarE("v:main:t.1", Loc(23,6)), op.BO_NE, expr.LitE(1, Loc(23,13)), Loc(23,6)), Loc(23,6)),
            instr.CondI(expr.VarE("v:main:t.2", Loc(23,6)), "IfTrue1", "IfFalse1", Loc(23,6)),
            instr.LabelI("IfTrue1"),
            instr.ReturnI(expr.LitE(1, Loc(24,10))),
            instr.GotoI("IfExit1"),
            instr.LabelI("IfFalse1"),
            instr.LabelI("IfExit1"),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(25,6)), expr.LitE(1, Loc(25,6)), Loc(25,6)),
            instr.AssignI(expr.VarE("v:main:t.4", Loc(25,6)), expr.MemberE("b1", expr.MemberE("1a", expr.VarE("v:main:v", Loc(25,6)), Loc(25,6)), Loc(25,6)), Loc(25,6)),
            instr.CondI(expr.BinaryE(expr.VarE("v:main:t.4", Loc(25,6)), op.BO_NE, expr.LitE(2, Loc(25,14)), Loc(25,6)), "NextCheckLand3", "TmpAssignLand3", Loc(25,6)),
            instr.LabelI("NextCheckLand3"),
            instr.AssignI(expr.VarE("v:main:t.5", Loc(25,19)), expr.MemberE("b2", expr.MemberE("1a", expr.VarE("v:main:v", Loc(25,19)), Loc(25,19)), Loc(25,19)), Loc(25,19)),
            instr.CondI(expr.BinaryE(expr.VarE("v:main:t.5", Loc(25,19)), op.BO_NE, expr.LitE(2, Loc(25,27)), Loc(25,19)), "ExitLand3", "TmpAssignLand3", Loc(25,6)),
            instr.LabelI("TmpAssignLand3"),
            instr.AssignI(expr.VarE("v:main:t.3", Loc(25,6)), expr.LitE(0, Loc(25,6)), Loc(25,6)),
            instr.LabelI("ExitLand3"),
            instr.CondI(expr.VarE("v:main:t.3", Loc(25,6)), "IfTrue2", "IfFalse2", Loc(25,6)),
            instr.LabelI("IfTrue2"),
            instr.ReturnI(expr.LitE(2, Loc(26,10))),
            instr.GotoI("IfExit2"),
            instr.LabelI("IfFalse2"),
            instr.LabelI("IfExit2"),
            instr.AssignI(expr.VarE("v:main:t.6", Loc(27,6)), expr.MemberE("c", expr.MemberE("1a", expr.MemberE("1a", expr.MemberE("2a", expr.VarE("v:main:v", Loc(27,6)), Loc(27,6)), Loc(27,6)), Loc(27,6)), Loc(27,6)), Loc(27,6)),
            instr.AssignI(expr.VarE("v:main:t.7", Loc(27,6)), expr.BinaryE(expr.VarE("v:main:t.6", Loc(27,6)), op.BO_NE, expr.LitE(3, Loc(27,13)), Loc(27,6)), Loc(27,6)),
            instr.CondI(expr.VarE("v:main:t.7", Loc(27,6)), "IfTrue4", "IfFalse4", Loc(27,6)),
            instr.LabelI("IfTrue4"),
            instr.ReturnI(expr.LitE(3, Loc(28,10))),
            instr.GotoI("IfExit4"),
            instr.LabelI("IfFalse4"),
            instr.LabelI("IfExit4"),
            instr.AssignI(expr.VarE("v:main:t.8", Loc(29,6)), expr.MemberE("d", expr.MemberE("3a", expr.VarE("v:main:v", Loc(29,6)), Loc(29,6)), Loc(29,6)), Loc(29,6)),
            instr.AssignI(expr.VarE("v:main:t.9", Loc(29,6)), expr.BinaryE(expr.VarE("v:main:t.8", Loc(29,6)), op.BO_NE, expr.LitE(4, Loc(29,13)), Loc(29,6)), Loc(29,6)),
            instr.CondI(expr.VarE("v:main:t.9", Loc(29,6)), "IfTrue5", "IfFalse5", Loc(29,6)),
            instr.LabelI("IfTrue5"),
            instr.ReturnI(expr.LitE(4, Loc(30,10))),
            instr.GotoI("IfExit5"),
            instr.LabelI("IfFalse5"),
            instr.LabelI("IfExit5"),
            instr.ReturnI(expr.LitE(0, Loc(32,9))),
        ], # instrSeq end.
      ), # f:main() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
