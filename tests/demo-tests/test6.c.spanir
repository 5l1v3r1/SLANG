
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "test6.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:foo:t.1t.": types.Int32,
    "v:foo:2.p": types.Ptr(to=types.Int32),
    "v:printf:__format": types.Ptr(to=types.Int8),
    "v:main:u": types.Ptr(to=types.Int32),
    "v:main:a": types.Int32,
    "v:main:tmp": types.Int32,
    "v:main:b": types.Int32,
    "v:cond": types.Int32,
    "v:foo:p": types.Ptr(to=types.Int32),
  }, # end allVars dict

  allObjs = {

    "f:printf":
      obj.Func(
        name = "f:printf",
        paramNames = ["v:printf:__format"],
        variadic = True,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
        ], # instrSeq end.
      ), # f:printf() end. 

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:main:a", Loc(7,3)), expr.LitE(11, Loc(7,7)), Loc(7,3)),
            instr.AssignI(expr.VarE("v:main:b", Loc(8,3)), expr.LitE(13, Loc(8,7)), Loc(8,3)),
            instr.AssignI(expr.VarE("v:cond", Loc(9,3)), expr.LitE(10, Loc(9,10)), Loc(9,3)),
            instr.AssignI(expr.VarE("v:main:u", Loc(10,3)), expr.AddrOfE(expr.VarE("v:main:a", Loc(10,8)), Loc(10,7)), Loc(10,3)),
            instr.AssignI(expr.VarE("v:main:b", Loc(12,3)), expr.CallE(expr.FuncE("f:foo", Loc(12,7)), [expr.VarE("v:main:u", Loc(12,11))], Loc(12,7)), Loc(12,3)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(13,3)), [expr.LitE("""%d""", Loc(13,10)), expr.VarE("v:main:b", Loc(13,16))], Loc(13,3)), Loc(13,3)),
            instr.ReturnI(expr.VarE("v:main:b", Loc(15,10))),
        ], # instrSeq end.
      ), # f:main() end. 

    "f:foo":
      obj.Func(
        name = "f:foo",
        paramNames = ["v:foo:p"],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:foo:t.1t.", Loc(19,10)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:foo:2.p", Loc(19,11)), Loc(19,10)), Loc(19,10)),
            instr.ReturnI(expr.VarE("v:foo:t.1t.", Loc(19,10))),
        ], # instrSeq end.
      ), # f:foo() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
