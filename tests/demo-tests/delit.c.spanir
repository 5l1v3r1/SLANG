
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "delit.c",
  description = "Auto-Translated from Clang AST.",

  allVars = {
    "v:printf:__format": types.Ptr(to=types.Int8),
    "v:add:t.1t": types.Ptr(to=types.Void),
    "v:add:p": types.Ptr(to=types.Int32),
    "v:malloc:__size": types.UInt64,
    "v:add:c": types.Int32,
    "v:main:b": types.Int32,
    "v:add:y": types.Int32,
    "v:main:a": types.Int32,
    "v:main:fun_ptr": types.Ptr(to=types.FuncSig(returnType=types.Void, paramTypes=[types.Int32, types.Int32])),
    "v:main:t.1t": types.FuncSig(returnType=types.Void, paramTypes=[types.Int32, types.Int32]),
    "v:add:x": types.Int32,
  }, # end allVars dict

  allObjs = {

    "f:printf":
      obj.Func(
        name = "f:printf",
        paramNames = ["v:printf:__format"],
        variadic = True,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
        ], # instrSeq end.
      ), # f:printf() end. 

    "f:malloc":
      obj.Func(
        name = "f:malloc",
        paramNames = ["v:malloc:__size"],
        variadic = False,
        returnType = types.Ptr(to=types.Void),

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
        ], # instrSeq end.
      ), # f:malloc() end. 

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = [],
        variadic = False,
        returnType = types.Int32,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:main:a", Loc(6,3)), expr.LitE(10, Loc(6,9)), Loc(6,3)),
            instr.AssignI(expr.VarE("v:main:b", Loc(6,3)), expr.LitE(20, Loc(6,14)), Loc(6,3)),
            instr.AssignI(expr.VarE("v:main:fun_ptr", Loc(7,3)), expr.AddrOfE(expr.FuncE("f:add", Loc(7,29)), Loc(7,28)), Loc(7,3)),
            instr.AssignI(expr.VarE("v:main:t.1t", Loc(8,4)), expr.UnaryE(op.UO_DEREF, expr.VarE("v:main:fun_ptr", Loc(8,5)), Loc(8,4)), Loc(8,4)),
            instr.CallI(expr.CallE(expr.VarE("v:main:t.1t", Loc(8,4)), [expr.VarE("v:main:a", Loc(8,14)), expr.VarE("v:main:b", Loc(8,16))], Loc(8,3)), Loc(8,3)),
        ], # instrSeq end.
      ), # f:main() end. 

    "f:add":
      obj.Func(
        name = "f:add",
        paramNames = ["v:add:x", "v:add:y"],
        variadic = False,
        returnType = types.Void,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        instrSeq = [
            instr.AssignI(expr.VarE("v:add:t.1t", Loc(13,18)), expr.CallE(expr.FuncE("f:malloc", Loc(13,18)), [expr.LitE(4, Loc(13,25))], Loc(13,18)), Loc(13,18)),
            instr.AssignI(expr.VarE("v:add:p", Loc(13,3)), expr.CastE(expr.VarE("v:add:t.1t", Loc(13,18)), op.CastOp(types.Ptr(to=types.Int32)), Loc(13,12)), Loc(13,3)),
            instr.AssignI(expr.VarE("v:add:c", Loc(14,3)), expr.BinaryE(expr.VarE("v:add:x", Loc(14,5)), op.BO_ADD, expr.VarE("v:add:y", Loc(14,7)), Loc(14,5)), Loc(14,3)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(16,3)), [expr.LitE("""Hello
""", Loc(16,10))], Loc(16,3)), Loc(16,3)),
        ], # instrSeq end.
      ), # f:add() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
