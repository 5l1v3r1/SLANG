
# START: A_SPAN_translation_unit.

# eval() the contents of this file.
# Keep the following imports in effect when calling eval.

# import span.ir.types as types
# import span.ir.expr as expr
# import span.ir.instr as instr
# import span.ir.obj as obj
# import span.ir.tunit as irTUnit
# from span.ir.types import Loc

# An instance of span.ir.tunit.TUnit class.
irTUnit.TUnit(
  name = "switch.c",
  description = "Auto-Translated from Clang AST.",
  allVars = {
    "v:main:t.3": types.Int,
    "v:main:t.2": types.Int,
    "v:main:t.1": types.Int,
    "v:printf:__format": types.Ptr(to=types.Char),
    "v:main:argv": types.Ptr(to=types.Ptr(to=types.Char)),
    "v:main:argc": types.Int,
    "v:main:i": types.Int,
    "v:printMe:str": types.Ptr(to=types.Char),
    "v:main:f": types.Float,
  }, # end allVars dict

  allObjs = {
    "f:printMe":
      obj.Func(
        name = "f:printMe",
        paramNames = ["v:printMe:str"],
        variadic = False,
        returnType = types.Float,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          0: [
            instr.NopI(),
          ],

          -1: [
            instr.NopI(),
          ],

          1: [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(5,3)), [expr.VarE("v:printMe:str", Loc(5,10))], Loc(5,3))),
            instr.ReturnI(expr.LitE(2.0, Loc(6,10)), Loc(6,3)),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (-1, 1, types.UnCondEdge),
        }, # bbEdges end
      ), # f:printMe() end. 

    "f:main":
      obj.Func(
        name = "f:main",
        paramNames = ["v:main:argc", "v:main:argv"],
        variadic = False,
        returnType = types.Int,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
          8: [
            instr.AssignI(expr.VarE("v:main:i", Loc(21,7)), expr.LitE(20, Loc(21,11)), Loc(21,7)),
          ],

          7: [
            instr.AssignI(expr.VarE("v:main:i", Loc(24,7)), expr.BinaryE(expr.VarE("v:main:i", Loc(24,11)), op.BO_ADD, expr.LitE(21, Loc(24,15))), Loc(24,7)),
          ],

          6: [
            instr.AssignI(expr.VarE("v:main:i", Loc(26,7)), expr.BinaryE(expr.VarE("v:main:i", Loc(26,11)), op.BO_MUL, expr.LitE(3, Loc(26,15))), Loc(26,7)),
          ],

          5: [
            instr.AssignI(expr.VarE("v:main:i", Loc(28,7)), expr.VarE("v:main:i", Loc(28,11)), Loc(28,7)),
          ],

          11: [
            instr.AssignI(expr.VarE("v:main:t.3", Loc(27,5)), expr.BinaryE(expr.VarE("v:main:i", Loc(19,10)), op.BO_EQ, expr.LitE(10, Loc(20,10)), ), ),
            instr.CondI(expr.VarE("v:main:t.3", Loc(27,5)), ),
          ],

          1: [
            instr.ReturnI(expr.LitE(0, Loc(37,10)), Loc(37,3)),
          ],

          -1: [
            instr.NopI(),
          ],

          0: [
            instr.NopI(),
          ],

          2: [
            instr.NopI(),
          ],

          3: [
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(34,7)), [expr.LitE("""Hello default
""", Loc(34,14))], Loc(34,7))),
          ],

          10: [
            instr.AssignI(expr.VarE("v:main:t.2", Loc(25,5)), expr.BinaryE(expr.VarE("v:main:i", Loc(19,10)), op.BO_EQ, expr.LitE(20, Loc(25,10)), ), ),
            instr.CondI(expr.VarE("v:main:t.2", Loc(25,5)), ),
          ],

          4: [
            instr.AssignI(expr.VarE("v:main:i", Loc(11,3)), expr.LitE(10, Loc(11,11)), Loc(11,3)),
            instr.CallI(expr.CallE(expr.FuncE("f:printf", Loc(13,3)), [expr.LitE("""Hello, World %d %d
""", Loc(13,10)), expr.VarE("v:main:i", Loc(13,35)), expr.LitE(10, Loc(13,39))], Loc(13,3))),
            instr.AssignI(expr.VarE("v:main:f", Loc(15,3)), expr.CallE(expr.FuncE("f:printMe", Loc(15,7)), [expr.LitE("""Hello
""", Loc(15,15))], Loc(15,7)), Loc(15,3)),
            instr.AssignI(expr.VarE("v:main:f", Loc(16,3)), expr.LitE(2.345600, Loc(16,7)), Loc(16,3)),
            instr.AssignI(expr.VarE("v:main:i", Loc(18,3)), expr.BinaryE(expr.LitE(22, Loc(18,7)), op.BO_ADD, expr.LitE(33, Loc(18,12))), Loc(18,3)),
            instr.AssignI(expr.VarE("v:main:t.1", Loc(20,5)), expr.BinaryE(expr.VarE("v:main:i", Loc(19,10)), op.BO_EQ, expr.LitE(30, Loc(27,10)), ), ),
            instr.CondI(expr.VarE("v:main:t.1", Loc(20,5)), ),
          ],

        }, # basicBlocks end.

        bbEdges= {
          (1, 0, types.UnCondEdge),
          (2, 3, types.UnCondEdge),
          (3, 1, types.UnCondEdge),
          (4, 5, types.TrueEdge),
          (10, 6, types.TrueEdge),
          (4, 10, types.FalseEdge),
          (11, 8, types.TrueEdge),
          (10, 11, types.FalseEdge),
          (11, 7, types.FalseEdge),
          (5, 2, types.UnCondEdge),
          (6, 5, types.UnCondEdge),
          (7, 6, types.UnCondEdge),
          (8, 2, types.UnCondEdge),
          (-1, 4, types.UnCondEdge),
        }, # bbEdges end
      ), # f:main() end. 

    "f:printf":
      obj.Func(
        name = "f:printf",
        paramNames = ["v:printf:__format"],
        variadic = True,
        returnType = types.Int,

        # Note: -1 is always start/entry BB. (REQUIRED)
        # Note: 0 is always end/exit BB (REQUIRED)
        basicBlocks = {
        }, # basicBlocks end.

        bbEdges= {
        }, # bbEdges end
      ), # f:printf() end. 

  }, # end allObjs dict
) # irTUnit.TUnit() ends

# END  : A_SPAN_translation_unit.
